
ess_skeleton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08004ef8  08004ef8  00014ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005320  08005320  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005328  08005328  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000058  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004dd0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015a7  00000000  00000000  00024fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005a8  00000000  00000000  00026588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004c0  00000000  00000000  00026b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000030e7  00000000  00000000  00026ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000078c2  00000000  00000000  0002a0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd37b  00000000  00000000  00031999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fed14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002418  00000000  00000000  000fed64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004edc 	.word	0x08004edc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08004edc 	.word	0x08004edc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <delay_msec>:
#include "delay.h"

void delay_msec(uint32_t delay){
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
	while(i < 20000 * delay){
 8000eb8:	e002      	b.n	8000ec0 <delay_msec+0x14>
		i++;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
	while(i < 20000 * delay){
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ec6:	fb03 f202 	mul.w	r2, r3, r2
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f4      	bhi.n	8000eba <delay_msec+0xe>
	}
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	2230      	movs	r2, #48	; 0x30
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fb08 	bl	8002504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <SystemClock_Config+0xb8>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <SystemClock_Config+0xb8>)
 8000f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f12:	6413      	str	r3, [r2, #64]	; 0x40
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <SystemClock_Config+0xb8>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <SystemClock_Config+0xbc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <SystemClock_Config+0xbc>)
 8000f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <SystemClock_Config+0xbc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f44:	2310      	movs	r3, #16
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f50:	2308      	movs	r3, #8
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f54:	23a8      	movs	r3, #168	; 0xa8
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fe59 	bl	8001c1c <HAL_RCC_OscConfig>
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f80:	61fb      	str	r3, [r7, #28]

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	2105      	movs	r1, #5
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 f8b5 	bl	80020f8 <HAL_RCC_ClockConfig>
}
 8000f8e:	bf00      	nop
 8000f90:	3750      	adds	r7, #80	; 0x50
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <_init_leds>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void _init_leds(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <_init_leds+0x60>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <_init_leds+0x60>)
 8000fbe:	f043 0308 	orr.w	r3, r3, #8
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <_init_leds+0x60>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <_init_leds+0x64>)
 8000fd8:	f000 fe06 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fdc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000fe0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <_init_leds+0x64>)
 8000ff4:	f000 fc5c 	bl	80018b0 <HAL_GPIO_Init>

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40020c00 	.word	0x40020c00

08001008 <_init_button>:


void _init_button() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <_init_button+0x44>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a0d      	ldr	r2, [pc, #52]	; (800104c <_init_button+0x44>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <_init_button+0x44>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
	 * Output type is push-pull
	 * Mode is Input
	 * No pull resistor
	 * Speed 100MHz
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800102a:	2301      	movs	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
	/* Initialize pin */
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <_init_button+0x48>)
 8001040:	f000 fc36 	bl	80018b0 <HAL_GPIO_Init>
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000

08001054 <ess_helper_init>:



void ess_helper_init() {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	  SystemClock_Config();
 8001058:	f7ff ff42 	bl	8000ee0 <SystemClock_Config>
	  _init_leds();
 800105c:	f7ff ffa0 	bl	8000fa0 <_init_leds>
	  _init_button();
 8001060:	f7ff ffd2 	bl	8001008 <_init_button>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <led_init>:
#include "led_driver.h"

void led_init(LED_t *led, uint32_t * port, uint32_t pin){
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
	led->port = port;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	601a      	str	r2, [r3, #0]
	led->pin = pin;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	605a      	str	r2, [r3, #4]
	led_off(led);
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 f81c 	bl	80010be <led_off>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <led_on>:

void led_on(LED_t * led){
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	(*led->port) |= 0x1000 << led->pin;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <led_off>:

void led_off(LED_t * led){
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
	(*led->port) &=~ (0x1000 << led->pin);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	400a      	ands	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d013      	beq.n	8001130 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001108:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800110c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001110:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001118:	e000      	b.n	800111c <ITM_SendChar+0x2c>
    {
      __NOP();
 800111a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800111c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f9      	beq.n	800111a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001126:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <_write>:
#include "ess_helper.h"
#include "led_driver.h"
#include "stdio.h"
#include "delay.h"

int _write(int file, char *ptr, int len){
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
	int i = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++){
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	e009      	b.n	8001168 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	60ba      	str	r2, [r7, #8]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffc7 	bl	80010f0 <ITM_SendChar>
	for(i = 0; i < len; i++){
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	dbf1      	blt.n	8001154 <_write+0x16>
	}
	return len;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <lab3>:

#include "stm32f4xx.h"
#include "pwm_driver.h"
#define PORTD ((uint32_t*)0x40020C14)

void lab3(void){
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
	LED_t led_orange;
	LED_t led_blue;
	LED_t led_red;

	/* Initialize system */
	HAL_Init();
 8001182:	f000 fa3d 	bl	8001600 <HAL_Init>
	/* Initialize peripherals on board */
	ess_helper_init();
 8001186:	f7ff ff65 	bl	8001054 <ess_helper_init>

	// set up the leds
	led_init(&led_green, PORTD, 0);
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	2200      	movs	r2, #0
 8001190:	491b      	ldr	r1, [pc, #108]	; (8001200 <lab3+0x84>)
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff68 	bl	8001068 <led_init>
	led_init(&led_orange, PORTD, 1);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2201      	movs	r2, #1
 800119e:	4918      	ldr	r1, [pc, #96]	; (8001200 <lab3+0x84>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff61 	bl	8001068 <led_init>
	led_init(&led_blue, PORTD, 2);
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2202      	movs	r2, #2
 80011ac:	4914      	ldr	r1, [pc, #80]	; (8001200 <lab3+0x84>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff5a 	bl	8001068 <led_init>
	led_init(&led_red, PORTD, 3);
 80011b4:	463b      	mov	r3, r7
 80011b6:	2203      	movs	r2, #3
 80011b8:	4911      	ldr	r1, [pc, #68]	; (8001200 <lab3+0x84>)
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff54 	bl	8001068 <led_init>

	// set up pwm driver
	pwm_driver_init(&led_green, &led_red, &led_orange, &led_blue);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	f107 0210 	add.w	r2, r7, #16
 80011c8:	4639      	mov	r1, r7
 80011ca:	f107 0018 	add.w	r0, r7, #24
 80011ce:	f000 f821 	bl	8001214 <pwm_driver_init>

	// set brightness values
	pwm_driver_set(0, 0);
 80011d2:	2100      	movs	r1, #0
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 f847 	bl	8001268 <pwm_driver_set>
	pwm_driver_set(1, 25);
 80011da:	2119      	movs	r1, #25
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 f843 	bl	8001268 <pwm_driver_set>
	pwm_driver_set(2, 50);
 80011e2:	2132      	movs	r1, #50	; 0x32
 80011e4:	2002      	movs	r0, #2
 80011e6:	f000 f83f 	bl	8001268 <pwm_driver_set>
	pwm_driver_set(3, 100);
 80011ea:	2164      	movs	r1, #100	; 0x64
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f83b 	bl	8001268 <pwm_driver_set>

	// loop
	while(1){
		delay_msec(1);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff fe5a 	bl	8000eac <delay_msec>
		pwm_driver_update();
 80011f8:	f000 f872 	bl	80012e0 <pwm_driver_update>
		delay_msec(1);
 80011fc:	e7f9      	b.n	80011f2 <lab3+0x76>
 80011fe:	bf00      	nop
 8001200:	40020c14 	.word	0x40020c14

08001204 <main>:
	}
}

int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	lab3();
 8001208:	f7ff ffb8 	bl	800117c <lab3>
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <pwm_driver_init>:

// assumes only one pwm_driver instance in the system
static struct pwm_state state;

// initialize pwm driver
void pwm_driver_init(LED_t *ch0, LED_t *ch1, LED_t *ch2, LED_t *ch3){
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
	// start counter at 0
	state.counter = 0;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <pwm_driver_init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

	// set all channels to off
	state.ch0_compare = 0;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <pwm_driver_init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
	state.ch1_compare = 0;
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <pwm_driver_init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
	state.ch2_compare = 0;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <pwm_driver_init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
	state.ch3_compare = 0;
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <pwm_driver_init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]

	// store pointer for each led driver
	state.ch0 = ch0;
 8001240:	4a08      	ldr	r2, [pc, #32]	; (8001264 <pwm_driver_init+0x50>)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6153      	str	r3, [r2, #20]
	state.ch1 = ch1;
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <pwm_driver_init+0x50>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	6193      	str	r3, [r2, #24]
	state.ch2 = ch2;
 800124c:	4a05      	ldr	r2, [pc, #20]	; (8001264 <pwm_driver_init+0x50>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	61d3      	str	r3, [r2, #28]
	state.ch3 = ch3;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <pwm_driver_init+0x50>)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	6213      	str	r3, [r2, #32]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	200001f8 	.word	0x200001f8

08001268 <pwm_driver_set>:

void pwm_driver_set(uint8_t channel, uint8_t value){
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
	// bounds check
	assert(channel >= 0);
	assert(channel < 4);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d905      	bls.n	800128a <pwm_driver_set+0x22>
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <pwm_driver_set+0x68>)
 8001280:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <pwm_driver_set+0x6c>)
 8001282:	2129      	movs	r1, #41	; 0x29
 8001284:	4814      	ldr	r0, [pc, #80]	; (80012d8 <pwm_driver_set+0x70>)
 8001286:	f001 f8e3 	bl	8002450 <__assert_func>

	// update compare register
	switch (channel){
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d81b      	bhi.n	80012c8 <pwm_driver_set+0x60>
 8001290:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <pwm_driver_set+0x30>)
 8001292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001296:	bf00      	nop
 8001298:	080012a9 	.word	0x080012a9
 800129c:	080012b1 	.word	0x080012b1
 80012a0:	080012b9 	.word	0x080012b9
 80012a4:	080012c1 	.word	0x080012c1
	case 0:
		state.ch0_compare = value;
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <pwm_driver_set+0x74>)
 80012ac:	6053      	str	r3, [r2, #4]
		break;
 80012ae:	e00b      	b.n	80012c8 <pwm_driver_set+0x60>
	case 1:
		state.ch1_compare = value;
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <pwm_driver_set+0x74>)
 80012b4:	6093      	str	r3, [r2, #8]
		break;
 80012b6:	e007      	b.n	80012c8 <pwm_driver_set+0x60>
	case 2:
		state.ch2_compare = value;
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <pwm_driver_set+0x74>)
 80012bc:	60d3      	str	r3, [r2, #12]
		break;
 80012be:	e003      	b.n	80012c8 <pwm_driver_set+0x60>
	case 3:
		state.ch3_compare = value;
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	4a06      	ldr	r2, [pc, #24]	; (80012dc <pwm_driver_set+0x74>)
 80012c4:	6113      	str	r3, [r2, #16]
	// no default as have assertions
	}
}
 80012c6:	e7ff      	b.n	80012c8 <pwm_driver_set+0x60>
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	08004ef8 	.word	0x08004ef8
 80012d4:	08004f20 	.word	0x08004f20
 80012d8:	08004f04 	.word	0x08004f04
 80012dc:	200001f8 	.word	0x200001f8

080012e0 <pwm_driver_update>:

void pwm_driver_update(void){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	// update ch0
	if(state.ch0_compare > state.counter){
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <pwm_driver_update+0xa4>)
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <pwm_driver_update+0xa4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d905      	bls.n	80012fc <pwm_driver_update+0x1c>
		led_on(state.ch0);
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <pwm_driver_update+0xa4>)
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff feca 	bl	800108e <led_on>
 80012fa:	e004      	b.n	8001306 <pwm_driver_update+0x26>
	} else {
		led_off(state.ch0);
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <pwm_driver_update+0xa4>)
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fedc 	bl	80010be <led_off>
	}
	// update ch1
	if(state.ch1_compare > state.counter){
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <pwm_driver_update+0xa4>)
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <pwm_driver_update+0xa4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d905      	bls.n	800131e <pwm_driver_update+0x3e>
		led_on(state.ch1);
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <pwm_driver_update+0xa4>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff feb9 	bl	800108e <led_on>
 800131c:	e004      	b.n	8001328 <pwm_driver_update+0x48>
	} else {
		led_off(state.ch1);
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <pwm_driver_update+0xa4>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fecb 	bl	80010be <led_off>
	}
	// update ch2
	if(state.ch2_compare > state.counter){
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <pwm_driver_update+0xa4>)
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <pwm_driver_update+0xa4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d905      	bls.n	8001340 <pwm_driver_update+0x60>
		led_on(state.ch2);
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <pwm_driver_update+0xa4>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fea8 	bl	800108e <led_on>
 800133e:	e004      	b.n	800134a <pwm_driver_update+0x6a>
	} else {
		led_off(state.ch2);
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <pwm_driver_update+0xa4>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff feba 	bl	80010be <led_off>
	}
	// update ch3
	if(state.ch3_compare > state.counter){
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <pwm_driver_update+0xa4>)
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <pwm_driver_update+0xa4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d905      	bls.n	8001362 <pwm_driver_update+0x82>
		led_on(state.ch3);
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <pwm_driver_update+0xa4>)
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe97 	bl	800108e <led_on>
 8001360:	e004      	b.n	800136c <pwm_driver_update+0x8c>
	} else {
		led_off(state.ch3);
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <pwm_driver_update+0xa4>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fea9 	bl	80010be <led_off>
	}

	// update counter value
	if(state.counter++ > PWM_MAX){
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <pwm_driver_update+0xa4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1c5a      	adds	r2, r3, #1
 8001372:	4904      	ldr	r1, [pc, #16]	; (8001384 <pwm_driver_update+0xa4>)
 8001374:	600a      	str	r2, [r1, #0]
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d902      	bls.n	8001380 <pwm_driver_update+0xa0>
		state.counter = 0;
 800137a:	4b02      	ldr	r3, [pc, #8]	; (8001384 <pwm_driver_update+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
	}
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200001f8 	.word	0x200001f8

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <HAL_MspInit+0x4c>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <HAL_MspInit+0x4c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_MspInit+0x4c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800

080013d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <NMI_Handler+0x4>

080013de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <HardFault_Handler+0x4>

080013e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler+0x4>

080013ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <BusFault_Handler+0x4>

080013f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <UsageFault_Handler+0x4>

080013f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001424:	f000 f93e 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_kill>:

int _kill(int pid, int sig)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001446:	f001 f821 	bl	800248c <__errno>
 800144a:	4603      	mov	r3, r0
 800144c:	2216      	movs	r2, #22
 800144e:	601a      	str	r2, [r3, #0]
	return -1;
 8001450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_exit>:

void _exit (int status)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ffe7 	bl	800143c <_kill>
	while (1) {}		/* Make sure we hang here */
 800146e:	e7fe      	b.n	800146e <_exit+0x12>

08001470 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001482:	f3af 8000 	nop.w
 8001486:	4601      	mov	r1, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf0      	blt.n	8001482 <_read+0x12>
	}

return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
	return -1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d2:	605a      	str	r2, [r3, #4]
	return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_isatty>:

int _isatty(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	return 1;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
	return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	; (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f000 ffa2 	bl	800248c <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	220c      	movs	r2, #12
 800154c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20020000 	.word	0x20020000
 8001574:	00000400 	.word	0x00000400
 8001578:	2000021c 	.word	0x2000021c
 800157c:	20000238 	.word	0x20000238

08001580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <SystemInit+0x28>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <SystemInit+0x28>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <SystemInit+0x28>)
 8001596:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159a:	609a      	str	r2, [r3, #8]
#endif
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015b2:	490e      	ldr	r1, [pc, #56]	; (80015ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015c8:	4c0b      	ldr	r4, [pc, #44]	; (80015f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015d6:	f7ff ffd3 	bl	8001580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f000 ff6f 	bl	80024bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015de:	f7ff fe11 	bl	8001204 <main>
  bx  lr    
 80015e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015f0:	08005330 	.word	0x08005330
  ldr r2, =_sbss
 80015f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80015f8:	20000234 	.word	0x20000234

080015fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_Init+0x40>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_Init+0x40>)
 800160a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_Init+0x40>)
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_Init+0x40>)
 8001622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 f90d 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f808 	bl	8001644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001634:	f7ff fea8 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023c00 	.word	0x40023c00

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x54>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x58>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f917 	bl	8001896 <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00e      	b.n	8001690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d80a      	bhi.n	800168e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001680:	f000 f8ed 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_InitTick+0x5c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000000 	.word	0x20000000
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x20>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x24>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_IncTick+0x24>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008
 80016c8:	20000220 	.word	0x20000220

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000220 	.word	0x20000220

080016e4 <__NVIC_SetPriorityGrouping>:
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_SetPriority>:
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff47 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff5c 	bl	800172c <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff8e 	bl	800179c <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffb0 	bl	8001804 <SysTick_Config>
 80018a4:	4603      	mov	r3, r0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	e16b      	b.n	8001ba4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018cc:	2201      	movs	r2, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	f040 815a 	bne.w	8001b9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d00b      	beq.n	800190a <HAL_GPIO_Init+0x5a>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d007      	beq.n	800190a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018fe:	2b11      	cmp	r3, #17
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b12      	cmp	r3, #18
 8001908:	d130      	bne.n	800196c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 0201 	and.w	r2, r3, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0xfc>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b12      	cmp	r3, #18
 80019aa:	d123      	bne.n	80019f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691a      	ldr	r2, [r3, #16]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	69b9      	ldr	r1, [r7, #24]
 80019f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0203 	and.w	r2, r3, #3
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80b4 	beq.w	8001b9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b60      	ldr	r3, [pc, #384]	; (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a5f      	ldr	r2, [pc, #380]	; (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <HAL_GPIO_Init+0x30c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a52:	4a5b      	ldr	r2, [pc, #364]	; (8001bc0 <HAL_GPIO_Init+0x310>)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_GPIO_Init+0x314>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d02b      	beq.n	8001ad6 <HAL_GPIO_Init+0x226>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_GPIO_Init+0x318>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d025      	beq.n	8001ad2 <HAL_GPIO_Init+0x222>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <HAL_GPIO_Init+0x31c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01f      	beq.n	8001ace <HAL_GPIO_Init+0x21e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <HAL_GPIO_Init+0x320>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d019      	beq.n	8001aca <HAL_GPIO_Init+0x21a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <HAL_GPIO_Init+0x324>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0x216>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4d      	ldr	r2, [pc, #308]	; (8001bd8 <HAL_GPIO_Init+0x328>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_GPIO_Init+0x212>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4c      	ldr	r2, [pc, #304]	; (8001bdc <HAL_GPIO_Init+0x32c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d007      	beq.n	8001abe <HAL_GPIO_Init+0x20e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4b      	ldr	r2, [pc, #300]	; (8001be0 <HAL_GPIO_Init+0x330>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_GPIO_Init+0x20a>
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	e00e      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001aba:	2308      	movs	r3, #8
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x228>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <HAL_GPIO_Init+0x310>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b1a:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b20:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b44:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b6e:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <HAL_GPIO_Init+0x334>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f ae90 	bls.w	80018cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40021400 	.word	0x40021400
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021c00 	.word	0x40021c00
 8001be4:	40013c00 	.word	0x40013c00

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e25e      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d075      	beq.n	8001d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d00c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c46:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d112      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c52:	4b82      	ldr	r3, [pc, #520]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c5e:	d10b      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	4b7e      	ldr	r3, [pc, #504]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d05b      	beq.n	8001d24 <HAL_RCC_OscConfig+0x108>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d157      	bne.n	8001d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e239      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d106      	bne.n	8001c90 <HAL_RCC_OscConfig+0x74>
 8001c82:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a75      	ldr	r2, [pc, #468]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e01d      	b.n	8001ccc <HAL_RCC_OscConfig+0xb0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x98>
 8001c9a:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6f      	ldr	r2, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6c      	ldr	r2, [pc, #432]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0xb0>
 8001cb4:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a68      	ldr	r2, [pc, #416]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b66      	ldr	r3, [pc, #408]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a65      	ldr	r2, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fcfa 	bl	80016cc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fcf6 	bl	80016cc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1fe      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b5b      	ldr	r3, [pc, #364]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0xc0>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fce6 	bl	80016cc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fce2 	bl	80016cc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1ea      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0xe8>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d063      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00b      	beq.n	8001d56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d11c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d4a:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d116      	bne.n	8001d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_RCC_OscConfig+0x152>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e1be      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4937      	ldr	r1, [pc, #220]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	e03a      	b.n	8001dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d8c:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <HAL_RCC_OscConfig+0x244>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff fc9b 	bl	80016cc <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fc97 	bl	80016cc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e19f      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4925      	ldr	r1, [pc, #148]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
 8001dcc:	e015      	b.n	8001dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <HAL_RCC_OscConfig+0x244>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fc7a 	bl	80016cc <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc76 	bl	80016cc <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e17e      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d036      	beq.n	8001e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d016      	beq.n	8001e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_RCC_OscConfig+0x248>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7ff fc5a 	bl	80016cc <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fc56 	bl	80016cc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e15e      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x200>
 8001e3a:	e01b      	b.n	8001e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_OscConfig+0x248>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7ff fc43 	bl	80016cc <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	e00e      	b.n	8001e68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fc3f 	bl	80016cc <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d907      	bls.n	8001e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e147      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	42470000 	.word	0x42470000
 8001e64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ea      	bne.n	8001e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8097 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b81      	ldr	r3, [pc, #516]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10f      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b7d      	ldr	r3, [pc, #500]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a7c      	ldr	r2, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b7a      	ldr	r3, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b77      	ldr	r3, [pc, #476]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d118      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ebe:	4b74      	ldr	r3, [pc, #464]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a73      	ldr	r2, [pc, #460]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eca:	f7ff fbff 	bl	80016cc <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f7ff fbfb 	bl	80016cc <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e103      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	; (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2ea>
 8001ef8:	4b64      	ldr	r3, [pc, #400]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a63      	ldr	r2, [pc, #396]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	e01c      	b.n	8001f40 <HAL_RCC_OscConfig+0x324>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x30c>
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f12:	4a5e      	ldr	r2, [pc, #376]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1a:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0x324>
 8001f28:	4b58      	ldr	r3, [pc, #352]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	4a57      	ldr	r2, [pc, #348]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
 8001f34:	4b55      	ldr	r3, [pc, #340]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	4a54      	ldr	r2, [pc, #336]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f3a:	f023 0304 	bic.w	r3, r3, #4
 8001f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff fbc0 	bl	80016cc <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7ff fbbc 	bl	80016cc <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0c2      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0ee      	beq.n	8001f50 <HAL_RCC_OscConfig+0x334>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff fbaa 	bl	80016cc <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fba6 	bl	80016cc <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0ac      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f92:	4b3e      	ldr	r3, [pc, #248]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ee      	bne.n	8001f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a38      	ldr	r2, [pc, #224]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 8098 	beq.w	80020ea <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d05c      	beq.n	8002080 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d141      	bne.n	8002052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_OscConfig+0x478>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fb7a 	bl	80016cc <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff fb76 	bl	80016cc <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e07e      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	3b01      	subs	r3, #1
 8002014:	041b      	lsls	r3, r3, #16
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	491b      	ldr	r1, [pc, #108]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002024:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x478>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff fb4f 	bl	80016cc <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff fb4b 	bl	80016cc <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e053      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x416>
 8002050:	e04b      	b.n	80020ea <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <HAL_RCC_OscConfig+0x478>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fb38 	bl	80016cc <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff fb34 	bl	80016cc <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e03c      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_OscConfig+0x470>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x444>
 800207e:	e034      	b.n	80020ea <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e02f      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000
 8002094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <HAL_RCC_OscConfig+0x4d8>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d11c      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d115      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020c0:	4013      	ands	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10d      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0cc      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d90c      	bls.n	8002134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b65      	ldr	r3, [pc, #404]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0b8      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d020      	beq.n	8002182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800214c:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a58      	ldr	r2, [pc, #352]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002164:	4b53      	ldr	r3, [pc, #332]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b50      	ldr	r3, [pc, #320]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	494d      	ldr	r1, [pc, #308]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d044      	beq.n	8002218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b47      	ldr	r3, [pc, #284]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d119      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e07f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e067      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d6:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4934      	ldr	r1, [pc, #208]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e8:	f7ff fa70 	bl	80016cc <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f0:	f7ff fa6c 	bl	80016cc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e04f      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 020c 	and.w	r2, r3, #12
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	429a      	cmp	r2, r3
 8002216:	d1eb      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002218:	4b25      	ldr	r3, [pc, #148]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d20c      	bcs.n	8002240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e032      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4916      	ldr	r1, [pc, #88]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	490e      	ldr	r1, [pc, #56]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227e:	f000 f821 	bl	80022c4 <HAL_RCC_GetSysClockFreq>
 8002282:	4602      	mov	r2, r0
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	490a      	ldr	r1, [pc, #40]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	5ccb      	ldrb	r3, [r1, r3]
 8002292:	fa22 f303 	lsr.w	r3, r2, r3
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f9d0 	bl	8001644 <HAL_InitTick>

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023c00 	.word	0x40023c00
 80022b4:	40023800 	.word	0x40023800
 80022b8:	08004f30 	.word	0x08004f30
 80022bc:	20000000 	.word	0x20000000
 80022c0:	20000004 	.word	0x20000004

080022c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c8:	b090      	sub	sp, #64	; 0x40
 80022ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
 80022d0:	2300      	movs	r3, #0
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d4:	2300      	movs	r3, #0
 80022d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022dc:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d00d      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x40>
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	f200 80a1 	bhi.w	8002430 <HAL_RCC_GetSysClockFreq+0x16c>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_GetSysClockFreq+0x34>
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d003      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x3a>
 80022f6:	e09b      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b53      	ldr	r3, [pc, #332]	; (8002448 <HAL_RCC_GetSysClockFreq+0x184>)
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022fc:	e09b      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fe:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002302:	e098      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002304:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800230e:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d028      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231a:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	2200      	movs	r2, #0
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	627a      	str	r2, [r7, #36]	; 0x24
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800232c:	2100      	movs	r1, #0
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 8002330:	fb03 f201 	mul.w	r2, r3, r1
 8002334:	2300      	movs	r3, #0
 8002336:	fb00 f303 	mul.w	r3, r0, r3
 800233a:	4413      	add	r3, r2
 800233c:	4a43      	ldr	r2, [pc, #268]	; (800244c <HAL_RCC_GetSysClockFreq+0x188>)
 800233e:	fba0 1202 	umull	r1, r2, r0, r2
 8002342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002344:	460a      	mov	r2, r1
 8002346:	62ba      	str	r2, [r7, #40]	; 0x28
 8002348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234a:	4413      	add	r3, r2
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002350:	2200      	movs	r2, #0
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	61fa      	str	r2, [r7, #28]
 8002356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800235a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800235e:	f7fe fc23 	bl	8000ba8 <__aeabi_uldivmod>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4613      	mov	r3, r2
 8002368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800236a:	e053      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236c:	4b35      	ldr	r3, [pc, #212]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	2200      	movs	r2, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	617a      	str	r2, [r7, #20]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800237e:	f04f 0b00 	mov.w	fp, #0
 8002382:	4652      	mov	r2, sl
 8002384:	465b      	mov	r3, fp
 8002386:	f04f 0000 	mov.w	r0, #0
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	0159      	lsls	r1, r3, #5
 8002390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002394:	0150      	lsls	r0, r2, #5
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	ebb2 080a 	subs.w	r8, r2, sl
 800239e:	eb63 090b 	sbc.w	r9, r3, fp
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023b6:	ebb2 0408 	subs.w	r4, r2, r8
 80023ba:	eb63 0509 	sbc.w	r5, r3, r9
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	00eb      	lsls	r3, r5, #3
 80023c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023cc:	00e2      	lsls	r2, r4, #3
 80023ce:	4614      	mov	r4, r2
 80023d0:	461d      	mov	r5, r3
 80023d2:	eb14 030a 	adds.w	r3, r4, sl
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	eb45 030b 	adc.w	r3, r5, fp
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ea:	4629      	mov	r1, r5
 80023ec:	028b      	lsls	r3, r1, #10
 80023ee:	4621      	mov	r1, r4
 80023f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f4:	4621      	mov	r1, r4
 80023f6:	028a      	lsls	r2, r1, #10
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	2200      	movs	r2, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	60fa      	str	r2, [r7, #12]
 8002404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002408:	f7fe fbce 	bl	8000ba8 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4613      	mov	r3, r2
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_GetSysClockFreq+0x180>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	3301      	adds	r3, #1
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800242e:	e002      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_GetSysClockFreq+0x184>)
 8002432:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002438:	4618      	mov	r0, r3
 800243a:	3740      	adds	r7, #64	; 0x40
 800243c:	46bd      	mov	sp, r7
 800243e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	00f42400 	.word	0x00f42400
 800244c:	017d7840 	.word	0x017d7840

08002450 <__assert_func>:
 8002450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002452:	4614      	mov	r4, r2
 8002454:	461a      	mov	r2, r3
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <__assert_func+0x2c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4605      	mov	r5, r0
 800245c:	68d8      	ldr	r0, [r3, #12]
 800245e:	b14c      	cbz	r4, 8002474 <__assert_func+0x24>
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <__assert_func+0x30>)
 8002462:	9100      	str	r1, [sp, #0]
 8002464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002468:	4906      	ldr	r1, [pc, #24]	; (8002484 <__assert_func+0x34>)
 800246a:	462b      	mov	r3, r5
 800246c:	f000 f814 	bl	8002498 <fiprintf>
 8002470:	f000 fed4 	bl	800321c <abort>
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__assert_func+0x38>)
 8002476:	461c      	mov	r4, r3
 8002478:	e7f3      	b.n	8002462 <__assert_func+0x12>
 800247a:	bf00      	nop
 800247c:	2000000c 	.word	0x2000000c
 8002480:	08004f40 	.word	0x08004f40
 8002484:	08004f4d 	.word	0x08004f4d
 8002488:	08004f7b 	.word	0x08004f7b

0800248c <__errno>:
 800248c:	4b01      	ldr	r3, [pc, #4]	; (8002494 <__errno+0x8>)
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	2000000c 	.word	0x2000000c

08002498 <fiprintf>:
 8002498:	b40e      	push	{r1, r2, r3}
 800249a:	b503      	push	{r0, r1, lr}
 800249c:	4601      	mov	r1, r0
 800249e:	ab03      	add	r3, sp, #12
 80024a0:	4805      	ldr	r0, [pc, #20]	; (80024b8 <fiprintf+0x20>)
 80024a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80024a6:	6800      	ldr	r0, [r0, #0]
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	f000 f85d 	bl	8002568 <_vfiprintf_r>
 80024ae:	b002      	add	sp, #8
 80024b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80024b4:	b003      	add	sp, #12
 80024b6:	4770      	bx	lr
 80024b8:	2000000c 	.word	0x2000000c

080024bc <__libc_init_array>:
 80024bc:	b570      	push	{r4, r5, r6, lr}
 80024be:	4d0d      	ldr	r5, [pc, #52]	; (80024f4 <__libc_init_array+0x38>)
 80024c0:	4c0d      	ldr	r4, [pc, #52]	; (80024f8 <__libc_init_array+0x3c>)
 80024c2:	1b64      	subs	r4, r4, r5
 80024c4:	10a4      	asrs	r4, r4, #2
 80024c6:	2600      	movs	r6, #0
 80024c8:	42a6      	cmp	r6, r4
 80024ca:	d109      	bne.n	80024e0 <__libc_init_array+0x24>
 80024cc:	4d0b      	ldr	r5, [pc, #44]	; (80024fc <__libc_init_array+0x40>)
 80024ce:	4c0c      	ldr	r4, [pc, #48]	; (8002500 <__libc_init_array+0x44>)
 80024d0:	f002 fd04 	bl	8004edc <_init>
 80024d4:	1b64      	subs	r4, r4, r5
 80024d6:	10a4      	asrs	r4, r4, #2
 80024d8:	2600      	movs	r6, #0
 80024da:	42a6      	cmp	r6, r4
 80024dc:	d105      	bne.n	80024ea <__libc_init_array+0x2e>
 80024de:	bd70      	pop	{r4, r5, r6, pc}
 80024e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e4:	4798      	blx	r3
 80024e6:	3601      	adds	r6, #1
 80024e8:	e7ee      	b.n	80024c8 <__libc_init_array+0xc>
 80024ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ee:	4798      	blx	r3
 80024f0:	3601      	adds	r6, #1
 80024f2:	e7f2      	b.n	80024da <__libc_init_array+0x1e>
 80024f4:	08005328 	.word	0x08005328
 80024f8:	08005328 	.word	0x08005328
 80024fc:	08005328 	.word	0x08005328
 8002500:	0800532c 	.word	0x0800532c

08002504 <memset>:
 8002504:	4402      	add	r2, r0
 8002506:	4603      	mov	r3, r0
 8002508:	4293      	cmp	r3, r2
 800250a:	d100      	bne.n	800250e <memset+0xa>
 800250c:	4770      	bx	lr
 800250e:	f803 1b01 	strb.w	r1, [r3], #1
 8002512:	e7f9      	b.n	8002508 <memset+0x4>

08002514 <__sfputc_r>:
 8002514:	6893      	ldr	r3, [r2, #8]
 8002516:	3b01      	subs	r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	b410      	push	{r4}
 800251c:	6093      	str	r3, [r2, #8]
 800251e:	da08      	bge.n	8002532 <__sfputc_r+0x1e>
 8002520:	6994      	ldr	r4, [r2, #24]
 8002522:	42a3      	cmp	r3, r4
 8002524:	db01      	blt.n	800252a <__sfputc_r+0x16>
 8002526:	290a      	cmp	r1, #10
 8002528:	d103      	bne.n	8002532 <__sfputc_r+0x1e>
 800252a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800252e:	f000 bdb5 	b.w	800309c <__swbuf_r>
 8002532:	6813      	ldr	r3, [r2, #0]
 8002534:	1c58      	adds	r0, r3, #1
 8002536:	6010      	str	r0, [r2, #0]
 8002538:	7019      	strb	r1, [r3, #0]
 800253a:	4608      	mov	r0, r1
 800253c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002540:	4770      	bx	lr

08002542 <__sfputs_r>:
 8002542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002544:	4606      	mov	r6, r0
 8002546:	460f      	mov	r7, r1
 8002548:	4614      	mov	r4, r2
 800254a:	18d5      	adds	r5, r2, r3
 800254c:	42ac      	cmp	r4, r5
 800254e:	d101      	bne.n	8002554 <__sfputs_r+0x12>
 8002550:	2000      	movs	r0, #0
 8002552:	e007      	b.n	8002564 <__sfputs_r+0x22>
 8002554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002558:	463a      	mov	r2, r7
 800255a:	4630      	mov	r0, r6
 800255c:	f7ff ffda 	bl	8002514 <__sfputc_r>
 8002560:	1c43      	adds	r3, r0, #1
 8002562:	d1f3      	bne.n	800254c <__sfputs_r+0xa>
 8002564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002568 <_vfiprintf_r>:
 8002568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800256c:	460d      	mov	r5, r1
 800256e:	b09d      	sub	sp, #116	; 0x74
 8002570:	4614      	mov	r4, r2
 8002572:	4698      	mov	r8, r3
 8002574:	4606      	mov	r6, r0
 8002576:	b118      	cbz	r0, 8002580 <_vfiprintf_r+0x18>
 8002578:	6983      	ldr	r3, [r0, #24]
 800257a:	b90b      	cbnz	r3, 8002580 <_vfiprintf_r+0x18>
 800257c:	f001 fde8 	bl	8004150 <__sinit>
 8002580:	4b89      	ldr	r3, [pc, #548]	; (80027a8 <_vfiprintf_r+0x240>)
 8002582:	429d      	cmp	r5, r3
 8002584:	d11b      	bne.n	80025be <_vfiprintf_r+0x56>
 8002586:	6875      	ldr	r5, [r6, #4]
 8002588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800258a:	07d9      	lsls	r1, r3, #31
 800258c:	d405      	bmi.n	800259a <_vfiprintf_r+0x32>
 800258e:	89ab      	ldrh	r3, [r5, #12]
 8002590:	059a      	lsls	r2, r3, #22
 8002592:	d402      	bmi.n	800259a <_vfiprintf_r+0x32>
 8002594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002596:	f001 fe7e 	bl	8004296 <__retarget_lock_acquire_recursive>
 800259a:	89ab      	ldrh	r3, [r5, #12]
 800259c:	071b      	lsls	r3, r3, #28
 800259e:	d501      	bpl.n	80025a4 <_vfiprintf_r+0x3c>
 80025a0:	692b      	ldr	r3, [r5, #16]
 80025a2:	b9eb      	cbnz	r3, 80025e0 <_vfiprintf_r+0x78>
 80025a4:	4629      	mov	r1, r5
 80025a6:	4630      	mov	r0, r6
 80025a8:	f000 fdca 	bl	8003140 <__swsetup_r>
 80025ac:	b1c0      	cbz	r0, 80025e0 <_vfiprintf_r+0x78>
 80025ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025b0:	07dc      	lsls	r4, r3, #31
 80025b2:	d50e      	bpl.n	80025d2 <_vfiprintf_r+0x6a>
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b8:	b01d      	add	sp, #116	; 0x74
 80025ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025be:	4b7b      	ldr	r3, [pc, #492]	; (80027ac <_vfiprintf_r+0x244>)
 80025c0:	429d      	cmp	r5, r3
 80025c2:	d101      	bne.n	80025c8 <_vfiprintf_r+0x60>
 80025c4:	68b5      	ldr	r5, [r6, #8]
 80025c6:	e7df      	b.n	8002588 <_vfiprintf_r+0x20>
 80025c8:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <_vfiprintf_r+0x248>)
 80025ca:	429d      	cmp	r5, r3
 80025cc:	bf08      	it	eq
 80025ce:	68f5      	ldreq	r5, [r6, #12]
 80025d0:	e7da      	b.n	8002588 <_vfiprintf_r+0x20>
 80025d2:	89ab      	ldrh	r3, [r5, #12]
 80025d4:	0598      	lsls	r0, r3, #22
 80025d6:	d4ed      	bmi.n	80025b4 <_vfiprintf_r+0x4c>
 80025d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025da:	f001 fe5d 	bl	8004298 <__retarget_lock_release_recursive>
 80025de:	e7e9      	b.n	80025b4 <_vfiprintf_r+0x4c>
 80025e0:	2300      	movs	r3, #0
 80025e2:	9309      	str	r3, [sp, #36]	; 0x24
 80025e4:	2320      	movs	r3, #32
 80025e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80025ee:	2330      	movs	r3, #48	; 0x30
 80025f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80027b4 <_vfiprintf_r+0x24c>
 80025f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025f8:	f04f 0901 	mov.w	r9, #1
 80025fc:	4623      	mov	r3, r4
 80025fe:	469a      	mov	sl, r3
 8002600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002604:	b10a      	cbz	r2, 800260a <_vfiprintf_r+0xa2>
 8002606:	2a25      	cmp	r2, #37	; 0x25
 8002608:	d1f9      	bne.n	80025fe <_vfiprintf_r+0x96>
 800260a:	ebba 0b04 	subs.w	fp, sl, r4
 800260e:	d00b      	beq.n	8002628 <_vfiprintf_r+0xc0>
 8002610:	465b      	mov	r3, fp
 8002612:	4622      	mov	r2, r4
 8002614:	4629      	mov	r1, r5
 8002616:	4630      	mov	r0, r6
 8002618:	f7ff ff93 	bl	8002542 <__sfputs_r>
 800261c:	3001      	adds	r0, #1
 800261e:	f000 80aa 	beq.w	8002776 <_vfiprintf_r+0x20e>
 8002622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002624:	445a      	add	r2, fp
 8002626:	9209      	str	r2, [sp, #36]	; 0x24
 8002628:	f89a 3000 	ldrb.w	r3, [sl]
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80a2 	beq.w	8002776 <_vfiprintf_r+0x20e>
 8002632:	2300      	movs	r3, #0
 8002634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800263c:	f10a 0a01 	add.w	sl, sl, #1
 8002640:	9304      	str	r3, [sp, #16]
 8002642:	9307      	str	r3, [sp, #28]
 8002644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002648:	931a      	str	r3, [sp, #104]	; 0x68
 800264a:	4654      	mov	r4, sl
 800264c:	2205      	movs	r2, #5
 800264e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002652:	4858      	ldr	r0, [pc, #352]	; (80027b4 <_vfiprintf_r+0x24c>)
 8002654:	f7fd fdc4 	bl	80001e0 <memchr>
 8002658:	9a04      	ldr	r2, [sp, #16]
 800265a:	b9d8      	cbnz	r0, 8002694 <_vfiprintf_r+0x12c>
 800265c:	06d1      	lsls	r1, r2, #27
 800265e:	bf44      	itt	mi
 8002660:	2320      	movmi	r3, #32
 8002662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002666:	0713      	lsls	r3, r2, #28
 8002668:	bf44      	itt	mi
 800266a:	232b      	movmi	r3, #43	; 0x2b
 800266c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002670:	f89a 3000 	ldrb.w	r3, [sl]
 8002674:	2b2a      	cmp	r3, #42	; 0x2a
 8002676:	d015      	beq.n	80026a4 <_vfiprintf_r+0x13c>
 8002678:	9a07      	ldr	r2, [sp, #28]
 800267a:	4654      	mov	r4, sl
 800267c:	2000      	movs	r0, #0
 800267e:	f04f 0c0a 	mov.w	ip, #10
 8002682:	4621      	mov	r1, r4
 8002684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002688:	3b30      	subs	r3, #48	; 0x30
 800268a:	2b09      	cmp	r3, #9
 800268c:	d94e      	bls.n	800272c <_vfiprintf_r+0x1c4>
 800268e:	b1b0      	cbz	r0, 80026be <_vfiprintf_r+0x156>
 8002690:	9207      	str	r2, [sp, #28]
 8002692:	e014      	b.n	80026be <_vfiprintf_r+0x156>
 8002694:	eba0 0308 	sub.w	r3, r0, r8
 8002698:	fa09 f303 	lsl.w	r3, r9, r3
 800269c:	4313      	orrs	r3, r2
 800269e:	9304      	str	r3, [sp, #16]
 80026a0:	46a2      	mov	sl, r4
 80026a2:	e7d2      	b.n	800264a <_vfiprintf_r+0xe2>
 80026a4:	9b03      	ldr	r3, [sp, #12]
 80026a6:	1d19      	adds	r1, r3, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	9103      	str	r1, [sp, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bfbb      	ittet	lt
 80026b0:	425b      	neglt	r3, r3
 80026b2:	f042 0202 	orrlt.w	r2, r2, #2
 80026b6:	9307      	strge	r3, [sp, #28]
 80026b8:	9307      	strlt	r3, [sp, #28]
 80026ba:	bfb8      	it	lt
 80026bc:	9204      	strlt	r2, [sp, #16]
 80026be:	7823      	ldrb	r3, [r4, #0]
 80026c0:	2b2e      	cmp	r3, #46	; 0x2e
 80026c2:	d10c      	bne.n	80026de <_vfiprintf_r+0x176>
 80026c4:	7863      	ldrb	r3, [r4, #1]
 80026c6:	2b2a      	cmp	r3, #42	; 0x2a
 80026c8:	d135      	bne.n	8002736 <_vfiprintf_r+0x1ce>
 80026ca:	9b03      	ldr	r3, [sp, #12]
 80026cc:	1d1a      	adds	r2, r3, #4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	9203      	str	r2, [sp, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bfb8      	it	lt
 80026d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80026da:	3402      	adds	r4, #2
 80026dc:	9305      	str	r3, [sp, #20]
 80026de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80027c4 <_vfiprintf_r+0x25c>
 80026e2:	7821      	ldrb	r1, [r4, #0]
 80026e4:	2203      	movs	r2, #3
 80026e6:	4650      	mov	r0, sl
 80026e8:	f7fd fd7a 	bl	80001e0 <memchr>
 80026ec:	b140      	cbz	r0, 8002700 <_vfiprintf_r+0x198>
 80026ee:	2340      	movs	r3, #64	; 0x40
 80026f0:	eba0 000a 	sub.w	r0, r0, sl
 80026f4:	fa03 f000 	lsl.w	r0, r3, r0
 80026f8:	9b04      	ldr	r3, [sp, #16]
 80026fa:	4303      	orrs	r3, r0
 80026fc:	3401      	adds	r4, #1
 80026fe:	9304      	str	r3, [sp, #16]
 8002700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002704:	482c      	ldr	r0, [pc, #176]	; (80027b8 <_vfiprintf_r+0x250>)
 8002706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800270a:	2206      	movs	r2, #6
 800270c:	f7fd fd68 	bl	80001e0 <memchr>
 8002710:	2800      	cmp	r0, #0
 8002712:	d03f      	beq.n	8002794 <_vfiprintf_r+0x22c>
 8002714:	4b29      	ldr	r3, [pc, #164]	; (80027bc <_vfiprintf_r+0x254>)
 8002716:	bb1b      	cbnz	r3, 8002760 <_vfiprintf_r+0x1f8>
 8002718:	9b03      	ldr	r3, [sp, #12]
 800271a:	3307      	adds	r3, #7
 800271c:	f023 0307 	bic.w	r3, r3, #7
 8002720:	3308      	adds	r3, #8
 8002722:	9303      	str	r3, [sp, #12]
 8002724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002726:	443b      	add	r3, r7
 8002728:	9309      	str	r3, [sp, #36]	; 0x24
 800272a:	e767      	b.n	80025fc <_vfiprintf_r+0x94>
 800272c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002730:	460c      	mov	r4, r1
 8002732:	2001      	movs	r0, #1
 8002734:	e7a5      	b.n	8002682 <_vfiprintf_r+0x11a>
 8002736:	2300      	movs	r3, #0
 8002738:	3401      	adds	r4, #1
 800273a:	9305      	str	r3, [sp, #20]
 800273c:	4619      	mov	r1, r3
 800273e:	f04f 0c0a 	mov.w	ip, #10
 8002742:	4620      	mov	r0, r4
 8002744:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002748:	3a30      	subs	r2, #48	; 0x30
 800274a:	2a09      	cmp	r2, #9
 800274c:	d903      	bls.n	8002756 <_vfiprintf_r+0x1ee>
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0c5      	beq.n	80026de <_vfiprintf_r+0x176>
 8002752:	9105      	str	r1, [sp, #20]
 8002754:	e7c3      	b.n	80026de <_vfiprintf_r+0x176>
 8002756:	fb0c 2101 	mla	r1, ip, r1, r2
 800275a:	4604      	mov	r4, r0
 800275c:	2301      	movs	r3, #1
 800275e:	e7f0      	b.n	8002742 <_vfiprintf_r+0x1da>
 8002760:	ab03      	add	r3, sp, #12
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	462a      	mov	r2, r5
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <_vfiprintf_r+0x258>)
 8002768:	a904      	add	r1, sp, #16
 800276a:	4630      	mov	r0, r6
 800276c:	f000 f8cc 	bl	8002908 <_printf_float>
 8002770:	4607      	mov	r7, r0
 8002772:	1c78      	adds	r0, r7, #1
 8002774:	d1d6      	bne.n	8002724 <_vfiprintf_r+0x1bc>
 8002776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002778:	07d9      	lsls	r1, r3, #31
 800277a:	d405      	bmi.n	8002788 <_vfiprintf_r+0x220>
 800277c:	89ab      	ldrh	r3, [r5, #12]
 800277e:	059a      	lsls	r2, r3, #22
 8002780:	d402      	bmi.n	8002788 <_vfiprintf_r+0x220>
 8002782:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002784:	f001 fd88 	bl	8004298 <__retarget_lock_release_recursive>
 8002788:	89ab      	ldrh	r3, [r5, #12]
 800278a:	065b      	lsls	r3, r3, #25
 800278c:	f53f af12 	bmi.w	80025b4 <_vfiprintf_r+0x4c>
 8002790:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002792:	e711      	b.n	80025b8 <_vfiprintf_r+0x50>
 8002794:	ab03      	add	r3, sp, #12
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	462a      	mov	r2, r5
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <_vfiprintf_r+0x258>)
 800279c:	a904      	add	r1, sp, #16
 800279e:	4630      	mov	r0, r6
 80027a0:	f000 fb56 	bl	8002e50 <_printf_i>
 80027a4:	e7e4      	b.n	8002770 <_vfiprintf_r+0x208>
 80027a6:	bf00      	nop
 80027a8:	08005078 	.word	0x08005078
 80027ac:	08005098 	.word	0x08005098
 80027b0:	08005058 	.word	0x08005058
 80027b4:	08004f80 	.word	0x08004f80
 80027b8:	08004f8a 	.word	0x08004f8a
 80027bc:	08002909 	.word	0x08002909
 80027c0:	08002543 	.word	0x08002543
 80027c4:	08004f86 	.word	0x08004f86

080027c8 <__cvt>:
 80027c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027cc:	ec55 4b10 	vmov	r4, r5, d0
 80027d0:	2d00      	cmp	r5, #0
 80027d2:	460e      	mov	r6, r1
 80027d4:	4619      	mov	r1, r3
 80027d6:	462b      	mov	r3, r5
 80027d8:	bfbb      	ittet	lt
 80027da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80027de:	461d      	movlt	r5, r3
 80027e0:	2300      	movge	r3, #0
 80027e2:	232d      	movlt	r3, #45	; 0x2d
 80027e4:	700b      	strb	r3, [r1, #0]
 80027e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80027ec:	4691      	mov	r9, r2
 80027ee:	f023 0820 	bic.w	r8, r3, #32
 80027f2:	bfbc      	itt	lt
 80027f4:	4622      	movlt	r2, r4
 80027f6:	4614      	movlt	r4, r2
 80027f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80027fc:	d005      	beq.n	800280a <__cvt+0x42>
 80027fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002802:	d100      	bne.n	8002806 <__cvt+0x3e>
 8002804:	3601      	adds	r6, #1
 8002806:	2102      	movs	r1, #2
 8002808:	e000      	b.n	800280c <__cvt+0x44>
 800280a:	2103      	movs	r1, #3
 800280c:	ab03      	add	r3, sp, #12
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	ab02      	add	r3, sp, #8
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	ec45 4b10 	vmov	d0, r4, r5
 8002818:	4653      	mov	r3, sl
 800281a:	4632      	mov	r2, r6
 800281c:	f000 fd90 	bl	8003340 <_dtoa_r>
 8002820:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002824:	4607      	mov	r7, r0
 8002826:	d102      	bne.n	800282e <__cvt+0x66>
 8002828:	f019 0f01 	tst.w	r9, #1
 800282c:	d022      	beq.n	8002874 <__cvt+0xac>
 800282e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002832:	eb07 0906 	add.w	r9, r7, r6
 8002836:	d110      	bne.n	800285a <__cvt+0x92>
 8002838:	783b      	ldrb	r3, [r7, #0]
 800283a:	2b30      	cmp	r3, #48	; 0x30
 800283c:	d10a      	bne.n	8002854 <__cvt+0x8c>
 800283e:	2200      	movs	r2, #0
 8002840:	2300      	movs	r3, #0
 8002842:	4620      	mov	r0, r4
 8002844:	4629      	mov	r1, r5
 8002846:	f7fe f93f 	bl	8000ac8 <__aeabi_dcmpeq>
 800284a:	b918      	cbnz	r0, 8002854 <__cvt+0x8c>
 800284c:	f1c6 0601 	rsb	r6, r6, #1
 8002850:	f8ca 6000 	str.w	r6, [sl]
 8002854:	f8da 3000 	ldr.w	r3, [sl]
 8002858:	4499      	add	r9, r3
 800285a:	2200      	movs	r2, #0
 800285c:	2300      	movs	r3, #0
 800285e:	4620      	mov	r0, r4
 8002860:	4629      	mov	r1, r5
 8002862:	f7fe f931 	bl	8000ac8 <__aeabi_dcmpeq>
 8002866:	b108      	cbz	r0, 800286c <__cvt+0xa4>
 8002868:	f8cd 900c 	str.w	r9, [sp, #12]
 800286c:	2230      	movs	r2, #48	; 0x30
 800286e:	9b03      	ldr	r3, [sp, #12]
 8002870:	454b      	cmp	r3, r9
 8002872:	d307      	bcc.n	8002884 <__cvt+0xbc>
 8002874:	9b03      	ldr	r3, [sp, #12]
 8002876:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002878:	1bdb      	subs	r3, r3, r7
 800287a:	4638      	mov	r0, r7
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	b004      	add	sp, #16
 8002880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002884:	1c59      	adds	r1, r3, #1
 8002886:	9103      	str	r1, [sp, #12]
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	e7f0      	b.n	800286e <__cvt+0xa6>

0800288c <__exponent>:
 800288c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800288e:	4603      	mov	r3, r0
 8002890:	2900      	cmp	r1, #0
 8002892:	bfb8      	it	lt
 8002894:	4249      	neglt	r1, r1
 8002896:	f803 2b02 	strb.w	r2, [r3], #2
 800289a:	bfb4      	ite	lt
 800289c:	222d      	movlt	r2, #45	; 0x2d
 800289e:	222b      	movge	r2, #43	; 0x2b
 80028a0:	2909      	cmp	r1, #9
 80028a2:	7042      	strb	r2, [r0, #1]
 80028a4:	dd2a      	ble.n	80028fc <__exponent+0x70>
 80028a6:	f10d 0407 	add.w	r4, sp, #7
 80028aa:	46a4      	mov	ip, r4
 80028ac:	270a      	movs	r7, #10
 80028ae:	46a6      	mov	lr, r4
 80028b0:	460a      	mov	r2, r1
 80028b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80028b6:	fb07 1516 	mls	r5, r7, r6, r1
 80028ba:	3530      	adds	r5, #48	; 0x30
 80028bc:	2a63      	cmp	r2, #99	; 0x63
 80028be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80028c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80028c6:	4631      	mov	r1, r6
 80028c8:	dcf1      	bgt.n	80028ae <__exponent+0x22>
 80028ca:	3130      	adds	r1, #48	; 0x30
 80028cc:	f1ae 0502 	sub.w	r5, lr, #2
 80028d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80028d4:	1c44      	adds	r4, r0, #1
 80028d6:	4629      	mov	r1, r5
 80028d8:	4561      	cmp	r1, ip
 80028da:	d30a      	bcc.n	80028f2 <__exponent+0x66>
 80028dc:	f10d 0209 	add.w	r2, sp, #9
 80028e0:	eba2 020e 	sub.w	r2, r2, lr
 80028e4:	4565      	cmp	r5, ip
 80028e6:	bf88      	it	hi
 80028e8:	2200      	movhi	r2, #0
 80028ea:	4413      	add	r3, r2
 80028ec:	1a18      	subs	r0, r3, r0
 80028ee:	b003      	add	sp, #12
 80028f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80028fa:	e7ed      	b.n	80028d8 <__exponent+0x4c>
 80028fc:	2330      	movs	r3, #48	; 0x30
 80028fe:	3130      	adds	r1, #48	; 0x30
 8002900:	7083      	strb	r3, [r0, #2]
 8002902:	70c1      	strb	r1, [r0, #3]
 8002904:	1d03      	adds	r3, r0, #4
 8002906:	e7f1      	b.n	80028ec <__exponent+0x60>

08002908 <_printf_float>:
 8002908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800290c:	ed2d 8b02 	vpush	{d8}
 8002910:	b08d      	sub	sp, #52	; 0x34
 8002912:	460c      	mov	r4, r1
 8002914:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002918:	4616      	mov	r6, r2
 800291a:	461f      	mov	r7, r3
 800291c:	4605      	mov	r5, r0
 800291e:	f001 fcb5 	bl	800428c <_localeconv_r>
 8002922:	f8d0 a000 	ldr.w	sl, [r0]
 8002926:	4650      	mov	r0, sl
 8002928:	f7fd fc52 	bl	80001d0 <strlen>
 800292c:	2300      	movs	r3, #0
 800292e:	930a      	str	r3, [sp, #40]	; 0x28
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	9305      	str	r3, [sp, #20]
 8002934:	f8d8 3000 	ldr.w	r3, [r8]
 8002938:	f894 b018 	ldrb.w	fp, [r4, #24]
 800293c:	3307      	adds	r3, #7
 800293e:	f023 0307 	bic.w	r3, r3, #7
 8002942:	f103 0208 	add.w	r2, r3, #8
 8002946:	f8c8 2000 	str.w	r2, [r8]
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002952:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002956:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800295a:	9307      	str	r3, [sp, #28]
 800295c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002960:	ee08 0a10 	vmov	s16, r0
 8002964:	4b9f      	ldr	r3, [pc, #636]	; (8002be4 <_printf_float+0x2dc>)
 8002966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800296a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800296e:	f7fe f8dd 	bl	8000b2c <__aeabi_dcmpun>
 8002972:	bb88      	cbnz	r0, 80029d8 <_printf_float+0xd0>
 8002974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002978:	4b9a      	ldr	r3, [pc, #616]	; (8002be4 <_printf_float+0x2dc>)
 800297a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800297e:	f7fe f8b7 	bl	8000af0 <__aeabi_dcmple>
 8002982:	bb48      	cbnz	r0, 80029d8 <_printf_float+0xd0>
 8002984:	2200      	movs	r2, #0
 8002986:	2300      	movs	r3, #0
 8002988:	4640      	mov	r0, r8
 800298a:	4649      	mov	r1, r9
 800298c:	f7fe f8a6 	bl	8000adc <__aeabi_dcmplt>
 8002990:	b110      	cbz	r0, 8002998 <_printf_float+0x90>
 8002992:	232d      	movs	r3, #45	; 0x2d
 8002994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002998:	4b93      	ldr	r3, [pc, #588]	; (8002be8 <_printf_float+0x2e0>)
 800299a:	4894      	ldr	r0, [pc, #592]	; (8002bec <_printf_float+0x2e4>)
 800299c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80029a0:	bf94      	ite	ls
 80029a2:	4698      	movls	r8, r3
 80029a4:	4680      	movhi	r8, r0
 80029a6:	2303      	movs	r3, #3
 80029a8:	6123      	str	r3, [r4, #16]
 80029aa:	9b05      	ldr	r3, [sp, #20]
 80029ac:	f023 0204 	bic.w	r2, r3, #4
 80029b0:	6022      	str	r2, [r4, #0]
 80029b2:	f04f 0900 	mov.w	r9, #0
 80029b6:	9700      	str	r7, [sp, #0]
 80029b8:	4633      	mov	r3, r6
 80029ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80029bc:	4621      	mov	r1, r4
 80029be:	4628      	mov	r0, r5
 80029c0:	f000 f9d8 	bl	8002d74 <_printf_common>
 80029c4:	3001      	adds	r0, #1
 80029c6:	f040 8090 	bne.w	8002aea <_printf_float+0x1e2>
 80029ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029ce:	b00d      	add	sp, #52	; 0x34
 80029d0:	ecbd 8b02 	vpop	{d8}
 80029d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	4640      	mov	r0, r8
 80029de:	4649      	mov	r1, r9
 80029e0:	f7fe f8a4 	bl	8000b2c <__aeabi_dcmpun>
 80029e4:	b140      	cbz	r0, 80029f8 <_printf_float+0xf0>
 80029e6:	464b      	mov	r3, r9
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bfbc      	itt	lt
 80029ec:	232d      	movlt	r3, #45	; 0x2d
 80029ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80029f2:	487f      	ldr	r0, [pc, #508]	; (8002bf0 <_printf_float+0x2e8>)
 80029f4:	4b7f      	ldr	r3, [pc, #508]	; (8002bf4 <_printf_float+0x2ec>)
 80029f6:	e7d1      	b.n	800299c <_printf_float+0x94>
 80029f8:	6863      	ldr	r3, [r4, #4]
 80029fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80029fe:	9206      	str	r2, [sp, #24]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	d13f      	bne.n	8002a84 <_printf_float+0x17c>
 8002a04:	2306      	movs	r3, #6
 8002a06:	6063      	str	r3, [r4, #4]
 8002a08:	9b05      	ldr	r3, [sp, #20]
 8002a0a:	6861      	ldr	r1, [r4, #4]
 8002a0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a10:	2300      	movs	r3, #0
 8002a12:	9303      	str	r3, [sp, #12]
 8002a14:	ab0a      	add	r3, sp, #40	; 0x28
 8002a16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002a1a:	ab09      	add	r3, sp, #36	; 0x24
 8002a1c:	ec49 8b10 	vmov	d0, r8, r9
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	6022      	str	r2, [r4, #0]
 8002a24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002a28:	4628      	mov	r0, r5
 8002a2a:	f7ff fecd 	bl	80027c8 <__cvt>
 8002a2e:	9b06      	ldr	r3, [sp, #24]
 8002a30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a32:	2b47      	cmp	r3, #71	; 0x47
 8002a34:	4680      	mov	r8, r0
 8002a36:	d108      	bne.n	8002a4a <_printf_float+0x142>
 8002a38:	1cc8      	adds	r0, r1, #3
 8002a3a:	db02      	blt.n	8002a42 <_printf_float+0x13a>
 8002a3c:	6863      	ldr	r3, [r4, #4]
 8002a3e:	4299      	cmp	r1, r3
 8002a40:	dd41      	ble.n	8002ac6 <_printf_float+0x1be>
 8002a42:	f1ab 0b02 	sub.w	fp, fp, #2
 8002a46:	fa5f fb8b 	uxtb.w	fp, fp
 8002a4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002a4e:	d820      	bhi.n	8002a92 <_printf_float+0x18a>
 8002a50:	3901      	subs	r1, #1
 8002a52:	465a      	mov	r2, fp
 8002a54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002a58:	9109      	str	r1, [sp, #36]	; 0x24
 8002a5a:	f7ff ff17 	bl	800288c <__exponent>
 8002a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a60:	1813      	adds	r3, r2, r0
 8002a62:	2a01      	cmp	r2, #1
 8002a64:	4681      	mov	r9, r0
 8002a66:	6123      	str	r3, [r4, #16]
 8002a68:	dc02      	bgt.n	8002a70 <_printf_float+0x168>
 8002a6a:	6822      	ldr	r2, [r4, #0]
 8002a6c:	07d2      	lsls	r2, r2, #31
 8002a6e:	d501      	bpl.n	8002a74 <_printf_float+0x16c>
 8002a70:	3301      	adds	r3, #1
 8002a72:	6123      	str	r3, [r4, #16]
 8002a74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d09c      	beq.n	80029b6 <_printf_float+0xae>
 8002a7c:	232d      	movs	r3, #45	; 0x2d
 8002a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a82:	e798      	b.n	80029b6 <_printf_float+0xae>
 8002a84:	9a06      	ldr	r2, [sp, #24]
 8002a86:	2a47      	cmp	r2, #71	; 0x47
 8002a88:	d1be      	bne.n	8002a08 <_printf_float+0x100>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1bc      	bne.n	8002a08 <_printf_float+0x100>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e7b9      	b.n	8002a06 <_printf_float+0xfe>
 8002a92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002a96:	d118      	bne.n	8002aca <_printf_float+0x1c2>
 8002a98:	2900      	cmp	r1, #0
 8002a9a:	6863      	ldr	r3, [r4, #4]
 8002a9c:	dd0b      	ble.n	8002ab6 <_printf_float+0x1ae>
 8002a9e:	6121      	str	r1, [r4, #16]
 8002aa0:	b913      	cbnz	r3, 8002aa8 <_printf_float+0x1a0>
 8002aa2:	6822      	ldr	r2, [r4, #0]
 8002aa4:	07d0      	lsls	r0, r2, #31
 8002aa6:	d502      	bpl.n	8002aae <_printf_float+0x1a6>
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	440b      	add	r3, r1
 8002aac:	6123      	str	r3, [r4, #16]
 8002aae:	65a1      	str	r1, [r4, #88]	; 0x58
 8002ab0:	f04f 0900 	mov.w	r9, #0
 8002ab4:	e7de      	b.n	8002a74 <_printf_float+0x16c>
 8002ab6:	b913      	cbnz	r3, 8002abe <_printf_float+0x1b6>
 8002ab8:	6822      	ldr	r2, [r4, #0]
 8002aba:	07d2      	lsls	r2, r2, #31
 8002abc:	d501      	bpl.n	8002ac2 <_printf_float+0x1ba>
 8002abe:	3302      	adds	r3, #2
 8002ac0:	e7f4      	b.n	8002aac <_printf_float+0x1a4>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e7f2      	b.n	8002aac <_printf_float+0x1a4>
 8002ac6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002acc:	4299      	cmp	r1, r3
 8002ace:	db05      	blt.n	8002adc <_printf_float+0x1d4>
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	6121      	str	r1, [r4, #16]
 8002ad4:	07d8      	lsls	r0, r3, #31
 8002ad6:	d5ea      	bpl.n	8002aae <_printf_float+0x1a6>
 8002ad8:	1c4b      	adds	r3, r1, #1
 8002ada:	e7e7      	b.n	8002aac <_printf_float+0x1a4>
 8002adc:	2900      	cmp	r1, #0
 8002ade:	bfd4      	ite	le
 8002ae0:	f1c1 0202 	rsble	r2, r1, #2
 8002ae4:	2201      	movgt	r2, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	e7e0      	b.n	8002aac <_printf_float+0x1a4>
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	055a      	lsls	r2, r3, #21
 8002aee:	d407      	bmi.n	8002b00 <_printf_float+0x1f8>
 8002af0:	6923      	ldr	r3, [r4, #16]
 8002af2:	4642      	mov	r2, r8
 8002af4:	4631      	mov	r1, r6
 8002af6:	4628      	mov	r0, r5
 8002af8:	47b8      	blx	r7
 8002afa:	3001      	adds	r0, #1
 8002afc:	d12c      	bne.n	8002b58 <_printf_float+0x250>
 8002afe:	e764      	b.n	80029ca <_printf_float+0xc2>
 8002b00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002b04:	f240 80e0 	bls.w	8002cc8 <_printf_float+0x3c0>
 8002b08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f7fd ffda 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d034      	beq.n	8002b82 <_printf_float+0x27a>
 8002b18:	4a37      	ldr	r2, [pc, #220]	; (8002bf8 <_printf_float+0x2f0>)
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	4631      	mov	r1, r6
 8002b1e:	4628      	mov	r0, r5
 8002b20:	47b8      	blx	r7
 8002b22:	3001      	adds	r0, #1
 8002b24:	f43f af51 	beq.w	80029ca <_printf_float+0xc2>
 8002b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	db02      	blt.n	8002b36 <_printf_float+0x22e>
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	07d8      	lsls	r0, r3, #31
 8002b34:	d510      	bpl.n	8002b58 <_printf_float+0x250>
 8002b36:	ee18 3a10 	vmov	r3, s16
 8002b3a:	4652      	mov	r2, sl
 8002b3c:	4631      	mov	r1, r6
 8002b3e:	4628      	mov	r0, r5
 8002b40:	47b8      	blx	r7
 8002b42:	3001      	adds	r0, #1
 8002b44:	f43f af41 	beq.w	80029ca <_printf_float+0xc2>
 8002b48:	f04f 0800 	mov.w	r8, #0
 8002b4c:	f104 091a 	add.w	r9, r4, #26
 8002b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	4543      	cmp	r3, r8
 8002b56:	dc09      	bgt.n	8002b6c <_printf_float+0x264>
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	079b      	lsls	r3, r3, #30
 8002b5c:	f100 8105 	bmi.w	8002d6a <_printf_float+0x462>
 8002b60:	68e0      	ldr	r0, [r4, #12]
 8002b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b64:	4298      	cmp	r0, r3
 8002b66:	bfb8      	it	lt
 8002b68:	4618      	movlt	r0, r3
 8002b6a:	e730      	b.n	80029ce <_printf_float+0xc6>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	464a      	mov	r2, r9
 8002b70:	4631      	mov	r1, r6
 8002b72:	4628      	mov	r0, r5
 8002b74:	47b8      	blx	r7
 8002b76:	3001      	adds	r0, #1
 8002b78:	f43f af27 	beq.w	80029ca <_printf_float+0xc2>
 8002b7c:	f108 0801 	add.w	r8, r8, #1
 8002b80:	e7e6      	b.n	8002b50 <_printf_float+0x248>
 8002b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	dc39      	bgt.n	8002bfc <_printf_float+0x2f4>
 8002b88:	4a1b      	ldr	r2, [pc, #108]	; (8002bf8 <_printf_float+0x2f0>)
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4631      	mov	r1, r6
 8002b8e:	4628      	mov	r0, r5
 8002b90:	47b8      	blx	r7
 8002b92:	3001      	adds	r0, #1
 8002b94:	f43f af19 	beq.w	80029ca <_printf_float+0xc2>
 8002b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	d102      	bne.n	8002ba6 <_printf_float+0x29e>
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	07d9      	lsls	r1, r3, #31
 8002ba4:	d5d8      	bpl.n	8002b58 <_printf_float+0x250>
 8002ba6:	ee18 3a10 	vmov	r3, s16
 8002baa:	4652      	mov	r2, sl
 8002bac:	4631      	mov	r1, r6
 8002bae:	4628      	mov	r0, r5
 8002bb0:	47b8      	blx	r7
 8002bb2:	3001      	adds	r0, #1
 8002bb4:	f43f af09 	beq.w	80029ca <_printf_float+0xc2>
 8002bb8:	f04f 0900 	mov.w	r9, #0
 8002bbc:	f104 0a1a 	add.w	sl, r4, #26
 8002bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bc2:	425b      	negs	r3, r3
 8002bc4:	454b      	cmp	r3, r9
 8002bc6:	dc01      	bgt.n	8002bcc <_printf_float+0x2c4>
 8002bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bca:	e792      	b.n	8002af2 <_printf_float+0x1ea>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	4652      	mov	r2, sl
 8002bd0:	4631      	mov	r1, r6
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	47b8      	blx	r7
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	f43f aef7 	beq.w	80029ca <_printf_float+0xc2>
 8002bdc:	f109 0901 	add.w	r9, r9, #1
 8002be0:	e7ee      	b.n	8002bc0 <_printf_float+0x2b8>
 8002be2:	bf00      	nop
 8002be4:	7fefffff 	.word	0x7fefffff
 8002be8:	08004f91 	.word	0x08004f91
 8002bec:	08004f95 	.word	0x08004f95
 8002bf0:	08004f9d 	.word	0x08004f9d
 8002bf4:	08004f99 	.word	0x08004f99
 8002bf8:	08004fa1 	.word	0x08004fa1
 8002bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002bfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c00:	429a      	cmp	r2, r3
 8002c02:	bfa8      	it	ge
 8002c04:	461a      	movge	r2, r3
 8002c06:	2a00      	cmp	r2, #0
 8002c08:	4691      	mov	r9, r2
 8002c0a:	dc37      	bgt.n	8002c7c <_printf_float+0x374>
 8002c0c:	f04f 0b00 	mov.w	fp, #0
 8002c10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c14:	f104 021a 	add.w	r2, r4, #26
 8002c18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c1a:	9305      	str	r3, [sp, #20]
 8002c1c:	eba3 0309 	sub.w	r3, r3, r9
 8002c20:	455b      	cmp	r3, fp
 8002c22:	dc33      	bgt.n	8002c8c <_printf_float+0x384>
 8002c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	db3b      	blt.n	8002ca4 <_printf_float+0x39c>
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	07da      	lsls	r2, r3, #31
 8002c30:	d438      	bmi.n	8002ca4 <_printf_float+0x39c>
 8002c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c34:	9a05      	ldr	r2, [sp, #20]
 8002c36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c38:	1a9a      	subs	r2, r3, r2
 8002c3a:	eba3 0901 	sub.w	r9, r3, r1
 8002c3e:	4591      	cmp	r9, r2
 8002c40:	bfa8      	it	ge
 8002c42:	4691      	movge	r9, r2
 8002c44:	f1b9 0f00 	cmp.w	r9, #0
 8002c48:	dc35      	bgt.n	8002cb6 <_printf_float+0x3ae>
 8002c4a:	f04f 0800 	mov.w	r8, #0
 8002c4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c52:	f104 0a1a 	add.w	sl, r4, #26
 8002c56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	eba3 0309 	sub.w	r3, r3, r9
 8002c60:	4543      	cmp	r3, r8
 8002c62:	f77f af79 	ble.w	8002b58 <_printf_float+0x250>
 8002c66:	2301      	movs	r3, #1
 8002c68:	4652      	mov	r2, sl
 8002c6a:	4631      	mov	r1, r6
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	47b8      	blx	r7
 8002c70:	3001      	adds	r0, #1
 8002c72:	f43f aeaa 	beq.w	80029ca <_printf_float+0xc2>
 8002c76:	f108 0801 	add.w	r8, r8, #1
 8002c7a:	e7ec      	b.n	8002c56 <_printf_float+0x34e>
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	4631      	mov	r1, r6
 8002c80:	4642      	mov	r2, r8
 8002c82:	4628      	mov	r0, r5
 8002c84:	47b8      	blx	r7
 8002c86:	3001      	adds	r0, #1
 8002c88:	d1c0      	bne.n	8002c0c <_printf_float+0x304>
 8002c8a:	e69e      	b.n	80029ca <_printf_float+0xc2>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	4631      	mov	r1, r6
 8002c90:	4628      	mov	r0, r5
 8002c92:	9205      	str	r2, [sp, #20]
 8002c94:	47b8      	blx	r7
 8002c96:	3001      	adds	r0, #1
 8002c98:	f43f ae97 	beq.w	80029ca <_printf_float+0xc2>
 8002c9c:	9a05      	ldr	r2, [sp, #20]
 8002c9e:	f10b 0b01 	add.w	fp, fp, #1
 8002ca2:	e7b9      	b.n	8002c18 <_printf_float+0x310>
 8002ca4:	ee18 3a10 	vmov	r3, s16
 8002ca8:	4652      	mov	r2, sl
 8002caa:	4631      	mov	r1, r6
 8002cac:	4628      	mov	r0, r5
 8002cae:	47b8      	blx	r7
 8002cb0:	3001      	adds	r0, #1
 8002cb2:	d1be      	bne.n	8002c32 <_printf_float+0x32a>
 8002cb4:	e689      	b.n	80029ca <_printf_float+0xc2>
 8002cb6:	9a05      	ldr	r2, [sp, #20]
 8002cb8:	464b      	mov	r3, r9
 8002cba:	4442      	add	r2, r8
 8002cbc:	4631      	mov	r1, r6
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	47b8      	blx	r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	d1c1      	bne.n	8002c4a <_printf_float+0x342>
 8002cc6:	e680      	b.n	80029ca <_printf_float+0xc2>
 8002cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cca:	2a01      	cmp	r2, #1
 8002ccc:	dc01      	bgt.n	8002cd2 <_printf_float+0x3ca>
 8002cce:	07db      	lsls	r3, r3, #31
 8002cd0:	d538      	bpl.n	8002d44 <_printf_float+0x43c>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	4628      	mov	r0, r5
 8002cda:	47b8      	blx	r7
 8002cdc:	3001      	adds	r0, #1
 8002cde:	f43f ae74 	beq.w	80029ca <_printf_float+0xc2>
 8002ce2:	ee18 3a10 	vmov	r3, s16
 8002ce6:	4652      	mov	r2, sl
 8002ce8:	4631      	mov	r1, r6
 8002cea:	4628      	mov	r0, r5
 8002cec:	47b8      	blx	r7
 8002cee:	3001      	adds	r0, #1
 8002cf0:	f43f ae6b 	beq.w	80029ca <_printf_float+0xc2>
 8002cf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f7fd fee4 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d00:	b9d8      	cbnz	r0, 8002d3a <_printf_float+0x432>
 8002d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d04:	f108 0201 	add.w	r2, r8, #1
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	4631      	mov	r1, r6
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	47b8      	blx	r7
 8002d10:	3001      	adds	r0, #1
 8002d12:	d10e      	bne.n	8002d32 <_printf_float+0x42a>
 8002d14:	e659      	b.n	80029ca <_printf_float+0xc2>
 8002d16:	2301      	movs	r3, #1
 8002d18:	4652      	mov	r2, sl
 8002d1a:	4631      	mov	r1, r6
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	47b8      	blx	r7
 8002d20:	3001      	adds	r0, #1
 8002d22:	f43f ae52 	beq.w	80029ca <_printf_float+0xc2>
 8002d26:	f108 0801 	add.w	r8, r8, #1
 8002d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	4543      	cmp	r3, r8
 8002d30:	dcf1      	bgt.n	8002d16 <_printf_float+0x40e>
 8002d32:	464b      	mov	r3, r9
 8002d34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002d38:	e6dc      	b.n	8002af4 <_printf_float+0x1ec>
 8002d3a:	f04f 0800 	mov.w	r8, #0
 8002d3e:	f104 0a1a 	add.w	sl, r4, #26
 8002d42:	e7f2      	b.n	8002d2a <_printf_float+0x422>
 8002d44:	2301      	movs	r3, #1
 8002d46:	4642      	mov	r2, r8
 8002d48:	e7df      	b.n	8002d0a <_printf_float+0x402>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	464a      	mov	r2, r9
 8002d4e:	4631      	mov	r1, r6
 8002d50:	4628      	mov	r0, r5
 8002d52:	47b8      	blx	r7
 8002d54:	3001      	adds	r0, #1
 8002d56:	f43f ae38 	beq.w	80029ca <_printf_float+0xc2>
 8002d5a:	f108 0801 	add.w	r8, r8, #1
 8002d5e:	68e3      	ldr	r3, [r4, #12]
 8002d60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d62:	1a5b      	subs	r3, r3, r1
 8002d64:	4543      	cmp	r3, r8
 8002d66:	dcf0      	bgt.n	8002d4a <_printf_float+0x442>
 8002d68:	e6fa      	b.n	8002b60 <_printf_float+0x258>
 8002d6a:	f04f 0800 	mov.w	r8, #0
 8002d6e:	f104 0919 	add.w	r9, r4, #25
 8002d72:	e7f4      	b.n	8002d5e <_printf_float+0x456>

08002d74 <_printf_common>:
 8002d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d78:	4616      	mov	r6, r2
 8002d7a:	4699      	mov	r9, r3
 8002d7c:	688a      	ldr	r2, [r1, #8]
 8002d7e:	690b      	ldr	r3, [r1, #16]
 8002d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d84:	4293      	cmp	r3, r2
 8002d86:	bfb8      	it	lt
 8002d88:	4613      	movlt	r3, r2
 8002d8a:	6033      	str	r3, [r6, #0]
 8002d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d90:	4607      	mov	r7, r0
 8002d92:	460c      	mov	r4, r1
 8002d94:	b10a      	cbz	r2, 8002d9a <_printf_common+0x26>
 8002d96:	3301      	adds	r3, #1
 8002d98:	6033      	str	r3, [r6, #0]
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	0699      	lsls	r1, r3, #26
 8002d9e:	bf42      	ittt	mi
 8002da0:	6833      	ldrmi	r3, [r6, #0]
 8002da2:	3302      	addmi	r3, #2
 8002da4:	6033      	strmi	r3, [r6, #0]
 8002da6:	6825      	ldr	r5, [r4, #0]
 8002da8:	f015 0506 	ands.w	r5, r5, #6
 8002dac:	d106      	bne.n	8002dbc <_printf_common+0x48>
 8002dae:	f104 0a19 	add.w	sl, r4, #25
 8002db2:	68e3      	ldr	r3, [r4, #12]
 8002db4:	6832      	ldr	r2, [r6, #0]
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	42ab      	cmp	r3, r5
 8002dba:	dc26      	bgt.n	8002e0a <_printf_common+0x96>
 8002dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002dc0:	1e13      	subs	r3, r2, #0
 8002dc2:	6822      	ldr	r2, [r4, #0]
 8002dc4:	bf18      	it	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	0692      	lsls	r2, r2, #26
 8002dca:	d42b      	bmi.n	8002e24 <_printf_common+0xb0>
 8002dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	47c0      	blx	r8
 8002dd6:	3001      	adds	r0, #1
 8002dd8:	d01e      	beq.n	8002e18 <_printf_common+0xa4>
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	68e5      	ldr	r5, [r4, #12]
 8002dde:	6832      	ldr	r2, [r6, #0]
 8002de0:	f003 0306 	and.w	r3, r3, #6
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	bf08      	it	eq
 8002de8:	1aad      	subeq	r5, r5, r2
 8002dea:	68a3      	ldr	r3, [r4, #8]
 8002dec:	6922      	ldr	r2, [r4, #16]
 8002dee:	bf0c      	ite	eq
 8002df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002df4:	2500      	movne	r5, #0
 8002df6:	4293      	cmp	r3, r2
 8002df8:	bfc4      	itt	gt
 8002dfa:	1a9b      	subgt	r3, r3, r2
 8002dfc:	18ed      	addgt	r5, r5, r3
 8002dfe:	2600      	movs	r6, #0
 8002e00:	341a      	adds	r4, #26
 8002e02:	42b5      	cmp	r5, r6
 8002e04:	d11a      	bne.n	8002e3c <_printf_common+0xc8>
 8002e06:	2000      	movs	r0, #0
 8002e08:	e008      	b.n	8002e1c <_printf_common+0xa8>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	4652      	mov	r2, sl
 8002e0e:	4649      	mov	r1, r9
 8002e10:	4638      	mov	r0, r7
 8002e12:	47c0      	blx	r8
 8002e14:	3001      	adds	r0, #1
 8002e16:	d103      	bne.n	8002e20 <_printf_common+0xac>
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e20:	3501      	adds	r5, #1
 8002e22:	e7c6      	b.n	8002db2 <_printf_common+0x3e>
 8002e24:	18e1      	adds	r1, r4, r3
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	2030      	movs	r0, #48	; 0x30
 8002e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e2e:	4422      	add	r2, r4
 8002e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e38:	3302      	adds	r3, #2
 8002e3a:	e7c7      	b.n	8002dcc <_printf_common+0x58>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	4622      	mov	r2, r4
 8002e40:	4649      	mov	r1, r9
 8002e42:	4638      	mov	r0, r7
 8002e44:	47c0      	blx	r8
 8002e46:	3001      	adds	r0, #1
 8002e48:	d0e6      	beq.n	8002e18 <_printf_common+0xa4>
 8002e4a:	3601      	adds	r6, #1
 8002e4c:	e7d9      	b.n	8002e02 <_printf_common+0x8e>
	...

08002e50 <_printf_i>:
 8002e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e54:	7e0f      	ldrb	r7, [r1, #24]
 8002e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e58:	2f78      	cmp	r7, #120	; 0x78
 8002e5a:	4691      	mov	r9, r2
 8002e5c:	4680      	mov	r8, r0
 8002e5e:	460c      	mov	r4, r1
 8002e60:	469a      	mov	sl, r3
 8002e62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e66:	d807      	bhi.n	8002e78 <_printf_i+0x28>
 8002e68:	2f62      	cmp	r7, #98	; 0x62
 8002e6a:	d80a      	bhi.n	8002e82 <_printf_i+0x32>
 8002e6c:	2f00      	cmp	r7, #0
 8002e6e:	f000 80d8 	beq.w	8003022 <_printf_i+0x1d2>
 8002e72:	2f58      	cmp	r7, #88	; 0x58
 8002e74:	f000 80a3 	beq.w	8002fbe <_printf_i+0x16e>
 8002e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e80:	e03a      	b.n	8002ef8 <_printf_i+0xa8>
 8002e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e86:	2b15      	cmp	r3, #21
 8002e88:	d8f6      	bhi.n	8002e78 <_printf_i+0x28>
 8002e8a:	a101      	add	r1, pc, #4	; (adr r1, 8002e90 <_printf_i+0x40>)
 8002e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e90:	08002ee9 	.word	0x08002ee9
 8002e94:	08002efd 	.word	0x08002efd
 8002e98:	08002e79 	.word	0x08002e79
 8002e9c:	08002e79 	.word	0x08002e79
 8002ea0:	08002e79 	.word	0x08002e79
 8002ea4:	08002e79 	.word	0x08002e79
 8002ea8:	08002efd 	.word	0x08002efd
 8002eac:	08002e79 	.word	0x08002e79
 8002eb0:	08002e79 	.word	0x08002e79
 8002eb4:	08002e79 	.word	0x08002e79
 8002eb8:	08002e79 	.word	0x08002e79
 8002ebc:	08003009 	.word	0x08003009
 8002ec0:	08002f2d 	.word	0x08002f2d
 8002ec4:	08002feb 	.word	0x08002feb
 8002ec8:	08002e79 	.word	0x08002e79
 8002ecc:	08002e79 	.word	0x08002e79
 8002ed0:	0800302b 	.word	0x0800302b
 8002ed4:	08002e79 	.word	0x08002e79
 8002ed8:	08002f2d 	.word	0x08002f2d
 8002edc:	08002e79 	.word	0x08002e79
 8002ee0:	08002e79 	.word	0x08002e79
 8002ee4:	08002ff3 	.word	0x08002ff3
 8002ee8:	682b      	ldr	r3, [r5, #0]
 8002eea:	1d1a      	adds	r2, r3, #4
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	602a      	str	r2, [r5, #0]
 8002ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0a3      	b.n	8003044 <_printf_i+0x1f4>
 8002efc:	6820      	ldr	r0, [r4, #0]
 8002efe:	6829      	ldr	r1, [r5, #0]
 8002f00:	0606      	lsls	r6, r0, #24
 8002f02:	f101 0304 	add.w	r3, r1, #4
 8002f06:	d50a      	bpl.n	8002f1e <_printf_i+0xce>
 8002f08:	680e      	ldr	r6, [r1, #0]
 8002f0a:	602b      	str	r3, [r5, #0]
 8002f0c:	2e00      	cmp	r6, #0
 8002f0e:	da03      	bge.n	8002f18 <_printf_i+0xc8>
 8002f10:	232d      	movs	r3, #45	; 0x2d
 8002f12:	4276      	negs	r6, r6
 8002f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f18:	485e      	ldr	r0, [pc, #376]	; (8003094 <_printf_i+0x244>)
 8002f1a:	230a      	movs	r3, #10
 8002f1c:	e019      	b.n	8002f52 <_printf_i+0x102>
 8002f1e:	680e      	ldr	r6, [r1, #0]
 8002f20:	602b      	str	r3, [r5, #0]
 8002f22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f26:	bf18      	it	ne
 8002f28:	b236      	sxthne	r6, r6
 8002f2a:	e7ef      	b.n	8002f0c <_printf_i+0xbc>
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	6820      	ldr	r0, [r4, #0]
 8002f30:	1d19      	adds	r1, r3, #4
 8002f32:	6029      	str	r1, [r5, #0]
 8002f34:	0601      	lsls	r1, r0, #24
 8002f36:	d501      	bpl.n	8002f3c <_printf_i+0xec>
 8002f38:	681e      	ldr	r6, [r3, #0]
 8002f3a:	e002      	b.n	8002f42 <_printf_i+0xf2>
 8002f3c:	0646      	lsls	r6, r0, #25
 8002f3e:	d5fb      	bpl.n	8002f38 <_printf_i+0xe8>
 8002f40:	881e      	ldrh	r6, [r3, #0]
 8002f42:	4854      	ldr	r0, [pc, #336]	; (8003094 <_printf_i+0x244>)
 8002f44:	2f6f      	cmp	r7, #111	; 0x6f
 8002f46:	bf0c      	ite	eq
 8002f48:	2308      	moveq	r3, #8
 8002f4a:	230a      	movne	r3, #10
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f52:	6865      	ldr	r5, [r4, #4]
 8002f54:	60a5      	str	r5, [r4, #8]
 8002f56:	2d00      	cmp	r5, #0
 8002f58:	bfa2      	ittt	ge
 8002f5a:	6821      	ldrge	r1, [r4, #0]
 8002f5c:	f021 0104 	bicge.w	r1, r1, #4
 8002f60:	6021      	strge	r1, [r4, #0]
 8002f62:	b90e      	cbnz	r6, 8002f68 <_printf_i+0x118>
 8002f64:	2d00      	cmp	r5, #0
 8002f66:	d04d      	beq.n	8003004 <_printf_i+0x1b4>
 8002f68:	4615      	mov	r5, r2
 8002f6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f6e:	fb03 6711 	mls	r7, r3, r1, r6
 8002f72:	5dc7      	ldrb	r7, [r0, r7]
 8002f74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f78:	4637      	mov	r7, r6
 8002f7a:	42bb      	cmp	r3, r7
 8002f7c:	460e      	mov	r6, r1
 8002f7e:	d9f4      	bls.n	8002f6a <_printf_i+0x11a>
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d10b      	bne.n	8002f9c <_printf_i+0x14c>
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	07de      	lsls	r6, r3, #31
 8002f88:	d508      	bpl.n	8002f9c <_printf_i+0x14c>
 8002f8a:	6923      	ldr	r3, [r4, #16]
 8002f8c:	6861      	ldr	r1, [r4, #4]
 8002f8e:	4299      	cmp	r1, r3
 8002f90:	bfde      	ittt	le
 8002f92:	2330      	movle	r3, #48	; 0x30
 8002f94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002f9c:	1b52      	subs	r2, r2, r5
 8002f9e:	6122      	str	r2, [r4, #16]
 8002fa0:	f8cd a000 	str.w	sl, [sp]
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	aa03      	add	r2, sp, #12
 8002fa8:	4621      	mov	r1, r4
 8002faa:	4640      	mov	r0, r8
 8002fac:	f7ff fee2 	bl	8002d74 <_printf_common>
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d14c      	bne.n	800304e <_printf_i+0x1fe>
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb8:	b004      	add	sp, #16
 8002fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fbe:	4835      	ldr	r0, [pc, #212]	; (8003094 <_printf_i+0x244>)
 8002fc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002fc4:	6829      	ldr	r1, [r5, #0]
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8002fcc:	6029      	str	r1, [r5, #0]
 8002fce:	061d      	lsls	r5, r3, #24
 8002fd0:	d514      	bpl.n	8002ffc <_printf_i+0x1ac>
 8002fd2:	07df      	lsls	r7, r3, #31
 8002fd4:	bf44      	itt	mi
 8002fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8002fda:	6023      	strmi	r3, [r4, #0]
 8002fdc:	b91e      	cbnz	r6, 8002fe6 <_printf_i+0x196>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	f023 0320 	bic.w	r3, r3, #32
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	e7b0      	b.n	8002f4c <_printf_i+0xfc>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	f043 0320 	orr.w	r3, r3, #32
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	2378      	movs	r3, #120	; 0x78
 8002ff4:	4828      	ldr	r0, [pc, #160]	; (8003098 <_printf_i+0x248>)
 8002ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ffa:	e7e3      	b.n	8002fc4 <_printf_i+0x174>
 8002ffc:	0659      	lsls	r1, r3, #25
 8002ffe:	bf48      	it	mi
 8003000:	b2b6      	uxthmi	r6, r6
 8003002:	e7e6      	b.n	8002fd2 <_printf_i+0x182>
 8003004:	4615      	mov	r5, r2
 8003006:	e7bb      	b.n	8002f80 <_printf_i+0x130>
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	6826      	ldr	r6, [r4, #0]
 800300c:	6961      	ldr	r1, [r4, #20]
 800300e:	1d18      	adds	r0, r3, #4
 8003010:	6028      	str	r0, [r5, #0]
 8003012:	0635      	lsls	r5, r6, #24
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	d501      	bpl.n	800301c <_printf_i+0x1cc>
 8003018:	6019      	str	r1, [r3, #0]
 800301a:	e002      	b.n	8003022 <_printf_i+0x1d2>
 800301c:	0670      	lsls	r0, r6, #25
 800301e:	d5fb      	bpl.n	8003018 <_printf_i+0x1c8>
 8003020:	8019      	strh	r1, [r3, #0]
 8003022:	2300      	movs	r3, #0
 8003024:	6123      	str	r3, [r4, #16]
 8003026:	4615      	mov	r5, r2
 8003028:	e7ba      	b.n	8002fa0 <_printf_i+0x150>
 800302a:	682b      	ldr	r3, [r5, #0]
 800302c:	1d1a      	adds	r2, r3, #4
 800302e:	602a      	str	r2, [r5, #0]
 8003030:	681d      	ldr	r5, [r3, #0]
 8003032:	6862      	ldr	r2, [r4, #4]
 8003034:	2100      	movs	r1, #0
 8003036:	4628      	mov	r0, r5
 8003038:	f7fd f8d2 	bl	80001e0 <memchr>
 800303c:	b108      	cbz	r0, 8003042 <_printf_i+0x1f2>
 800303e:	1b40      	subs	r0, r0, r5
 8003040:	6060      	str	r0, [r4, #4]
 8003042:	6863      	ldr	r3, [r4, #4]
 8003044:	6123      	str	r3, [r4, #16]
 8003046:	2300      	movs	r3, #0
 8003048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800304c:	e7a8      	b.n	8002fa0 <_printf_i+0x150>
 800304e:	6923      	ldr	r3, [r4, #16]
 8003050:	462a      	mov	r2, r5
 8003052:	4649      	mov	r1, r9
 8003054:	4640      	mov	r0, r8
 8003056:	47d0      	blx	sl
 8003058:	3001      	adds	r0, #1
 800305a:	d0ab      	beq.n	8002fb4 <_printf_i+0x164>
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	079b      	lsls	r3, r3, #30
 8003060:	d413      	bmi.n	800308a <_printf_i+0x23a>
 8003062:	68e0      	ldr	r0, [r4, #12]
 8003064:	9b03      	ldr	r3, [sp, #12]
 8003066:	4298      	cmp	r0, r3
 8003068:	bfb8      	it	lt
 800306a:	4618      	movlt	r0, r3
 800306c:	e7a4      	b.n	8002fb8 <_printf_i+0x168>
 800306e:	2301      	movs	r3, #1
 8003070:	4632      	mov	r2, r6
 8003072:	4649      	mov	r1, r9
 8003074:	4640      	mov	r0, r8
 8003076:	47d0      	blx	sl
 8003078:	3001      	adds	r0, #1
 800307a:	d09b      	beq.n	8002fb4 <_printf_i+0x164>
 800307c:	3501      	adds	r5, #1
 800307e:	68e3      	ldr	r3, [r4, #12]
 8003080:	9903      	ldr	r1, [sp, #12]
 8003082:	1a5b      	subs	r3, r3, r1
 8003084:	42ab      	cmp	r3, r5
 8003086:	dcf2      	bgt.n	800306e <_printf_i+0x21e>
 8003088:	e7eb      	b.n	8003062 <_printf_i+0x212>
 800308a:	2500      	movs	r5, #0
 800308c:	f104 0619 	add.w	r6, r4, #25
 8003090:	e7f5      	b.n	800307e <_printf_i+0x22e>
 8003092:	bf00      	nop
 8003094:	08004fa3 	.word	0x08004fa3
 8003098:	08004fb4 	.word	0x08004fb4

0800309c <__swbuf_r>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	460e      	mov	r6, r1
 80030a0:	4614      	mov	r4, r2
 80030a2:	4605      	mov	r5, r0
 80030a4:	b118      	cbz	r0, 80030ae <__swbuf_r+0x12>
 80030a6:	6983      	ldr	r3, [r0, #24]
 80030a8:	b90b      	cbnz	r3, 80030ae <__swbuf_r+0x12>
 80030aa:	f001 f851 	bl	8004150 <__sinit>
 80030ae:	4b21      	ldr	r3, [pc, #132]	; (8003134 <__swbuf_r+0x98>)
 80030b0:	429c      	cmp	r4, r3
 80030b2:	d12b      	bne.n	800310c <__swbuf_r+0x70>
 80030b4:	686c      	ldr	r4, [r5, #4]
 80030b6:	69a3      	ldr	r3, [r4, #24]
 80030b8:	60a3      	str	r3, [r4, #8]
 80030ba:	89a3      	ldrh	r3, [r4, #12]
 80030bc:	071a      	lsls	r2, r3, #28
 80030be:	d52f      	bpl.n	8003120 <__swbuf_r+0x84>
 80030c0:	6923      	ldr	r3, [r4, #16]
 80030c2:	b36b      	cbz	r3, 8003120 <__swbuf_r+0x84>
 80030c4:	6923      	ldr	r3, [r4, #16]
 80030c6:	6820      	ldr	r0, [r4, #0]
 80030c8:	1ac0      	subs	r0, r0, r3
 80030ca:	6963      	ldr	r3, [r4, #20]
 80030cc:	b2f6      	uxtb	r6, r6
 80030ce:	4283      	cmp	r3, r0
 80030d0:	4637      	mov	r7, r6
 80030d2:	dc04      	bgt.n	80030de <__swbuf_r+0x42>
 80030d4:	4621      	mov	r1, r4
 80030d6:	4628      	mov	r0, r5
 80030d8:	f000 ffa6 	bl	8004028 <_fflush_r>
 80030dc:	bb30      	cbnz	r0, 800312c <__swbuf_r+0x90>
 80030de:	68a3      	ldr	r3, [r4, #8]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	60a3      	str	r3, [r4, #8]
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	6022      	str	r2, [r4, #0]
 80030ea:	701e      	strb	r6, [r3, #0]
 80030ec:	6963      	ldr	r3, [r4, #20]
 80030ee:	3001      	adds	r0, #1
 80030f0:	4283      	cmp	r3, r0
 80030f2:	d004      	beq.n	80030fe <__swbuf_r+0x62>
 80030f4:	89a3      	ldrh	r3, [r4, #12]
 80030f6:	07db      	lsls	r3, r3, #31
 80030f8:	d506      	bpl.n	8003108 <__swbuf_r+0x6c>
 80030fa:	2e0a      	cmp	r6, #10
 80030fc:	d104      	bne.n	8003108 <__swbuf_r+0x6c>
 80030fe:	4621      	mov	r1, r4
 8003100:	4628      	mov	r0, r5
 8003102:	f000 ff91 	bl	8004028 <_fflush_r>
 8003106:	b988      	cbnz	r0, 800312c <__swbuf_r+0x90>
 8003108:	4638      	mov	r0, r7
 800310a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <__swbuf_r+0x9c>)
 800310e:	429c      	cmp	r4, r3
 8003110:	d101      	bne.n	8003116 <__swbuf_r+0x7a>
 8003112:	68ac      	ldr	r4, [r5, #8]
 8003114:	e7cf      	b.n	80030b6 <__swbuf_r+0x1a>
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <__swbuf_r+0xa0>)
 8003118:	429c      	cmp	r4, r3
 800311a:	bf08      	it	eq
 800311c:	68ec      	ldreq	r4, [r5, #12]
 800311e:	e7ca      	b.n	80030b6 <__swbuf_r+0x1a>
 8003120:	4621      	mov	r1, r4
 8003122:	4628      	mov	r0, r5
 8003124:	f000 f80c 	bl	8003140 <__swsetup_r>
 8003128:	2800      	cmp	r0, #0
 800312a:	d0cb      	beq.n	80030c4 <__swbuf_r+0x28>
 800312c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003130:	e7ea      	b.n	8003108 <__swbuf_r+0x6c>
 8003132:	bf00      	nop
 8003134:	08005078 	.word	0x08005078
 8003138:	08005098 	.word	0x08005098
 800313c:	08005058 	.word	0x08005058

08003140 <__swsetup_r>:
 8003140:	4b32      	ldr	r3, [pc, #200]	; (800320c <__swsetup_r+0xcc>)
 8003142:	b570      	push	{r4, r5, r6, lr}
 8003144:	681d      	ldr	r5, [r3, #0]
 8003146:	4606      	mov	r6, r0
 8003148:	460c      	mov	r4, r1
 800314a:	b125      	cbz	r5, 8003156 <__swsetup_r+0x16>
 800314c:	69ab      	ldr	r3, [r5, #24]
 800314e:	b913      	cbnz	r3, 8003156 <__swsetup_r+0x16>
 8003150:	4628      	mov	r0, r5
 8003152:	f000 fffd 	bl	8004150 <__sinit>
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <__swsetup_r+0xd0>)
 8003158:	429c      	cmp	r4, r3
 800315a:	d10f      	bne.n	800317c <__swsetup_r+0x3c>
 800315c:	686c      	ldr	r4, [r5, #4]
 800315e:	89a3      	ldrh	r3, [r4, #12]
 8003160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003164:	0719      	lsls	r1, r3, #28
 8003166:	d42c      	bmi.n	80031c2 <__swsetup_r+0x82>
 8003168:	06dd      	lsls	r5, r3, #27
 800316a:	d411      	bmi.n	8003190 <__swsetup_r+0x50>
 800316c:	2309      	movs	r3, #9
 800316e:	6033      	str	r3, [r6, #0]
 8003170:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003174:	81a3      	strh	r3, [r4, #12]
 8003176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800317a:	e03e      	b.n	80031fa <__swsetup_r+0xba>
 800317c:	4b25      	ldr	r3, [pc, #148]	; (8003214 <__swsetup_r+0xd4>)
 800317e:	429c      	cmp	r4, r3
 8003180:	d101      	bne.n	8003186 <__swsetup_r+0x46>
 8003182:	68ac      	ldr	r4, [r5, #8]
 8003184:	e7eb      	b.n	800315e <__swsetup_r+0x1e>
 8003186:	4b24      	ldr	r3, [pc, #144]	; (8003218 <__swsetup_r+0xd8>)
 8003188:	429c      	cmp	r4, r3
 800318a:	bf08      	it	eq
 800318c:	68ec      	ldreq	r4, [r5, #12]
 800318e:	e7e6      	b.n	800315e <__swsetup_r+0x1e>
 8003190:	0758      	lsls	r0, r3, #29
 8003192:	d512      	bpl.n	80031ba <__swsetup_r+0x7a>
 8003194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003196:	b141      	cbz	r1, 80031aa <__swsetup_r+0x6a>
 8003198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800319c:	4299      	cmp	r1, r3
 800319e:	d002      	beq.n	80031a6 <__swsetup_r+0x66>
 80031a0:	4630      	mov	r0, r6
 80031a2:	f001 fc8f 	bl	8004ac4 <_free_r>
 80031a6:	2300      	movs	r3, #0
 80031a8:	6363      	str	r3, [r4, #52]	; 0x34
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031b0:	81a3      	strh	r3, [r4, #12]
 80031b2:	2300      	movs	r3, #0
 80031b4:	6063      	str	r3, [r4, #4]
 80031b6:	6923      	ldr	r3, [r4, #16]
 80031b8:	6023      	str	r3, [r4, #0]
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	f043 0308 	orr.w	r3, r3, #8
 80031c0:	81a3      	strh	r3, [r4, #12]
 80031c2:	6923      	ldr	r3, [r4, #16]
 80031c4:	b94b      	cbnz	r3, 80031da <__swsetup_r+0x9a>
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d0:	d003      	beq.n	80031da <__swsetup_r+0x9a>
 80031d2:	4621      	mov	r1, r4
 80031d4:	4630      	mov	r0, r6
 80031d6:	f001 f885 	bl	80042e4 <__smakebuf_r>
 80031da:	89a0      	ldrh	r0, [r4, #12]
 80031dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031e0:	f010 0301 	ands.w	r3, r0, #1
 80031e4:	d00a      	beq.n	80031fc <__swsetup_r+0xbc>
 80031e6:	2300      	movs	r3, #0
 80031e8:	60a3      	str	r3, [r4, #8]
 80031ea:	6963      	ldr	r3, [r4, #20]
 80031ec:	425b      	negs	r3, r3
 80031ee:	61a3      	str	r3, [r4, #24]
 80031f0:	6923      	ldr	r3, [r4, #16]
 80031f2:	b943      	cbnz	r3, 8003206 <__swsetup_r+0xc6>
 80031f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031f8:	d1ba      	bne.n	8003170 <__swsetup_r+0x30>
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
 80031fc:	0781      	lsls	r1, r0, #30
 80031fe:	bf58      	it	pl
 8003200:	6963      	ldrpl	r3, [r4, #20]
 8003202:	60a3      	str	r3, [r4, #8]
 8003204:	e7f4      	b.n	80031f0 <__swsetup_r+0xb0>
 8003206:	2000      	movs	r0, #0
 8003208:	e7f7      	b.n	80031fa <__swsetup_r+0xba>
 800320a:	bf00      	nop
 800320c:	2000000c 	.word	0x2000000c
 8003210:	08005078 	.word	0x08005078
 8003214:	08005098 	.word	0x08005098
 8003218:	08005058 	.word	0x08005058

0800321c <abort>:
 800321c:	b508      	push	{r3, lr}
 800321e:	2006      	movs	r0, #6
 8003220:	f001 fd68 	bl	8004cf4 <raise>
 8003224:	2001      	movs	r0, #1
 8003226:	f7fe f919 	bl	800145c <_exit>

0800322a <quorem>:
 800322a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322e:	6903      	ldr	r3, [r0, #16]
 8003230:	690c      	ldr	r4, [r1, #16]
 8003232:	42a3      	cmp	r3, r4
 8003234:	4607      	mov	r7, r0
 8003236:	f2c0 8081 	blt.w	800333c <quorem+0x112>
 800323a:	3c01      	subs	r4, #1
 800323c:	f101 0814 	add.w	r8, r1, #20
 8003240:	f100 0514 	add.w	r5, r0, #20
 8003244:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003248:	9301      	str	r3, [sp, #4]
 800324a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800324e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003252:	3301      	adds	r3, #1
 8003254:	429a      	cmp	r2, r3
 8003256:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800325a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800325e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003262:	d331      	bcc.n	80032c8 <quorem+0x9e>
 8003264:	f04f 0e00 	mov.w	lr, #0
 8003268:	4640      	mov	r0, r8
 800326a:	46ac      	mov	ip, r5
 800326c:	46f2      	mov	sl, lr
 800326e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003272:	b293      	uxth	r3, r2
 8003274:	fb06 e303 	mla	r3, r6, r3, lr
 8003278:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800327c:	b29b      	uxth	r3, r3
 800327e:	ebaa 0303 	sub.w	r3, sl, r3
 8003282:	f8dc a000 	ldr.w	sl, [ip]
 8003286:	0c12      	lsrs	r2, r2, #16
 8003288:	fa13 f38a 	uxtah	r3, r3, sl
 800328c:	fb06 e202 	mla	r2, r6, r2, lr
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	9b00      	ldr	r3, [sp, #0]
 8003294:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003298:	b292      	uxth	r2, r2
 800329a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800329e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80032a2:	f8bd 3000 	ldrh.w	r3, [sp]
 80032a6:	4581      	cmp	r9, r0
 80032a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032ac:	f84c 3b04 	str.w	r3, [ip], #4
 80032b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80032b4:	d2db      	bcs.n	800326e <quorem+0x44>
 80032b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80032ba:	b92b      	cbnz	r3, 80032c8 <quorem+0x9e>
 80032bc:	9b01      	ldr	r3, [sp, #4]
 80032be:	3b04      	subs	r3, #4
 80032c0:	429d      	cmp	r5, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	d32e      	bcc.n	8003324 <quorem+0xfa>
 80032c6:	613c      	str	r4, [r7, #16]
 80032c8:	4638      	mov	r0, r7
 80032ca:	f001 fae3 	bl	8004894 <__mcmp>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	db24      	blt.n	800331c <quorem+0xf2>
 80032d2:	3601      	adds	r6, #1
 80032d4:	4628      	mov	r0, r5
 80032d6:	f04f 0c00 	mov.w	ip, #0
 80032da:	f858 2b04 	ldr.w	r2, [r8], #4
 80032de:	f8d0 e000 	ldr.w	lr, [r0]
 80032e2:	b293      	uxth	r3, r2
 80032e4:	ebac 0303 	sub.w	r3, ip, r3
 80032e8:	0c12      	lsrs	r2, r2, #16
 80032ea:	fa13 f38e 	uxtah	r3, r3, lr
 80032ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80032f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032fc:	45c1      	cmp	r9, r8
 80032fe:	f840 3b04 	str.w	r3, [r0], #4
 8003302:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003306:	d2e8      	bcs.n	80032da <quorem+0xb0>
 8003308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800330c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003310:	b922      	cbnz	r2, 800331c <quorem+0xf2>
 8003312:	3b04      	subs	r3, #4
 8003314:	429d      	cmp	r5, r3
 8003316:	461a      	mov	r2, r3
 8003318:	d30a      	bcc.n	8003330 <quorem+0x106>
 800331a:	613c      	str	r4, [r7, #16]
 800331c:	4630      	mov	r0, r6
 800331e:	b003      	add	sp, #12
 8003320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	3b04      	subs	r3, #4
 8003328:	2a00      	cmp	r2, #0
 800332a:	d1cc      	bne.n	80032c6 <quorem+0x9c>
 800332c:	3c01      	subs	r4, #1
 800332e:	e7c7      	b.n	80032c0 <quorem+0x96>
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	3b04      	subs	r3, #4
 8003334:	2a00      	cmp	r2, #0
 8003336:	d1f0      	bne.n	800331a <quorem+0xf0>
 8003338:	3c01      	subs	r4, #1
 800333a:	e7eb      	b.n	8003314 <quorem+0xea>
 800333c:	2000      	movs	r0, #0
 800333e:	e7ee      	b.n	800331e <quorem+0xf4>

08003340 <_dtoa_r>:
 8003340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003344:	ed2d 8b04 	vpush	{d8-d9}
 8003348:	ec57 6b10 	vmov	r6, r7, d0
 800334c:	b093      	sub	sp, #76	; 0x4c
 800334e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003350:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003354:	9106      	str	r1, [sp, #24]
 8003356:	ee10 aa10 	vmov	sl, s0
 800335a:	4604      	mov	r4, r0
 800335c:	9209      	str	r2, [sp, #36]	; 0x24
 800335e:	930c      	str	r3, [sp, #48]	; 0x30
 8003360:	46bb      	mov	fp, r7
 8003362:	b975      	cbnz	r5, 8003382 <_dtoa_r+0x42>
 8003364:	2010      	movs	r0, #16
 8003366:	f000 fffd 	bl	8004364 <malloc>
 800336a:	4602      	mov	r2, r0
 800336c:	6260      	str	r0, [r4, #36]	; 0x24
 800336e:	b920      	cbnz	r0, 800337a <_dtoa_r+0x3a>
 8003370:	4ba7      	ldr	r3, [pc, #668]	; (8003610 <_dtoa_r+0x2d0>)
 8003372:	21ea      	movs	r1, #234	; 0xea
 8003374:	48a7      	ldr	r0, [pc, #668]	; (8003614 <_dtoa_r+0x2d4>)
 8003376:	f7ff f86b 	bl	8002450 <__assert_func>
 800337a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800337e:	6005      	str	r5, [r0, #0]
 8003380:	60c5      	str	r5, [r0, #12]
 8003382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003384:	6819      	ldr	r1, [r3, #0]
 8003386:	b151      	cbz	r1, 800339e <_dtoa_r+0x5e>
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	604a      	str	r2, [r1, #4]
 800338c:	2301      	movs	r3, #1
 800338e:	4093      	lsls	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
 8003392:	4620      	mov	r0, r4
 8003394:	f001 f83c 	bl	8004410 <_Bfree>
 8003398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	1e3b      	subs	r3, r7, #0
 80033a0:	bfaa      	itet	ge
 80033a2:	2300      	movge	r3, #0
 80033a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80033a8:	f8c8 3000 	strge.w	r3, [r8]
 80033ac:	4b9a      	ldr	r3, [pc, #616]	; (8003618 <_dtoa_r+0x2d8>)
 80033ae:	bfbc      	itt	lt
 80033b0:	2201      	movlt	r2, #1
 80033b2:	f8c8 2000 	strlt.w	r2, [r8]
 80033b6:	ea33 030b 	bics.w	r3, r3, fp
 80033ba:	d11b      	bne.n	80033f4 <_dtoa_r+0xb4>
 80033bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033be:	f242 730f 	movw	r3, #9999	; 0x270f
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80033c8:	4333      	orrs	r3, r6
 80033ca:	f000 8592 	beq.w	8003ef2 <_dtoa_r+0xbb2>
 80033ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033d0:	b963      	cbnz	r3, 80033ec <_dtoa_r+0xac>
 80033d2:	4b92      	ldr	r3, [pc, #584]	; (800361c <_dtoa_r+0x2dc>)
 80033d4:	e022      	b.n	800341c <_dtoa_r+0xdc>
 80033d6:	4b92      	ldr	r3, [pc, #584]	; (8003620 <_dtoa_r+0x2e0>)
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	3308      	adds	r3, #8
 80033dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	9801      	ldr	r0, [sp, #4]
 80033e2:	b013      	add	sp, #76	; 0x4c
 80033e4:	ecbd 8b04 	vpop	{d8-d9}
 80033e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ec:	4b8b      	ldr	r3, [pc, #556]	; (800361c <_dtoa_r+0x2dc>)
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	3303      	adds	r3, #3
 80033f2:	e7f3      	b.n	80033dc <_dtoa_r+0x9c>
 80033f4:	2200      	movs	r2, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	4650      	mov	r0, sl
 80033fa:	4659      	mov	r1, fp
 80033fc:	f7fd fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8003400:	ec4b ab19 	vmov	d9, sl, fp
 8003404:	4680      	mov	r8, r0
 8003406:	b158      	cbz	r0, 8003420 <_dtoa_r+0xe0>
 8003408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800340a:	2301      	movs	r3, #1
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 856b 	beq.w	8003eec <_dtoa_r+0xbac>
 8003416:	4883      	ldr	r0, [pc, #524]	; (8003624 <_dtoa_r+0x2e4>)
 8003418:	6018      	str	r0, [r3, #0]
 800341a:	1e43      	subs	r3, r0, #1
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	e7df      	b.n	80033e0 <_dtoa_r+0xa0>
 8003420:	ec4b ab10 	vmov	d0, sl, fp
 8003424:	aa10      	add	r2, sp, #64	; 0x40
 8003426:	a911      	add	r1, sp, #68	; 0x44
 8003428:	4620      	mov	r0, r4
 800342a:	f001 fad9 	bl	80049e0 <__d2b>
 800342e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003432:	ee08 0a10 	vmov	s16, r0
 8003436:	2d00      	cmp	r5, #0
 8003438:	f000 8084 	beq.w	8003544 <_dtoa_r+0x204>
 800343c:	ee19 3a90 	vmov	r3, s19
 8003440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003444:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003448:	4656      	mov	r6, sl
 800344a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800344e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003452:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003456:	4b74      	ldr	r3, [pc, #464]	; (8003628 <_dtoa_r+0x2e8>)
 8003458:	2200      	movs	r2, #0
 800345a:	4630      	mov	r0, r6
 800345c:	4639      	mov	r1, r7
 800345e:	f7fc ff13 	bl	8000288 <__aeabi_dsub>
 8003462:	a365      	add	r3, pc, #404	; (adr r3, 80035f8 <_dtoa_r+0x2b8>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f7fd f8c6 	bl	80005f8 <__aeabi_dmul>
 800346c:	a364      	add	r3, pc, #400	; (adr r3, 8003600 <_dtoa_r+0x2c0>)
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f7fc ff0b 	bl	800028c <__adddf3>
 8003476:	4606      	mov	r6, r0
 8003478:	4628      	mov	r0, r5
 800347a:	460f      	mov	r7, r1
 800347c:	f7fd f852 	bl	8000524 <__aeabi_i2d>
 8003480:	a361      	add	r3, pc, #388	; (adr r3, 8003608 <_dtoa_r+0x2c8>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fd f8b7 	bl	80005f8 <__aeabi_dmul>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4630      	mov	r0, r6
 8003490:	4639      	mov	r1, r7
 8003492:	f7fc fefb 	bl	800028c <__adddf3>
 8003496:	4606      	mov	r6, r0
 8003498:	460f      	mov	r7, r1
 800349a:	f7fd fb5d 	bl	8000b58 <__aeabi_d2iz>
 800349e:	2200      	movs	r2, #0
 80034a0:	9000      	str	r0, [sp, #0]
 80034a2:	2300      	movs	r3, #0
 80034a4:	4630      	mov	r0, r6
 80034a6:	4639      	mov	r1, r7
 80034a8:	f7fd fb18 	bl	8000adc <__aeabi_dcmplt>
 80034ac:	b150      	cbz	r0, 80034c4 <_dtoa_r+0x184>
 80034ae:	9800      	ldr	r0, [sp, #0]
 80034b0:	f7fd f838 	bl	8000524 <__aeabi_i2d>
 80034b4:	4632      	mov	r2, r6
 80034b6:	463b      	mov	r3, r7
 80034b8:	f7fd fb06 	bl	8000ac8 <__aeabi_dcmpeq>
 80034bc:	b910      	cbnz	r0, 80034c4 <_dtoa_r+0x184>
 80034be:	9b00      	ldr	r3, [sp, #0]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	9b00      	ldr	r3, [sp, #0]
 80034c6:	2b16      	cmp	r3, #22
 80034c8:	d85a      	bhi.n	8003580 <_dtoa_r+0x240>
 80034ca:	9a00      	ldr	r2, [sp, #0]
 80034cc:	4b57      	ldr	r3, [pc, #348]	; (800362c <_dtoa_r+0x2ec>)
 80034ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	ec51 0b19 	vmov	r0, r1, d9
 80034da:	f7fd faff 	bl	8000adc <__aeabi_dcmplt>
 80034de:	2800      	cmp	r0, #0
 80034e0:	d050      	beq.n	8003584 <_dtoa_r+0x244>
 80034e2:	9b00      	ldr	r3, [sp, #0]
 80034e4:	3b01      	subs	r3, #1
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2300      	movs	r3, #0
 80034ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80034ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034ee:	1b5d      	subs	r5, r3, r5
 80034f0:	1e6b      	subs	r3, r5, #1
 80034f2:	9305      	str	r3, [sp, #20]
 80034f4:	bf45      	ittet	mi
 80034f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80034fa:	9304      	strmi	r3, [sp, #16]
 80034fc:	2300      	movpl	r3, #0
 80034fe:	2300      	movmi	r3, #0
 8003500:	bf4c      	ite	mi
 8003502:	9305      	strmi	r3, [sp, #20]
 8003504:	9304      	strpl	r3, [sp, #16]
 8003506:	9b00      	ldr	r3, [sp, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	db3d      	blt.n	8003588 <_dtoa_r+0x248>
 800350c:	9b05      	ldr	r3, [sp, #20]
 800350e:	9a00      	ldr	r2, [sp, #0]
 8003510:	920a      	str	r2, [sp, #40]	; 0x28
 8003512:	4413      	add	r3, r2
 8003514:	9305      	str	r3, [sp, #20]
 8003516:	2300      	movs	r3, #0
 8003518:	9307      	str	r3, [sp, #28]
 800351a:	9b06      	ldr	r3, [sp, #24]
 800351c:	2b09      	cmp	r3, #9
 800351e:	f200 8089 	bhi.w	8003634 <_dtoa_r+0x2f4>
 8003522:	2b05      	cmp	r3, #5
 8003524:	bfc4      	itt	gt
 8003526:	3b04      	subgt	r3, #4
 8003528:	9306      	strgt	r3, [sp, #24]
 800352a:	9b06      	ldr	r3, [sp, #24]
 800352c:	f1a3 0302 	sub.w	r3, r3, #2
 8003530:	bfcc      	ite	gt
 8003532:	2500      	movgt	r5, #0
 8003534:	2501      	movle	r5, #1
 8003536:	2b03      	cmp	r3, #3
 8003538:	f200 8087 	bhi.w	800364a <_dtoa_r+0x30a>
 800353c:	e8df f003 	tbb	[pc, r3]
 8003540:	59383a2d 	.word	0x59383a2d
 8003544:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003548:	441d      	add	r5, r3
 800354a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800354e:	2b20      	cmp	r3, #32
 8003550:	bfc1      	itttt	gt
 8003552:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003556:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800355a:	fa0b f303 	lslgt.w	r3, fp, r3
 800355e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003562:	bfda      	itte	le
 8003564:	f1c3 0320 	rsble	r3, r3, #32
 8003568:	fa06 f003 	lslle.w	r0, r6, r3
 800356c:	4318      	orrgt	r0, r3
 800356e:	f7fc ffc9 	bl	8000504 <__aeabi_ui2d>
 8003572:	2301      	movs	r3, #1
 8003574:	4606      	mov	r6, r0
 8003576:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800357a:	3d01      	subs	r5, #1
 800357c:	930e      	str	r3, [sp, #56]	; 0x38
 800357e:	e76a      	b.n	8003456 <_dtoa_r+0x116>
 8003580:	2301      	movs	r3, #1
 8003582:	e7b2      	b.n	80034ea <_dtoa_r+0x1aa>
 8003584:	900b      	str	r0, [sp, #44]	; 0x2c
 8003586:	e7b1      	b.n	80034ec <_dtoa_r+0x1ac>
 8003588:	9b04      	ldr	r3, [sp, #16]
 800358a:	9a00      	ldr	r2, [sp, #0]
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	9304      	str	r3, [sp, #16]
 8003590:	4253      	negs	r3, r2
 8003592:	9307      	str	r3, [sp, #28]
 8003594:	2300      	movs	r3, #0
 8003596:	930a      	str	r3, [sp, #40]	; 0x28
 8003598:	e7bf      	b.n	800351a <_dtoa_r+0x1da>
 800359a:	2300      	movs	r3, #0
 800359c:	9308      	str	r3, [sp, #32]
 800359e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	dc55      	bgt.n	8003650 <_dtoa_r+0x310>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80035aa:	461a      	mov	r2, r3
 80035ac:	9209      	str	r2, [sp, #36]	; 0x24
 80035ae:	e00c      	b.n	80035ca <_dtoa_r+0x28a>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e7f3      	b.n	800359c <_dtoa_r+0x25c>
 80035b4:	2300      	movs	r3, #0
 80035b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035b8:	9308      	str	r3, [sp, #32]
 80035ba:	9b00      	ldr	r3, [sp, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	9302      	str	r3, [sp, #8]
 80035c0:	3301      	adds	r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	9303      	str	r3, [sp, #12]
 80035c6:	bfb8      	it	lt
 80035c8:	2301      	movlt	r3, #1
 80035ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80035cc:	2200      	movs	r2, #0
 80035ce:	6042      	str	r2, [r0, #4]
 80035d0:	2204      	movs	r2, #4
 80035d2:	f102 0614 	add.w	r6, r2, #20
 80035d6:	429e      	cmp	r6, r3
 80035d8:	6841      	ldr	r1, [r0, #4]
 80035da:	d93d      	bls.n	8003658 <_dtoa_r+0x318>
 80035dc:	4620      	mov	r0, r4
 80035de:	f000 fed7 	bl	8004390 <_Balloc>
 80035e2:	9001      	str	r0, [sp, #4]
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d13b      	bne.n	8003660 <_dtoa_r+0x320>
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <_dtoa_r+0x2f0>)
 80035ea:	4602      	mov	r2, r0
 80035ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80035f0:	e6c0      	b.n	8003374 <_dtoa_r+0x34>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e7df      	b.n	80035b6 <_dtoa_r+0x276>
 80035f6:	bf00      	nop
 80035f8:	636f4361 	.word	0x636f4361
 80035fc:	3fd287a7 	.word	0x3fd287a7
 8003600:	8b60c8b3 	.word	0x8b60c8b3
 8003604:	3fc68a28 	.word	0x3fc68a28
 8003608:	509f79fb 	.word	0x509f79fb
 800360c:	3fd34413 	.word	0x3fd34413
 8003610:	08004fd2 	.word	0x08004fd2
 8003614:	08004fe9 	.word	0x08004fe9
 8003618:	7ff00000 	.word	0x7ff00000
 800361c:	08004fce 	.word	0x08004fce
 8003620:	08004fc5 	.word	0x08004fc5
 8003624:	08004fa2 	.word	0x08004fa2
 8003628:	3ff80000 	.word	0x3ff80000
 800362c:	08005140 	.word	0x08005140
 8003630:	08005044 	.word	0x08005044
 8003634:	2501      	movs	r5, #1
 8003636:	2300      	movs	r3, #0
 8003638:	9306      	str	r3, [sp, #24]
 800363a:	9508      	str	r5, [sp, #32]
 800363c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003640:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	2312      	movs	r3, #18
 8003648:	e7b0      	b.n	80035ac <_dtoa_r+0x26c>
 800364a:	2301      	movs	r3, #1
 800364c:	9308      	str	r3, [sp, #32]
 800364e:	e7f5      	b.n	800363c <_dtoa_r+0x2fc>
 8003650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003652:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003656:	e7b8      	b.n	80035ca <_dtoa_r+0x28a>
 8003658:	3101      	adds	r1, #1
 800365a:	6041      	str	r1, [r0, #4]
 800365c:	0052      	lsls	r2, r2, #1
 800365e:	e7b8      	b.n	80035d2 <_dtoa_r+0x292>
 8003660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003662:	9a01      	ldr	r2, [sp, #4]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	9b03      	ldr	r3, [sp, #12]
 8003668:	2b0e      	cmp	r3, #14
 800366a:	f200 809d 	bhi.w	80037a8 <_dtoa_r+0x468>
 800366e:	2d00      	cmp	r5, #0
 8003670:	f000 809a 	beq.w	80037a8 <_dtoa_r+0x468>
 8003674:	9b00      	ldr	r3, [sp, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	dd32      	ble.n	80036e0 <_dtoa_r+0x3a0>
 800367a:	4ab7      	ldr	r2, [pc, #732]	; (8003958 <_dtoa_r+0x618>)
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003684:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003688:	9b00      	ldr	r3, [sp, #0]
 800368a:	05d8      	lsls	r0, r3, #23
 800368c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003690:	d516      	bpl.n	80036c0 <_dtoa_r+0x380>
 8003692:	4bb2      	ldr	r3, [pc, #712]	; (800395c <_dtoa_r+0x61c>)
 8003694:	ec51 0b19 	vmov	r0, r1, d9
 8003698:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800369c:	f7fd f8d6 	bl	800084c <__aeabi_ddiv>
 80036a0:	f007 070f 	and.w	r7, r7, #15
 80036a4:	4682      	mov	sl, r0
 80036a6:	468b      	mov	fp, r1
 80036a8:	2503      	movs	r5, #3
 80036aa:	4eac      	ldr	r6, [pc, #688]	; (800395c <_dtoa_r+0x61c>)
 80036ac:	b957      	cbnz	r7, 80036c4 <_dtoa_r+0x384>
 80036ae:	4642      	mov	r2, r8
 80036b0:	464b      	mov	r3, r9
 80036b2:	4650      	mov	r0, sl
 80036b4:	4659      	mov	r1, fp
 80036b6:	f7fd f8c9 	bl	800084c <__aeabi_ddiv>
 80036ba:	4682      	mov	sl, r0
 80036bc:	468b      	mov	fp, r1
 80036be:	e028      	b.n	8003712 <_dtoa_r+0x3d2>
 80036c0:	2502      	movs	r5, #2
 80036c2:	e7f2      	b.n	80036aa <_dtoa_r+0x36a>
 80036c4:	07f9      	lsls	r1, r7, #31
 80036c6:	d508      	bpl.n	80036da <_dtoa_r+0x39a>
 80036c8:	4640      	mov	r0, r8
 80036ca:	4649      	mov	r1, r9
 80036cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80036d0:	f7fc ff92 	bl	80005f8 <__aeabi_dmul>
 80036d4:	3501      	adds	r5, #1
 80036d6:	4680      	mov	r8, r0
 80036d8:	4689      	mov	r9, r1
 80036da:	107f      	asrs	r7, r7, #1
 80036dc:	3608      	adds	r6, #8
 80036de:	e7e5      	b.n	80036ac <_dtoa_r+0x36c>
 80036e0:	f000 809b 	beq.w	800381a <_dtoa_r+0x4da>
 80036e4:	9b00      	ldr	r3, [sp, #0]
 80036e6:	4f9d      	ldr	r7, [pc, #628]	; (800395c <_dtoa_r+0x61c>)
 80036e8:	425e      	negs	r6, r3
 80036ea:	4b9b      	ldr	r3, [pc, #620]	; (8003958 <_dtoa_r+0x618>)
 80036ec:	f006 020f 	and.w	r2, r6, #15
 80036f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	ec51 0b19 	vmov	r0, r1, d9
 80036fc:	f7fc ff7c 	bl	80005f8 <__aeabi_dmul>
 8003700:	1136      	asrs	r6, r6, #4
 8003702:	4682      	mov	sl, r0
 8003704:	468b      	mov	fp, r1
 8003706:	2300      	movs	r3, #0
 8003708:	2502      	movs	r5, #2
 800370a:	2e00      	cmp	r6, #0
 800370c:	d17a      	bne.n	8003804 <_dtoa_r+0x4c4>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1d3      	bne.n	80036ba <_dtoa_r+0x37a>
 8003712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 8082 	beq.w	800381e <_dtoa_r+0x4de>
 800371a:	4b91      	ldr	r3, [pc, #580]	; (8003960 <_dtoa_r+0x620>)
 800371c:	2200      	movs	r2, #0
 800371e:	4650      	mov	r0, sl
 8003720:	4659      	mov	r1, fp
 8003722:	f7fd f9db 	bl	8000adc <__aeabi_dcmplt>
 8003726:	2800      	cmp	r0, #0
 8003728:	d079      	beq.n	800381e <_dtoa_r+0x4de>
 800372a:	9b03      	ldr	r3, [sp, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d076      	beq.n	800381e <_dtoa_r+0x4de>
 8003730:	9b02      	ldr	r3, [sp, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	dd36      	ble.n	80037a4 <_dtoa_r+0x464>
 8003736:	9b00      	ldr	r3, [sp, #0]
 8003738:	4650      	mov	r0, sl
 800373a:	4659      	mov	r1, fp
 800373c:	1e5f      	subs	r7, r3, #1
 800373e:	2200      	movs	r2, #0
 8003740:	4b88      	ldr	r3, [pc, #544]	; (8003964 <_dtoa_r+0x624>)
 8003742:	f7fc ff59 	bl	80005f8 <__aeabi_dmul>
 8003746:	9e02      	ldr	r6, [sp, #8]
 8003748:	4682      	mov	sl, r0
 800374a:	468b      	mov	fp, r1
 800374c:	3501      	adds	r5, #1
 800374e:	4628      	mov	r0, r5
 8003750:	f7fc fee8 	bl	8000524 <__aeabi_i2d>
 8003754:	4652      	mov	r2, sl
 8003756:	465b      	mov	r3, fp
 8003758:	f7fc ff4e 	bl	80005f8 <__aeabi_dmul>
 800375c:	4b82      	ldr	r3, [pc, #520]	; (8003968 <_dtoa_r+0x628>)
 800375e:	2200      	movs	r2, #0
 8003760:	f7fc fd94 	bl	800028c <__adddf3>
 8003764:	46d0      	mov	r8, sl
 8003766:	46d9      	mov	r9, fp
 8003768:	4682      	mov	sl, r0
 800376a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800376e:	2e00      	cmp	r6, #0
 8003770:	d158      	bne.n	8003824 <_dtoa_r+0x4e4>
 8003772:	4b7e      	ldr	r3, [pc, #504]	; (800396c <_dtoa_r+0x62c>)
 8003774:	2200      	movs	r2, #0
 8003776:	4640      	mov	r0, r8
 8003778:	4649      	mov	r1, r9
 800377a:	f7fc fd85 	bl	8000288 <__aeabi_dsub>
 800377e:	4652      	mov	r2, sl
 8003780:	465b      	mov	r3, fp
 8003782:	4680      	mov	r8, r0
 8003784:	4689      	mov	r9, r1
 8003786:	f7fd f9c7 	bl	8000b18 <__aeabi_dcmpgt>
 800378a:	2800      	cmp	r0, #0
 800378c:	f040 8295 	bne.w	8003cba <_dtoa_r+0x97a>
 8003790:	4652      	mov	r2, sl
 8003792:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003796:	4640      	mov	r0, r8
 8003798:	4649      	mov	r1, r9
 800379a:	f7fd f99f 	bl	8000adc <__aeabi_dcmplt>
 800379e:	2800      	cmp	r0, #0
 80037a0:	f040 8289 	bne.w	8003cb6 <_dtoa_r+0x976>
 80037a4:	ec5b ab19 	vmov	sl, fp, d9
 80037a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f2c0 8148 	blt.w	8003a40 <_dtoa_r+0x700>
 80037b0:	9a00      	ldr	r2, [sp, #0]
 80037b2:	2a0e      	cmp	r2, #14
 80037b4:	f300 8144 	bgt.w	8003a40 <_dtoa_r+0x700>
 80037b8:	4b67      	ldr	r3, [pc, #412]	; (8003958 <_dtoa_r+0x618>)
 80037ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80037c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f280 80d5 	bge.w	8003974 <_dtoa_r+0x634>
 80037ca:	9b03      	ldr	r3, [sp, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f300 80d1 	bgt.w	8003974 <_dtoa_r+0x634>
 80037d2:	f040 826f 	bne.w	8003cb4 <_dtoa_r+0x974>
 80037d6:	4b65      	ldr	r3, [pc, #404]	; (800396c <_dtoa_r+0x62c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	4640      	mov	r0, r8
 80037dc:	4649      	mov	r1, r9
 80037de:	f7fc ff0b 	bl	80005f8 <__aeabi_dmul>
 80037e2:	4652      	mov	r2, sl
 80037e4:	465b      	mov	r3, fp
 80037e6:	f7fd f98d 	bl	8000b04 <__aeabi_dcmpge>
 80037ea:	9e03      	ldr	r6, [sp, #12]
 80037ec:	4637      	mov	r7, r6
 80037ee:	2800      	cmp	r0, #0
 80037f0:	f040 8245 	bne.w	8003c7e <_dtoa_r+0x93e>
 80037f4:	9d01      	ldr	r5, [sp, #4]
 80037f6:	2331      	movs	r3, #49	; 0x31
 80037f8:	f805 3b01 	strb.w	r3, [r5], #1
 80037fc:	9b00      	ldr	r3, [sp, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	e240      	b.n	8003c86 <_dtoa_r+0x946>
 8003804:	07f2      	lsls	r2, r6, #31
 8003806:	d505      	bpl.n	8003814 <_dtoa_r+0x4d4>
 8003808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800380c:	f7fc fef4 	bl	80005f8 <__aeabi_dmul>
 8003810:	3501      	adds	r5, #1
 8003812:	2301      	movs	r3, #1
 8003814:	1076      	asrs	r6, r6, #1
 8003816:	3708      	adds	r7, #8
 8003818:	e777      	b.n	800370a <_dtoa_r+0x3ca>
 800381a:	2502      	movs	r5, #2
 800381c:	e779      	b.n	8003712 <_dtoa_r+0x3d2>
 800381e:	9f00      	ldr	r7, [sp, #0]
 8003820:	9e03      	ldr	r6, [sp, #12]
 8003822:	e794      	b.n	800374e <_dtoa_r+0x40e>
 8003824:	9901      	ldr	r1, [sp, #4]
 8003826:	4b4c      	ldr	r3, [pc, #304]	; (8003958 <_dtoa_r+0x618>)
 8003828:	4431      	add	r1, r6
 800382a:	910d      	str	r1, [sp, #52]	; 0x34
 800382c:	9908      	ldr	r1, [sp, #32]
 800382e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003836:	2900      	cmp	r1, #0
 8003838:	d043      	beq.n	80038c2 <_dtoa_r+0x582>
 800383a:	494d      	ldr	r1, [pc, #308]	; (8003970 <_dtoa_r+0x630>)
 800383c:	2000      	movs	r0, #0
 800383e:	f7fd f805 	bl	800084c <__aeabi_ddiv>
 8003842:	4652      	mov	r2, sl
 8003844:	465b      	mov	r3, fp
 8003846:	f7fc fd1f 	bl	8000288 <__aeabi_dsub>
 800384a:	9d01      	ldr	r5, [sp, #4]
 800384c:	4682      	mov	sl, r0
 800384e:	468b      	mov	fp, r1
 8003850:	4649      	mov	r1, r9
 8003852:	4640      	mov	r0, r8
 8003854:	f7fd f980 	bl	8000b58 <__aeabi_d2iz>
 8003858:	4606      	mov	r6, r0
 800385a:	f7fc fe63 	bl	8000524 <__aeabi_i2d>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4640      	mov	r0, r8
 8003864:	4649      	mov	r1, r9
 8003866:	f7fc fd0f 	bl	8000288 <__aeabi_dsub>
 800386a:	3630      	adds	r6, #48	; 0x30
 800386c:	f805 6b01 	strb.w	r6, [r5], #1
 8003870:	4652      	mov	r2, sl
 8003872:	465b      	mov	r3, fp
 8003874:	4680      	mov	r8, r0
 8003876:	4689      	mov	r9, r1
 8003878:	f7fd f930 	bl	8000adc <__aeabi_dcmplt>
 800387c:	2800      	cmp	r0, #0
 800387e:	d163      	bne.n	8003948 <_dtoa_r+0x608>
 8003880:	4642      	mov	r2, r8
 8003882:	464b      	mov	r3, r9
 8003884:	4936      	ldr	r1, [pc, #216]	; (8003960 <_dtoa_r+0x620>)
 8003886:	2000      	movs	r0, #0
 8003888:	f7fc fcfe 	bl	8000288 <__aeabi_dsub>
 800388c:	4652      	mov	r2, sl
 800388e:	465b      	mov	r3, fp
 8003890:	f7fd f924 	bl	8000adc <__aeabi_dcmplt>
 8003894:	2800      	cmp	r0, #0
 8003896:	f040 80b5 	bne.w	8003a04 <_dtoa_r+0x6c4>
 800389a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800389c:	429d      	cmp	r5, r3
 800389e:	d081      	beq.n	80037a4 <_dtoa_r+0x464>
 80038a0:	4b30      	ldr	r3, [pc, #192]	; (8003964 <_dtoa_r+0x624>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	4650      	mov	r0, sl
 80038a6:	4659      	mov	r1, fp
 80038a8:	f7fc fea6 	bl	80005f8 <__aeabi_dmul>
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <_dtoa_r+0x624>)
 80038ae:	4682      	mov	sl, r0
 80038b0:	468b      	mov	fp, r1
 80038b2:	4640      	mov	r0, r8
 80038b4:	4649      	mov	r1, r9
 80038b6:	2200      	movs	r2, #0
 80038b8:	f7fc fe9e 	bl	80005f8 <__aeabi_dmul>
 80038bc:	4680      	mov	r8, r0
 80038be:	4689      	mov	r9, r1
 80038c0:	e7c6      	b.n	8003850 <_dtoa_r+0x510>
 80038c2:	4650      	mov	r0, sl
 80038c4:	4659      	mov	r1, fp
 80038c6:	f7fc fe97 	bl	80005f8 <__aeabi_dmul>
 80038ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038cc:	9d01      	ldr	r5, [sp, #4]
 80038ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80038d0:	4682      	mov	sl, r0
 80038d2:	468b      	mov	fp, r1
 80038d4:	4649      	mov	r1, r9
 80038d6:	4640      	mov	r0, r8
 80038d8:	f7fd f93e 	bl	8000b58 <__aeabi_d2iz>
 80038dc:	4606      	mov	r6, r0
 80038de:	f7fc fe21 	bl	8000524 <__aeabi_i2d>
 80038e2:	3630      	adds	r6, #48	; 0x30
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4640      	mov	r0, r8
 80038ea:	4649      	mov	r1, r9
 80038ec:	f7fc fccc 	bl	8000288 <__aeabi_dsub>
 80038f0:	f805 6b01 	strb.w	r6, [r5], #1
 80038f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038f6:	429d      	cmp	r5, r3
 80038f8:	4680      	mov	r8, r0
 80038fa:	4689      	mov	r9, r1
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	d124      	bne.n	800394c <_dtoa_r+0x60c>
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <_dtoa_r+0x630>)
 8003904:	4650      	mov	r0, sl
 8003906:	4659      	mov	r1, fp
 8003908:	f7fc fcc0 	bl	800028c <__adddf3>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4640      	mov	r0, r8
 8003912:	4649      	mov	r1, r9
 8003914:	f7fd f900 	bl	8000b18 <__aeabi_dcmpgt>
 8003918:	2800      	cmp	r0, #0
 800391a:	d173      	bne.n	8003a04 <_dtoa_r+0x6c4>
 800391c:	4652      	mov	r2, sl
 800391e:	465b      	mov	r3, fp
 8003920:	4913      	ldr	r1, [pc, #76]	; (8003970 <_dtoa_r+0x630>)
 8003922:	2000      	movs	r0, #0
 8003924:	f7fc fcb0 	bl	8000288 <__aeabi_dsub>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4640      	mov	r0, r8
 800392e:	4649      	mov	r1, r9
 8003930:	f7fd f8d4 	bl	8000adc <__aeabi_dcmplt>
 8003934:	2800      	cmp	r0, #0
 8003936:	f43f af35 	beq.w	80037a4 <_dtoa_r+0x464>
 800393a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800393c:	1e6b      	subs	r3, r5, #1
 800393e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003940:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003944:	2b30      	cmp	r3, #48	; 0x30
 8003946:	d0f8      	beq.n	800393a <_dtoa_r+0x5fa>
 8003948:	9700      	str	r7, [sp, #0]
 800394a:	e049      	b.n	80039e0 <_dtoa_r+0x6a0>
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <_dtoa_r+0x624>)
 800394e:	f7fc fe53 	bl	80005f8 <__aeabi_dmul>
 8003952:	4680      	mov	r8, r0
 8003954:	4689      	mov	r9, r1
 8003956:	e7bd      	b.n	80038d4 <_dtoa_r+0x594>
 8003958:	08005140 	.word	0x08005140
 800395c:	08005118 	.word	0x08005118
 8003960:	3ff00000 	.word	0x3ff00000
 8003964:	40240000 	.word	0x40240000
 8003968:	401c0000 	.word	0x401c0000
 800396c:	40140000 	.word	0x40140000
 8003970:	3fe00000 	.word	0x3fe00000
 8003974:	9d01      	ldr	r5, [sp, #4]
 8003976:	4656      	mov	r6, sl
 8003978:	465f      	mov	r7, fp
 800397a:	4642      	mov	r2, r8
 800397c:	464b      	mov	r3, r9
 800397e:	4630      	mov	r0, r6
 8003980:	4639      	mov	r1, r7
 8003982:	f7fc ff63 	bl	800084c <__aeabi_ddiv>
 8003986:	f7fd f8e7 	bl	8000b58 <__aeabi_d2iz>
 800398a:	4682      	mov	sl, r0
 800398c:	f7fc fdca 	bl	8000524 <__aeabi_i2d>
 8003990:	4642      	mov	r2, r8
 8003992:	464b      	mov	r3, r9
 8003994:	f7fc fe30 	bl	80005f8 <__aeabi_dmul>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4630      	mov	r0, r6
 800399e:	4639      	mov	r1, r7
 80039a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80039a4:	f7fc fc70 	bl	8000288 <__aeabi_dsub>
 80039a8:	f805 6b01 	strb.w	r6, [r5], #1
 80039ac:	9e01      	ldr	r6, [sp, #4]
 80039ae:	9f03      	ldr	r7, [sp, #12]
 80039b0:	1bae      	subs	r6, r5, r6
 80039b2:	42b7      	cmp	r7, r6
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	d135      	bne.n	8003a26 <_dtoa_r+0x6e6>
 80039ba:	f7fc fc67 	bl	800028c <__adddf3>
 80039be:	4642      	mov	r2, r8
 80039c0:	464b      	mov	r3, r9
 80039c2:	4606      	mov	r6, r0
 80039c4:	460f      	mov	r7, r1
 80039c6:	f7fd f8a7 	bl	8000b18 <__aeabi_dcmpgt>
 80039ca:	b9d0      	cbnz	r0, 8003a02 <_dtoa_r+0x6c2>
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	4630      	mov	r0, r6
 80039d2:	4639      	mov	r1, r7
 80039d4:	f7fd f878 	bl	8000ac8 <__aeabi_dcmpeq>
 80039d8:	b110      	cbz	r0, 80039e0 <_dtoa_r+0x6a0>
 80039da:	f01a 0f01 	tst.w	sl, #1
 80039de:	d110      	bne.n	8003a02 <_dtoa_r+0x6c2>
 80039e0:	4620      	mov	r0, r4
 80039e2:	ee18 1a10 	vmov	r1, s16
 80039e6:	f000 fd13 	bl	8004410 <_Bfree>
 80039ea:	2300      	movs	r3, #0
 80039ec:	9800      	ldr	r0, [sp, #0]
 80039ee:	702b      	strb	r3, [r5, #0]
 80039f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039f2:	3001      	adds	r0, #1
 80039f4:	6018      	str	r0, [r3, #0]
 80039f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f43f acf1 	beq.w	80033e0 <_dtoa_r+0xa0>
 80039fe:	601d      	str	r5, [r3, #0]
 8003a00:	e4ee      	b.n	80033e0 <_dtoa_r+0xa0>
 8003a02:	9f00      	ldr	r7, [sp, #0]
 8003a04:	462b      	mov	r3, r5
 8003a06:	461d      	mov	r5, r3
 8003a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003a0c:	2a39      	cmp	r2, #57	; 0x39
 8003a0e:	d106      	bne.n	8003a1e <_dtoa_r+0x6de>
 8003a10:	9a01      	ldr	r2, [sp, #4]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d1f7      	bne.n	8003a06 <_dtoa_r+0x6c6>
 8003a16:	9901      	ldr	r1, [sp, #4]
 8003a18:	2230      	movs	r2, #48	; 0x30
 8003a1a:	3701      	adds	r7, #1
 8003a1c:	700a      	strb	r2, [r1, #0]
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	3201      	adds	r2, #1
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e790      	b.n	8003948 <_dtoa_r+0x608>
 8003a26:	4ba6      	ldr	r3, [pc, #664]	; (8003cc0 <_dtoa_r+0x980>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f7fc fde5 	bl	80005f8 <__aeabi_dmul>
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2300      	movs	r3, #0
 8003a32:	4606      	mov	r6, r0
 8003a34:	460f      	mov	r7, r1
 8003a36:	f7fd f847 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a3a:	2800      	cmp	r0, #0
 8003a3c:	d09d      	beq.n	800397a <_dtoa_r+0x63a>
 8003a3e:	e7cf      	b.n	80039e0 <_dtoa_r+0x6a0>
 8003a40:	9a08      	ldr	r2, [sp, #32]
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	f000 80d7 	beq.w	8003bf6 <_dtoa_r+0x8b6>
 8003a48:	9a06      	ldr	r2, [sp, #24]
 8003a4a:	2a01      	cmp	r2, #1
 8003a4c:	f300 80ba 	bgt.w	8003bc4 <_dtoa_r+0x884>
 8003a50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	f000 80b2 	beq.w	8003bbc <_dtoa_r+0x87c>
 8003a58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003a5c:	9e07      	ldr	r6, [sp, #28]
 8003a5e:	9d04      	ldr	r5, [sp, #16]
 8003a60:	9a04      	ldr	r2, [sp, #16]
 8003a62:	441a      	add	r2, r3
 8003a64:	9204      	str	r2, [sp, #16]
 8003a66:	9a05      	ldr	r2, [sp, #20]
 8003a68:	2101      	movs	r1, #1
 8003a6a:	441a      	add	r2, r3
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	9205      	str	r2, [sp, #20]
 8003a70:	f000 fd86 	bl	8004580 <__i2b>
 8003a74:	4607      	mov	r7, r0
 8003a76:	2d00      	cmp	r5, #0
 8003a78:	dd0c      	ble.n	8003a94 <_dtoa_r+0x754>
 8003a7a:	9b05      	ldr	r3, [sp, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	dd09      	ble.n	8003a94 <_dtoa_r+0x754>
 8003a80:	42ab      	cmp	r3, r5
 8003a82:	9a04      	ldr	r2, [sp, #16]
 8003a84:	bfa8      	it	ge
 8003a86:	462b      	movge	r3, r5
 8003a88:	1ad2      	subs	r2, r2, r3
 8003a8a:	9204      	str	r2, [sp, #16]
 8003a8c:	9a05      	ldr	r2, [sp, #20]
 8003a8e:	1aed      	subs	r5, r5, r3
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	9305      	str	r3, [sp, #20]
 8003a94:	9b07      	ldr	r3, [sp, #28]
 8003a96:	b31b      	cbz	r3, 8003ae0 <_dtoa_r+0x7a0>
 8003a98:	9b08      	ldr	r3, [sp, #32]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80af 	beq.w	8003bfe <_dtoa_r+0x8be>
 8003aa0:	2e00      	cmp	r6, #0
 8003aa2:	dd13      	ble.n	8003acc <_dtoa_r+0x78c>
 8003aa4:	4639      	mov	r1, r7
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f000 fe29 	bl	8004700 <__pow5mult>
 8003aae:	ee18 2a10 	vmov	r2, s16
 8003ab2:	4601      	mov	r1, r0
 8003ab4:	4607      	mov	r7, r0
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f000 fd78 	bl	80045ac <__multiply>
 8003abc:	ee18 1a10 	vmov	r1, s16
 8003ac0:	4680      	mov	r8, r0
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f000 fca4 	bl	8004410 <_Bfree>
 8003ac8:	ee08 8a10 	vmov	s16, r8
 8003acc:	9b07      	ldr	r3, [sp, #28]
 8003ace:	1b9a      	subs	r2, r3, r6
 8003ad0:	d006      	beq.n	8003ae0 <_dtoa_r+0x7a0>
 8003ad2:	ee18 1a10 	vmov	r1, s16
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f000 fe12 	bl	8004700 <__pow5mult>
 8003adc:	ee08 0a10 	vmov	s16, r0
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f000 fd4c 	bl	8004580 <__i2b>
 8003ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	4606      	mov	r6, r0
 8003aee:	f340 8088 	ble.w	8003c02 <_dtoa_r+0x8c2>
 8003af2:	461a      	mov	r2, r3
 8003af4:	4601      	mov	r1, r0
 8003af6:	4620      	mov	r0, r4
 8003af8:	f000 fe02 	bl	8004700 <__pow5mult>
 8003afc:	9b06      	ldr	r3, [sp, #24]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	4606      	mov	r6, r0
 8003b02:	f340 8081 	ble.w	8003c08 <_dtoa_r+0x8c8>
 8003b06:	f04f 0800 	mov.w	r8, #0
 8003b0a:	6933      	ldr	r3, [r6, #16]
 8003b0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003b10:	6918      	ldr	r0, [r3, #16]
 8003b12:	f000 fce5 	bl	80044e0 <__hi0bits>
 8003b16:	f1c0 0020 	rsb	r0, r0, #32
 8003b1a:	9b05      	ldr	r3, [sp, #20]
 8003b1c:	4418      	add	r0, r3
 8003b1e:	f010 001f 	ands.w	r0, r0, #31
 8003b22:	f000 8092 	beq.w	8003c4a <_dtoa_r+0x90a>
 8003b26:	f1c0 0320 	rsb	r3, r0, #32
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	f340 808a 	ble.w	8003c44 <_dtoa_r+0x904>
 8003b30:	f1c0 001c 	rsb	r0, r0, #28
 8003b34:	9b04      	ldr	r3, [sp, #16]
 8003b36:	4403      	add	r3, r0
 8003b38:	9304      	str	r3, [sp, #16]
 8003b3a:	9b05      	ldr	r3, [sp, #20]
 8003b3c:	4403      	add	r3, r0
 8003b3e:	4405      	add	r5, r0
 8003b40:	9305      	str	r3, [sp, #20]
 8003b42:	9b04      	ldr	r3, [sp, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	dd07      	ble.n	8003b58 <_dtoa_r+0x818>
 8003b48:	ee18 1a10 	vmov	r1, s16
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f000 fe30 	bl	80047b4 <__lshift>
 8003b54:	ee08 0a10 	vmov	s16, r0
 8003b58:	9b05      	ldr	r3, [sp, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	dd05      	ble.n	8003b6a <_dtoa_r+0x82a>
 8003b5e:	4631      	mov	r1, r6
 8003b60:	461a      	mov	r2, r3
 8003b62:	4620      	mov	r0, r4
 8003b64:	f000 fe26 	bl	80047b4 <__lshift>
 8003b68:	4606      	mov	r6, r0
 8003b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d06e      	beq.n	8003c4e <_dtoa_r+0x90e>
 8003b70:	ee18 0a10 	vmov	r0, s16
 8003b74:	4631      	mov	r1, r6
 8003b76:	f000 fe8d 	bl	8004894 <__mcmp>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	da67      	bge.n	8003c4e <_dtoa_r+0x90e>
 8003b7e:	9b00      	ldr	r3, [sp, #0]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	ee18 1a10 	vmov	r1, s16
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	220a      	movs	r2, #10
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f000 fc61 	bl	8004454 <__multadd>
 8003b92:	9b08      	ldr	r3, [sp, #32]
 8003b94:	ee08 0a10 	vmov	s16, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 81b1 	beq.w	8003f00 <_dtoa_r+0xbc0>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	4639      	mov	r1, r7
 8003ba2:	220a      	movs	r2, #10
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f000 fc55 	bl	8004454 <__multadd>
 8003baa:	9b02      	ldr	r3, [sp, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	4607      	mov	r7, r0
 8003bb0:	f300 808e 	bgt.w	8003cd0 <_dtoa_r+0x990>
 8003bb4:	9b06      	ldr	r3, [sp, #24]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	dc51      	bgt.n	8003c5e <_dtoa_r+0x91e>
 8003bba:	e089      	b.n	8003cd0 <_dtoa_r+0x990>
 8003bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003bbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003bc2:	e74b      	b.n	8003a5c <_dtoa_r+0x71c>
 8003bc4:	9b03      	ldr	r3, [sp, #12]
 8003bc6:	1e5e      	subs	r6, r3, #1
 8003bc8:	9b07      	ldr	r3, [sp, #28]
 8003bca:	42b3      	cmp	r3, r6
 8003bcc:	bfbf      	itttt	lt
 8003bce:	9b07      	ldrlt	r3, [sp, #28]
 8003bd0:	9607      	strlt	r6, [sp, #28]
 8003bd2:	1af2      	sublt	r2, r6, r3
 8003bd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003bd6:	bfb6      	itet	lt
 8003bd8:	189b      	addlt	r3, r3, r2
 8003bda:	1b9e      	subge	r6, r3, r6
 8003bdc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8003bde:	9b03      	ldr	r3, [sp, #12]
 8003be0:	bfb8      	it	lt
 8003be2:	2600      	movlt	r6, #0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bfb7      	itett	lt
 8003be8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8003bec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003bf0:	1a9d      	sublt	r5, r3, r2
 8003bf2:	2300      	movlt	r3, #0
 8003bf4:	e734      	b.n	8003a60 <_dtoa_r+0x720>
 8003bf6:	9e07      	ldr	r6, [sp, #28]
 8003bf8:	9d04      	ldr	r5, [sp, #16]
 8003bfa:	9f08      	ldr	r7, [sp, #32]
 8003bfc:	e73b      	b.n	8003a76 <_dtoa_r+0x736>
 8003bfe:	9a07      	ldr	r2, [sp, #28]
 8003c00:	e767      	b.n	8003ad2 <_dtoa_r+0x792>
 8003c02:	9b06      	ldr	r3, [sp, #24]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	dc18      	bgt.n	8003c3a <_dtoa_r+0x8fa>
 8003c08:	f1ba 0f00 	cmp.w	sl, #0
 8003c0c:	d115      	bne.n	8003c3a <_dtoa_r+0x8fa>
 8003c0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003c12:	b993      	cbnz	r3, 8003c3a <_dtoa_r+0x8fa>
 8003c14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003c18:	0d1b      	lsrs	r3, r3, #20
 8003c1a:	051b      	lsls	r3, r3, #20
 8003c1c:	b183      	cbz	r3, 8003c40 <_dtoa_r+0x900>
 8003c1e:	9b04      	ldr	r3, [sp, #16]
 8003c20:	3301      	adds	r3, #1
 8003c22:	9304      	str	r3, [sp, #16]
 8003c24:	9b05      	ldr	r3, [sp, #20]
 8003c26:	3301      	adds	r3, #1
 8003c28:	9305      	str	r3, [sp, #20]
 8003c2a:	f04f 0801 	mov.w	r8, #1
 8003c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f47f af6a 	bne.w	8003b0a <_dtoa_r+0x7ca>
 8003c36:	2001      	movs	r0, #1
 8003c38:	e76f      	b.n	8003b1a <_dtoa_r+0x7da>
 8003c3a:	f04f 0800 	mov.w	r8, #0
 8003c3e:	e7f6      	b.n	8003c2e <_dtoa_r+0x8ee>
 8003c40:	4698      	mov	r8, r3
 8003c42:	e7f4      	b.n	8003c2e <_dtoa_r+0x8ee>
 8003c44:	f43f af7d 	beq.w	8003b42 <_dtoa_r+0x802>
 8003c48:	4618      	mov	r0, r3
 8003c4a:	301c      	adds	r0, #28
 8003c4c:	e772      	b.n	8003b34 <_dtoa_r+0x7f4>
 8003c4e:	9b03      	ldr	r3, [sp, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	dc37      	bgt.n	8003cc4 <_dtoa_r+0x984>
 8003c54:	9b06      	ldr	r3, [sp, #24]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	dd34      	ble.n	8003cc4 <_dtoa_r+0x984>
 8003c5a:	9b03      	ldr	r3, [sp, #12]
 8003c5c:	9302      	str	r3, [sp, #8]
 8003c5e:	9b02      	ldr	r3, [sp, #8]
 8003c60:	b96b      	cbnz	r3, 8003c7e <_dtoa_r+0x93e>
 8003c62:	4631      	mov	r1, r6
 8003c64:	2205      	movs	r2, #5
 8003c66:	4620      	mov	r0, r4
 8003c68:	f000 fbf4 	bl	8004454 <__multadd>
 8003c6c:	4601      	mov	r1, r0
 8003c6e:	4606      	mov	r6, r0
 8003c70:	ee18 0a10 	vmov	r0, s16
 8003c74:	f000 fe0e 	bl	8004894 <__mcmp>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	f73f adbb 	bgt.w	80037f4 <_dtoa_r+0x4b4>
 8003c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c80:	9d01      	ldr	r5, [sp, #4]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	f04f 0800 	mov.w	r8, #0
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	f000 fbbf 	bl	8004410 <_Bfree>
 8003c92:	2f00      	cmp	r7, #0
 8003c94:	f43f aea4 	beq.w	80039e0 <_dtoa_r+0x6a0>
 8003c98:	f1b8 0f00 	cmp.w	r8, #0
 8003c9c:	d005      	beq.n	8003caa <_dtoa_r+0x96a>
 8003c9e:	45b8      	cmp	r8, r7
 8003ca0:	d003      	beq.n	8003caa <_dtoa_r+0x96a>
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f000 fbb3 	bl	8004410 <_Bfree>
 8003caa:	4639      	mov	r1, r7
 8003cac:	4620      	mov	r0, r4
 8003cae:	f000 fbaf 	bl	8004410 <_Bfree>
 8003cb2:	e695      	b.n	80039e0 <_dtoa_r+0x6a0>
 8003cb4:	2600      	movs	r6, #0
 8003cb6:	4637      	mov	r7, r6
 8003cb8:	e7e1      	b.n	8003c7e <_dtoa_r+0x93e>
 8003cba:	9700      	str	r7, [sp, #0]
 8003cbc:	4637      	mov	r7, r6
 8003cbe:	e599      	b.n	80037f4 <_dtoa_r+0x4b4>
 8003cc0:	40240000 	.word	0x40240000
 8003cc4:	9b08      	ldr	r3, [sp, #32]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80ca 	beq.w	8003e60 <_dtoa_r+0xb20>
 8003ccc:	9b03      	ldr	r3, [sp, #12]
 8003cce:	9302      	str	r3, [sp, #8]
 8003cd0:	2d00      	cmp	r5, #0
 8003cd2:	dd05      	ble.n	8003ce0 <_dtoa_r+0x9a0>
 8003cd4:	4639      	mov	r1, r7
 8003cd6:	462a      	mov	r2, r5
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f000 fd6b 	bl	80047b4 <__lshift>
 8003cde:	4607      	mov	r7, r0
 8003ce0:	f1b8 0f00 	cmp.w	r8, #0
 8003ce4:	d05b      	beq.n	8003d9e <_dtoa_r+0xa5e>
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f000 fb51 	bl	8004390 <_Balloc>
 8003cee:	4605      	mov	r5, r0
 8003cf0:	b928      	cbnz	r0, 8003cfe <_dtoa_r+0x9be>
 8003cf2:	4b87      	ldr	r3, [pc, #540]	; (8003f10 <_dtoa_r+0xbd0>)
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003cfa:	f7ff bb3b 	b.w	8003374 <_dtoa_r+0x34>
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	3202      	adds	r2, #2
 8003d02:	0092      	lsls	r2, r2, #2
 8003d04:	f107 010c 	add.w	r1, r7, #12
 8003d08:	300c      	adds	r0, #12
 8003d0a:	f000 fb33 	bl	8004374 <memcpy>
 8003d0e:	2201      	movs	r2, #1
 8003d10:	4629      	mov	r1, r5
 8003d12:	4620      	mov	r0, r4
 8003d14:	f000 fd4e 	bl	80047b4 <__lshift>
 8003d18:	9b01      	ldr	r3, [sp, #4]
 8003d1a:	f103 0901 	add.w	r9, r3, #1
 8003d1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003d22:	4413      	add	r3, r2
 8003d24:	9305      	str	r3, [sp, #20]
 8003d26:	f00a 0301 	and.w	r3, sl, #1
 8003d2a:	46b8      	mov	r8, r7
 8003d2c:	9304      	str	r3, [sp, #16]
 8003d2e:	4607      	mov	r7, r0
 8003d30:	4631      	mov	r1, r6
 8003d32:	ee18 0a10 	vmov	r0, s16
 8003d36:	f7ff fa78 	bl	800322a <quorem>
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	9002      	str	r0, [sp, #8]
 8003d3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003d42:	ee18 0a10 	vmov	r0, s16
 8003d46:	f000 fda5 	bl	8004894 <__mcmp>
 8003d4a:	463a      	mov	r2, r7
 8003d4c:	9003      	str	r0, [sp, #12]
 8003d4e:	4631      	mov	r1, r6
 8003d50:	4620      	mov	r0, r4
 8003d52:	f000 fdbb 	bl	80048cc <__mdiff>
 8003d56:	68c2      	ldr	r2, [r0, #12]
 8003d58:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	bb02      	cbnz	r2, 8003da2 <_dtoa_r+0xa62>
 8003d60:	4601      	mov	r1, r0
 8003d62:	ee18 0a10 	vmov	r0, s16
 8003d66:	f000 fd95 	bl	8004894 <__mcmp>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	4620      	mov	r0, r4
 8003d70:	9207      	str	r2, [sp, #28]
 8003d72:	f000 fb4d 	bl	8004410 <_Bfree>
 8003d76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8003d7a:	ea43 0102 	orr.w	r1, r3, r2
 8003d7e:	9b04      	ldr	r3, [sp, #16]
 8003d80:	430b      	orrs	r3, r1
 8003d82:	464d      	mov	r5, r9
 8003d84:	d10f      	bne.n	8003da6 <_dtoa_r+0xa66>
 8003d86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003d8a:	d02a      	beq.n	8003de2 <_dtoa_r+0xaa2>
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	dd02      	ble.n	8003d98 <_dtoa_r+0xa58>
 8003d92:	9b02      	ldr	r3, [sp, #8]
 8003d94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8003d98:	f88b a000 	strb.w	sl, [fp]
 8003d9c:	e775      	b.n	8003c8a <_dtoa_r+0x94a>
 8003d9e:	4638      	mov	r0, r7
 8003da0:	e7ba      	b.n	8003d18 <_dtoa_r+0x9d8>
 8003da2:	2201      	movs	r2, #1
 8003da4:	e7e2      	b.n	8003d6c <_dtoa_r+0xa2c>
 8003da6:	9b03      	ldr	r3, [sp, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	db04      	blt.n	8003db6 <_dtoa_r+0xa76>
 8003dac:	9906      	ldr	r1, [sp, #24]
 8003dae:	430b      	orrs	r3, r1
 8003db0:	9904      	ldr	r1, [sp, #16]
 8003db2:	430b      	orrs	r3, r1
 8003db4:	d122      	bne.n	8003dfc <_dtoa_r+0xabc>
 8003db6:	2a00      	cmp	r2, #0
 8003db8:	ddee      	ble.n	8003d98 <_dtoa_r+0xa58>
 8003dba:	ee18 1a10 	vmov	r1, s16
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f000 fcf7 	bl	80047b4 <__lshift>
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	ee08 0a10 	vmov	s16, r0
 8003dcc:	f000 fd62 	bl	8004894 <__mcmp>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	dc03      	bgt.n	8003ddc <_dtoa_r+0xa9c>
 8003dd4:	d1e0      	bne.n	8003d98 <_dtoa_r+0xa58>
 8003dd6:	f01a 0f01 	tst.w	sl, #1
 8003dda:	d0dd      	beq.n	8003d98 <_dtoa_r+0xa58>
 8003ddc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003de0:	d1d7      	bne.n	8003d92 <_dtoa_r+0xa52>
 8003de2:	2339      	movs	r3, #57	; 0x39
 8003de4:	f88b 3000 	strb.w	r3, [fp]
 8003de8:	462b      	mov	r3, r5
 8003dea:	461d      	mov	r5, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003df2:	2a39      	cmp	r2, #57	; 0x39
 8003df4:	d071      	beq.n	8003eda <_dtoa_r+0xb9a>
 8003df6:	3201      	adds	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e746      	b.n	8003c8a <_dtoa_r+0x94a>
 8003dfc:	2a00      	cmp	r2, #0
 8003dfe:	dd07      	ble.n	8003e10 <_dtoa_r+0xad0>
 8003e00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003e04:	d0ed      	beq.n	8003de2 <_dtoa_r+0xaa2>
 8003e06:	f10a 0301 	add.w	r3, sl, #1
 8003e0a:	f88b 3000 	strb.w	r3, [fp]
 8003e0e:	e73c      	b.n	8003c8a <_dtoa_r+0x94a>
 8003e10:	9b05      	ldr	r3, [sp, #20]
 8003e12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8003e16:	4599      	cmp	r9, r3
 8003e18:	d047      	beq.n	8003eaa <_dtoa_r+0xb6a>
 8003e1a:	ee18 1a10 	vmov	r1, s16
 8003e1e:	2300      	movs	r3, #0
 8003e20:	220a      	movs	r2, #10
 8003e22:	4620      	mov	r0, r4
 8003e24:	f000 fb16 	bl	8004454 <__multadd>
 8003e28:	45b8      	cmp	r8, r7
 8003e2a:	ee08 0a10 	vmov	s16, r0
 8003e2e:	f04f 0300 	mov.w	r3, #0
 8003e32:	f04f 020a 	mov.w	r2, #10
 8003e36:	4641      	mov	r1, r8
 8003e38:	4620      	mov	r0, r4
 8003e3a:	d106      	bne.n	8003e4a <_dtoa_r+0xb0a>
 8003e3c:	f000 fb0a 	bl	8004454 <__multadd>
 8003e40:	4680      	mov	r8, r0
 8003e42:	4607      	mov	r7, r0
 8003e44:	f109 0901 	add.w	r9, r9, #1
 8003e48:	e772      	b.n	8003d30 <_dtoa_r+0x9f0>
 8003e4a:	f000 fb03 	bl	8004454 <__multadd>
 8003e4e:	4639      	mov	r1, r7
 8003e50:	4680      	mov	r8, r0
 8003e52:	2300      	movs	r3, #0
 8003e54:	220a      	movs	r2, #10
 8003e56:	4620      	mov	r0, r4
 8003e58:	f000 fafc 	bl	8004454 <__multadd>
 8003e5c:	4607      	mov	r7, r0
 8003e5e:	e7f1      	b.n	8003e44 <_dtoa_r+0xb04>
 8003e60:	9b03      	ldr	r3, [sp, #12]
 8003e62:	9302      	str	r3, [sp, #8]
 8003e64:	9d01      	ldr	r5, [sp, #4]
 8003e66:	ee18 0a10 	vmov	r0, s16
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	f7ff f9dd 	bl	800322a <quorem>
 8003e70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003e74:	9b01      	ldr	r3, [sp, #4]
 8003e76:	f805 ab01 	strb.w	sl, [r5], #1
 8003e7a:	1aea      	subs	r2, r5, r3
 8003e7c:	9b02      	ldr	r3, [sp, #8]
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	dd09      	ble.n	8003e96 <_dtoa_r+0xb56>
 8003e82:	ee18 1a10 	vmov	r1, s16
 8003e86:	2300      	movs	r3, #0
 8003e88:	220a      	movs	r2, #10
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 fae2 	bl	8004454 <__multadd>
 8003e90:	ee08 0a10 	vmov	s16, r0
 8003e94:	e7e7      	b.n	8003e66 <_dtoa_r+0xb26>
 8003e96:	9b02      	ldr	r3, [sp, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bfc8      	it	gt
 8003e9c:	461d      	movgt	r5, r3
 8003e9e:	9b01      	ldr	r3, [sp, #4]
 8003ea0:	bfd8      	it	le
 8003ea2:	2501      	movle	r5, #1
 8003ea4:	441d      	add	r5, r3
 8003ea6:	f04f 0800 	mov.w	r8, #0
 8003eaa:	ee18 1a10 	vmov	r1, s16
 8003eae:	2201      	movs	r2, #1
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f000 fc7f 	bl	80047b4 <__lshift>
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	ee08 0a10 	vmov	s16, r0
 8003ebc:	f000 fcea 	bl	8004894 <__mcmp>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	dc91      	bgt.n	8003de8 <_dtoa_r+0xaa8>
 8003ec4:	d102      	bne.n	8003ecc <_dtoa_r+0xb8c>
 8003ec6:	f01a 0f01 	tst.w	sl, #1
 8003eca:	d18d      	bne.n	8003de8 <_dtoa_r+0xaa8>
 8003ecc:	462b      	mov	r3, r5
 8003ece:	461d      	mov	r5, r3
 8003ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003ed4:	2a30      	cmp	r2, #48	; 0x30
 8003ed6:	d0fa      	beq.n	8003ece <_dtoa_r+0xb8e>
 8003ed8:	e6d7      	b.n	8003c8a <_dtoa_r+0x94a>
 8003eda:	9a01      	ldr	r2, [sp, #4]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d184      	bne.n	8003dea <_dtoa_r+0xaaa>
 8003ee0:	9b00      	ldr	r3, [sp, #0]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	2331      	movs	r3, #49	; 0x31
 8003ee8:	7013      	strb	r3, [r2, #0]
 8003eea:	e6ce      	b.n	8003c8a <_dtoa_r+0x94a>
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <_dtoa_r+0xbd4>)
 8003eee:	f7ff ba95 	b.w	800341c <_dtoa_r+0xdc>
 8003ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f47f aa6e 	bne.w	80033d6 <_dtoa_r+0x96>
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <_dtoa_r+0xbd8>)
 8003efc:	f7ff ba8e 	b.w	800341c <_dtoa_r+0xdc>
 8003f00:	9b02      	ldr	r3, [sp, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	dcae      	bgt.n	8003e64 <_dtoa_r+0xb24>
 8003f06:	9b06      	ldr	r3, [sp, #24]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	f73f aea8 	bgt.w	8003c5e <_dtoa_r+0x91e>
 8003f0e:	e7a9      	b.n	8003e64 <_dtoa_r+0xb24>
 8003f10:	08005044 	.word	0x08005044
 8003f14:	08004fa1 	.word	0x08004fa1
 8003f18:	08004fc5 	.word	0x08004fc5

08003f1c <__sflush_r>:
 8003f1c:	898a      	ldrh	r2, [r1, #12]
 8003f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f22:	4605      	mov	r5, r0
 8003f24:	0710      	lsls	r0, r2, #28
 8003f26:	460c      	mov	r4, r1
 8003f28:	d458      	bmi.n	8003fdc <__sflush_r+0xc0>
 8003f2a:	684b      	ldr	r3, [r1, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	dc05      	bgt.n	8003f3c <__sflush_r+0x20>
 8003f30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	dc02      	bgt.n	8003f3c <__sflush_r+0x20>
 8003f36:	2000      	movs	r0, #0
 8003f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f3e:	2e00      	cmp	r6, #0
 8003f40:	d0f9      	beq.n	8003f36 <__sflush_r+0x1a>
 8003f42:	2300      	movs	r3, #0
 8003f44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f48:	682f      	ldr	r7, [r5, #0]
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	d032      	beq.n	8003fb4 <__sflush_r+0x98>
 8003f4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	075a      	lsls	r2, r3, #29
 8003f54:	d505      	bpl.n	8003f62 <__sflush_r+0x46>
 8003f56:	6863      	ldr	r3, [r4, #4]
 8003f58:	1ac0      	subs	r0, r0, r3
 8003f5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f5c:	b10b      	cbz	r3, 8003f62 <__sflush_r+0x46>
 8003f5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f60:	1ac0      	subs	r0, r0, r3
 8003f62:	2300      	movs	r3, #0
 8003f64:	4602      	mov	r2, r0
 8003f66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f68:	6a21      	ldr	r1, [r4, #32]
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	47b0      	blx	r6
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	d106      	bne.n	8003f82 <__sflush_r+0x66>
 8003f74:	6829      	ldr	r1, [r5, #0]
 8003f76:	291d      	cmp	r1, #29
 8003f78:	d82c      	bhi.n	8003fd4 <__sflush_r+0xb8>
 8003f7a:	4a2a      	ldr	r2, [pc, #168]	; (8004024 <__sflush_r+0x108>)
 8003f7c:	40ca      	lsrs	r2, r1
 8003f7e:	07d6      	lsls	r6, r2, #31
 8003f80:	d528      	bpl.n	8003fd4 <__sflush_r+0xb8>
 8003f82:	2200      	movs	r2, #0
 8003f84:	6062      	str	r2, [r4, #4]
 8003f86:	04d9      	lsls	r1, r3, #19
 8003f88:	6922      	ldr	r2, [r4, #16]
 8003f8a:	6022      	str	r2, [r4, #0]
 8003f8c:	d504      	bpl.n	8003f98 <__sflush_r+0x7c>
 8003f8e:	1c42      	adds	r2, r0, #1
 8003f90:	d101      	bne.n	8003f96 <__sflush_r+0x7a>
 8003f92:	682b      	ldr	r3, [r5, #0]
 8003f94:	b903      	cbnz	r3, 8003f98 <__sflush_r+0x7c>
 8003f96:	6560      	str	r0, [r4, #84]	; 0x54
 8003f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f9a:	602f      	str	r7, [r5, #0]
 8003f9c:	2900      	cmp	r1, #0
 8003f9e:	d0ca      	beq.n	8003f36 <__sflush_r+0x1a>
 8003fa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	d002      	beq.n	8003fae <__sflush_r+0x92>
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 fd8b 	bl	8004ac4 <_free_r>
 8003fae:	2000      	movs	r0, #0
 8003fb0:	6360      	str	r0, [r4, #52]	; 0x34
 8003fb2:	e7c1      	b.n	8003f38 <__sflush_r+0x1c>
 8003fb4:	6a21      	ldr	r1, [r4, #32]
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	4628      	mov	r0, r5
 8003fba:	47b0      	blx	r6
 8003fbc:	1c41      	adds	r1, r0, #1
 8003fbe:	d1c7      	bne.n	8003f50 <__sflush_r+0x34>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0c4      	beq.n	8003f50 <__sflush_r+0x34>
 8003fc6:	2b1d      	cmp	r3, #29
 8003fc8:	d001      	beq.n	8003fce <__sflush_r+0xb2>
 8003fca:	2b16      	cmp	r3, #22
 8003fcc:	d101      	bne.n	8003fd2 <__sflush_r+0xb6>
 8003fce:	602f      	str	r7, [r5, #0]
 8003fd0:	e7b1      	b.n	8003f36 <__sflush_r+0x1a>
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd8:	81a3      	strh	r3, [r4, #12]
 8003fda:	e7ad      	b.n	8003f38 <__sflush_r+0x1c>
 8003fdc:	690f      	ldr	r7, [r1, #16]
 8003fde:	2f00      	cmp	r7, #0
 8003fe0:	d0a9      	beq.n	8003f36 <__sflush_r+0x1a>
 8003fe2:	0793      	lsls	r3, r2, #30
 8003fe4:	680e      	ldr	r6, [r1, #0]
 8003fe6:	bf08      	it	eq
 8003fe8:	694b      	ldreq	r3, [r1, #20]
 8003fea:	600f      	str	r7, [r1, #0]
 8003fec:	bf18      	it	ne
 8003fee:	2300      	movne	r3, #0
 8003ff0:	eba6 0807 	sub.w	r8, r6, r7
 8003ff4:	608b      	str	r3, [r1, #8]
 8003ff6:	f1b8 0f00 	cmp.w	r8, #0
 8003ffa:	dd9c      	ble.n	8003f36 <__sflush_r+0x1a>
 8003ffc:	6a21      	ldr	r1, [r4, #32]
 8003ffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004000:	4643      	mov	r3, r8
 8004002:	463a      	mov	r2, r7
 8004004:	4628      	mov	r0, r5
 8004006:	47b0      	blx	r6
 8004008:	2800      	cmp	r0, #0
 800400a:	dc06      	bgt.n	800401a <__sflush_r+0xfe>
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004018:	e78e      	b.n	8003f38 <__sflush_r+0x1c>
 800401a:	4407      	add	r7, r0
 800401c:	eba8 0800 	sub.w	r8, r8, r0
 8004020:	e7e9      	b.n	8003ff6 <__sflush_r+0xda>
 8004022:	bf00      	nop
 8004024:	20400001 	.word	0x20400001

08004028 <_fflush_r>:
 8004028:	b538      	push	{r3, r4, r5, lr}
 800402a:	690b      	ldr	r3, [r1, #16]
 800402c:	4605      	mov	r5, r0
 800402e:	460c      	mov	r4, r1
 8004030:	b913      	cbnz	r3, 8004038 <_fflush_r+0x10>
 8004032:	2500      	movs	r5, #0
 8004034:	4628      	mov	r0, r5
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	b118      	cbz	r0, 8004042 <_fflush_r+0x1a>
 800403a:	6983      	ldr	r3, [r0, #24]
 800403c:	b90b      	cbnz	r3, 8004042 <_fflush_r+0x1a>
 800403e:	f000 f887 	bl	8004150 <__sinit>
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <_fflush_r+0x6c>)
 8004044:	429c      	cmp	r4, r3
 8004046:	d11b      	bne.n	8004080 <_fflush_r+0x58>
 8004048:	686c      	ldr	r4, [r5, #4]
 800404a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ef      	beq.n	8004032 <_fflush_r+0xa>
 8004052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004054:	07d0      	lsls	r0, r2, #31
 8004056:	d404      	bmi.n	8004062 <_fflush_r+0x3a>
 8004058:	0599      	lsls	r1, r3, #22
 800405a:	d402      	bmi.n	8004062 <_fflush_r+0x3a>
 800405c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800405e:	f000 f91a 	bl	8004296 <__retarget_lock_acquire_recursive>
 8004062:	4628      	mov	r0, r5
 8004064:	4621      	mov	r1, r4
 8004066:	f7ff ff59 	bl	8003f1c <__sflush_r>
 800406a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800406c:	07da      	lsls	r2, r3, #31
 800406e:	4605      	mov	r5, r0
 8004070:	d4e0      	bmi.n	8004034 <_fflush_r+0xc>
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	059b      	lsls	r3, r3, #22
 8004076:	d4dd      	bmi.n	8004034 <_fflush_r+0xc>
 8004078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800407a:	f000 f90d 	bl	8004298 <__retarget_lock_release_recursive>
 800407e:	e7d9      	b.n	8004034 <_fflush_r+0xc>
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <_fflush_r+0x70>)
 8004082:	429c      	cmp	r4, r3
 8004084:	d101      	bne.n	800408a <_fflush_r+0x62>
 8004086:	68ac      	ldr	r4, [r5, #8]
 8004088:	e7df      	b.n	800404a <_fflush_r+0x22>
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <_fflush_r+0x74>)
 800408c:	429c      	cmp	r4, r3
 800408e:	bf08      	it	eq
 8004090:	68ec      	ldreq	r4, [r5, #12]
 8004092:	e7da      	b.n	800404a <_fflush_r+0x22>
 8004094:	08005078 	.word	0x08005078
 8004098:	08005098 	.word	0x08005098
 800409c:	08005058 	.word	0x08005058

080040a0 <std>:
 80040a0:	2300      	movs	r3, #0
 80040a2:	b510      	push	{r4, lr}
 80040a4:	4604      	mov	r4, r0
 80040a6:	e9c0 3300 	strd	r3, r3, [r0]
 80040aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040ae:	6083      	str	r3, [r0, #8]
 80040b0:	8181      	strh	r1, [r0, #12]
 80040b2:	6643      	str	r3, [r0, #100]	; 0x64
 80040b4:	81c2      	strh	r2, [r0, #14]
 80040b6:	6183      	str	r3, [r0, #24]
 80040b8:	4619      	mov	r1, r3
 80040ba:	2208      	movs	r2, #8
 80040bc:	305c      	adds	r0, #92	; 0x5c
 80040be:	f7fe fa21 	bl	8002504 <memset>
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <std+0x38>)
 80040c4:	6263      	str	r3, [r4, #36]	; 0x24
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <std+0x3c>)
 80040c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <std+0x40>)
 80040cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <std+0x44>)
 80040d0:	6224      	str	r4, [r4, #32]
 80040d2:	6323      	str	r3, [r4, #48]	; 0x30
 80040d4:	bd10      	pop	{r4, pc}
 80040d6:	bf00      	nop
 80040d8:	08004d2d 	.word	0x08004d2d
 80040dc:	08004d4f 	.word	0x08004d4f
 80040e0:	08004d87 	.word	0x08004d87
 80040e4:	08004dab 	.word	0x08004dab

080040e8 <_cleanup_r>:
 80040e8:	4901      	ldr	r1, [pc, #4]	; (80040f0 <_cleanup_r+0x8>)
 80040ea:	f000 b8af 	b.w	800424c <_fwalk_reent>
 80040ee:	bf00      	nop
 80040f0:	08004029 	.word	0x08004029

080040f4 <__sfmoreglue>:
 80040f4:	b570      	push	{r4, r5, r6, lr}
 80040f6:	2268      	movs	r2, #104	; 0x68
 80040f8:	1e4d      	subs	r5, r1, #1
 80040fa:	4355      	muls	r5, r2
 80040fc:	460e      	mov	r6, r1
 80040fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004102:	f000 fd4b 	bl	8004b9c <_malloc_r>
 8004106:	4604      	mov	r4, r0
 8004108:	b140      	cbz	r0, 800411c <__sfmoreglue+0x28>
 800410a:	2100      	movs	r1, #0
 800410c:	e9c0 1600 	strd	r1, r6, [r0]
 8004110:	300c      	adds	r0, #12
 8004112:	60a0      	str	r0, [r4, #8]
 8004114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004118:	f7fe f9f4 	bl	8002504 <memset>
 800411c:	4620      	mov	r0, r4
 800411e:	bd70      	pop	{r4, r5, r6, pc}

08004120 <__sfp_lock_acquire>:
 8004120:	4801      	ldr	r0, [pc, #4]	; (8004128 <__sfp_lock_acquire+0x8>)
 8004122:	f000 b8b8 	b.w	8004296 <__retarget_lock_acquire_recursive>
 8004126:	bf00      	nop
 8004128:	20000225 	.word	0x20000225

0800412c <__sfp_lock_release>:
 800412c:	4801      	ldr	r0, [pc, #4]	; (8004134 <__sfp_lock_release+0x8>)
 800412e:	f000 b8b3 	b.w	8004298 <__retarget_lock_release_recursive>
 8004132:	bf00      	nop
 8004134:	20000225 	.word	0x20000225

08004138 <__sinit_lock_acquire>:
 8004138:	4801      	ldr	r0, [pc, #4]	; (8004140 <__sinit_lock_acquire+0x8>)
 800413a:	f000 b8ac 	b.w	8004296 <__retarget_lock_acquire_recursive>
 800413e:	bf00      	nop
 8004140:	20000226 	.word	0x20000226

08004144 <__sinit_lock_release>:
 8004144:	4801      	ldr	r0, [pc, #4]	; (800414c <__sinit_lock_release+0x8>)
 8004146:	f000 b8a7 	b.w	8004298 <__retarget_lock_release_recursive>
 800414a:	bf00      	nop
 800414c:	20000226 	.word	0x20000226

08004150 <__sinit>:
 8004150:	b510      	push	{r4, lr}
 8004152:	4604      	mov	r4, r0
 8004154:	f7ff fff0 	bl	8004138 <__sinit_lock_acquire>
 8004158:	69a3      	ldr	r3, [r4, #24]
 800415a:	b11b      	cbz	r3, 8004164 <__sinit+0x14>
 800415c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004160:	f7ff bff0 	b.w	8004144 <__sinit_lock_release>
 8004164:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004168:	6523      	str	r3, [r4, #80]	; 0x50
 800416a:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <__sinit+0x68>)
 800416c:	4a13      	ldr	r2, [pc, #76]	; (80041bc <__sinit+0x6c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	62a2      	str	r2, [r4, #40]	; 0x28
 8004172:	42a3      	cmp	r3, r4
 8004174:	bf04      	itt	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	61a3      	streq	r3, [r4, #24]
 800417a:	4620      	mov	r0, r4
 800417c:	f000 f820 	bl	80041c0 <__sfp>
 8004180:	6060      	str	r0, [r4, #4]
 8004182:	4620      	mov	r0, r4
 8004184:	f000 f81c 	bl	80041c0 <__sfp>
 8004188:	60a0      	str	r0, [r4, #8]
 800418a:	4620      	mov	r0, r4
 800418c:	f000 f818 	bl	80041c0 <__sfp>
 8004190:	2200      	movs	r2, #0
 8004192:	60e0      	str	r0, [r4, #12]
 8004194:	2104      	movs	r1, #4
 8004196:	6860      	ldr	r0, [r4, #4]
 8004198:	f7ff ff82 	bl	80040a0 <std>
 800419c:	68a0      	ldr	r0, [r4, #8]
 800419e:	2201      	movs	r2, #1
 80041a0:	2109      	movs	r1, #9
 80041a2:	f7ff ff7d 	bl	80040a0 <std>
 80041a6:	68e0      	ldr	r0, [r4, #12]
 80041a8:	2202      	movs	r2, #2
 80041aa:	2112      	movs	r1, #18
 80041ac:	f7ff ff78 	bl	80040a0 <std>
 80041b0:	2301      	movs	r3, #1
 80041b2:	61a3      	str	r3, [r4, #24]
 80041b4:	e7d2      	b.n	800415c <__sinit+0xc>
 80041b6:	bf00      	nop
 80041b8:	08004f7c 	.word	0x08004f7c
 80041bc:	080040e9 	.word	0x080040e9

080041c0 <__sfp>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	4607      	mov	r7, r0
 80041c4:	f7ff ffac 	bl	8004120 <__sfp_lock_acquire>
 80041c8:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <__sfp+0x84>)
 80041ca:	681e      	ldr	r6, [r3, #0]
 80041cc:	69b3      	ldr	r3, [r6, #24]
 80041ce:	b913      	cbnz	r3, 80041d6 <__sfp+0x16>
 80041d0:	4630      	mov	r0, r6
 80041d2:	f7ff ffbd 	bl	8004150 <__sinit>
 80041d6:	3648      	adds	r6, #72	; 0x48
 80041d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041dc:	3b01      	subs	r3, #1
 80041de:	d503      	bpl.n	80041e8 <__sfp+0x28>
 80041e0:	6833      	ldr	r3, [r6, #0]
 80041e2:	b30b      	cbz	r3, 8004228 <__sfp+0x68>
 80041e4:	6836      	ldr	r6, [r6, #0]
 80041e6:	e7f7      	b.n	80041d8 <__sfp+0x18>
 80041e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041ec:	b9d5      	cbnz	r5, 8004224 <__sfp+0x64>
 80041ee:	4b16      	ldr	r3, [pc, #88]	; (8004248 <__sfp+0x88>)
 80041f0:	60e3      	str	r3, [r4, #12]
 80041f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041f6:	6665      	str	r5, [r4, #100]	; 0x64
 80041f8:	f000 f84c 	bl	8004294 <__retarget_lock_init_recursive>
 80041fc:	f7ff ff96 	bl	800412c <__sfp_lock_release>
 8004200:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004204:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004208:	6025      	str	r5, [r4, #0]
 800420a:	61a5      	str	r5, [r4, #24]
 800420c:	2208      	movs	r2, #8
 800420e:	4629      	mov	r1, r5
 8004210:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004214:	f7fe f976 	bl	8002504 <memset>
 8004218:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800421c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004220:	4620      	mov	r0, r4
 8004222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004224:	3468      	adds	r4, #104	; 0x68
 8004226:	e7d9      	b.n	80041dc <__sfp+0x1c>
 8004228:	2104      	movs	r1, #4
 800422a:	4638      	mov	r0, r7
 800422c:	f7ff ff62 	bl	80040f4 <__sfmoreglue>
 8004230:	4604      	mov	r4, r0
 8004232:	6030      	str	r0, [r6, #0]
 8004234:	2800      	cmp	r0, #0
 8004236:	d1d5      	bne.n	80041e4 <__sfp+0x24>
 8004238:	f7ff ff78 	bl	800412c <__sfp_lock_release>
 800423c:	230c      	movs	r3, #12
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	e7ee      	b.n	8004220 <__sfp+0x60>
 8004242:	bf00      	nop
 8004244:	08004f7c 	.word	0x08004f7c
 8004248:	ffff0001 	.word	0xffff0001

0800424c <_fwalk_reent>:
 800424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004250:	4606      	mov	r6, r0
 8004252:	4688      	mov	r8, r1
 8004254:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004258:	2700      	movs	r7, #0
 800425a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800425e:	f1b9 0901 	subs.w	r9, r9, #1
 8004262:	d505      	bpl.n	8004270 <_fwalk_reent+0x24>
 8004264:	6824      	ldr	r4, [r4, #0]
 8004266:	2c00      	cmp	r4, #0
 8004268:	d1f7      	bne.n	800425a <_fwalk_reent+0xe>
 800426a:	4638      	mov	r0, r7
 800426c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004270:	89ab      	ldrh	r3, [r5, #12]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d907      	bls.n	8004286 <_fwalk_reent+0x3a>
 8004276:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800427a:	3301      	adds	r3, #1
 800427c:	d003      	beq.n	8004286 <_fwalk_reent+0x3a>
 800427e:	4629      	mov	r1, r5
 8004280:	4630      	mov	r0, r6
 8004282:	47c0      	blx	r8
 8004284:	4307      	orrs	r7, r0
 8004286:	3568      	adds	r5, #104	; 0x68
 8004288:	e7e9      	b.n	800425e <_fwalk_reent+0x12>
	...

0800428c <_localeconv_r>:
 800428c:	4800      	ldr	r0, [pc, #0]	; (8004290 <_localeconv_r+0x4>)
 800428e:	4770      	bx	lr
 8004290:	20000160 	.word	0x20000160

08004294 <__retarget_lock_init_recursive>:
 8004294:	4770      	bx	lr

08004296 <__retarget_lock_acquire_recursive>:
 8004296:	4770      	bx	lr

08004298 <__retarget_lock_release_recursive>:
 8004298:	4770      	bx	lr

0800429a <__swhatbuf_r>:
 800429a:	b570      	push	{r4, r5, r6, lr}
 800429c:	460e      	mov	r6, r1
 800429e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042a2:	2900      	cmp	r1, #0
 80042a4:	b096      	sub	sp, #88	; 0x58
 80042a6:	4614      	mov	r4, r2
 80042a8:	461d      	mov	r5, r3
 80042aa:	da08      	bge.n	80042be <__swhatbuf_r+0x24>
 80042ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	602a      	str	r2, [r5, #0]
 80042b4:	061a      	lsls	r2, r3, #24
 80042b6:	d410      	bmi.n	80042da <__swhatbuf_r+0x40>
 80042b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042bc:	e00e      	b.n	80042dc <__swhatbuf_r+0x42>
 80042be:	466a      	mov	r2, sp
 80042c0:	f000 fd9a 	bl	8004df8 <_fstat_r>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	dbf1      	blt.n	80042ac <__swhatbuf_r+0x12>
 80042c8:	9a01      	ldr	r2, [sp, #4]
 80042ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042d2:	425a      	negs	r2, r3
 80042d4:	415a      	adcs	r2, r3
 80042d6:	602a      	str	r2, [r5, #0]
 80042d8:	e7ee      	b.n	80042b8 <__swhatbuf_r+0x1e>
 80042da:	2340      	movs	r3, #64	; 0x40
 80042dc:	2000      	movs	r0, #0
 80042de:	6023      	str	r3, [r4, #0]
 80042e0:	b016      	add	sp, #88	; 0x58
 80042e2:	bd70      	pop	{r4, r5, r6, pc}

080042e4 <__smakebuf_r>:
 80042e4:	898b      	ldrh	r3, [r1, #12]
 80042e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042e8:	079d      	lsls	r5, r3, #30
 80042ea:	4606      	mov	r6, r0
 80042ec:	460c      	mov	r4, r1
 80042ee:	d507      	bpl.n	8004300 <__smakebuf_r+0x1c>
 80042f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	6123      	str	r3, [r4, #16]
 80042f8:	2301      	movs	r3, #1
 80042fa:	6163      	str	r3, [r4, #20]
 80042fc:	b002      	add	sp, #8
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	ab01      	add	r3, sp, #4
 8004302:	466a      	mov	r2, sp
 8004304:	f7ff ffc9 	bl	800429a <__swhatbuf_r>
 8004308:	9900      	ldr	r1, [sp, #0]
 800430a:	4605      	mov	r5, r0
 800430c:	4630      	mov	r0, r6
 800430e:	f000 fc45 	bl	8004b9c <_malloc_r>
 8004312:	b948      	cbnz	r0, 8004328 <__smakebuf_r+0x44>
 8004314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004318:	059a      	lsls	r2, r3, #22
 800431a:	d4ef      	bmi.n	80042fc <__smakebuf_r+0x18>
 800431c:	f023 0303 	bic.w	r3, r3, #3
 8004320:	f043 0302 	orr.w	r3, r3, #2
 8004324:	81a3      	strh	r3, [r4, #12]
 8004326:	e7e3      	b.n	80042f0 <__smakebuf_r+0xc>
 8004328:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <__smakebuf_r+0x7c>)
 800432a:	62b3      	str	r3, [r6, #40]	; 0x28
 800432c:	89a3      	ldrh	r3, [r4, #12]
 800432e:	6020      	str	r0, [r4, #0]
 8004330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	9b00      	ldr	r3, [sp, #0]
 8004338:	6163      	str	r3, [r4, #20]
 800433a:	9b01      	ldr	r3, [sp, #4]
 800433c:	6120      	str	r0, [r4, #16]
 800433e:	b15b      	cbz	r3, 8004358 <__smakebuf_r+0x74>
 8004340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004344:	4630      	mov	r0, r6
 8004346:	f000 fd69 	bl	8004e1c <_isatty_r>
 800434a:	b128      	cbz	r0, 8004358 <__smakebuf_r+0x74>
 800434c:	89a3      	ldrh	r3, [r4, #12]
 800434e:	f023 0303 	bic.w	r3, r3, #3
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	81a3      	strh	r3, [r4, #12]
 8004358:	89a0      	ldrh	r0, [r4, #12]
 800435a:	4305      	orrs	r5, r0
 800435c:	81a5      	strh	r5, [r4, #12]
 800435e:	e7cd      	b.n	80042fc <__smakebuf_r+0x18>
 8004360:	080040e9 	.word	0x080040e9

08004364 <malloc>:
 8004364:	4b02      	ldr	r3, [pc, #8]	; (8004370 <malloc+0xc>)
 8004366:	4601      	mov	r1, r0
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f000 bc17 	b.w	8004b9c <_malloc_r>
 800436e:	bf00      	nop
 8004370:	2000000c 	.word	0x2000000c

08004374 <memcpy>:
 8004374:	440a      	add	r2, r1
 8004376:	4291      	cmp	r1, r2
 8004378:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800437c:	d100      	bne.n	8004380 <memcpy+0xc>
 800437e:	4770      	bx	lr
 8004380:	b510      	push	{r4, lr}
 8004382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800438a:	4291      	cmp	r1, r2
 800438c:	d1f9      	bne.n	8004382 <memcpy+0xe>
 800438e:	bd10      	pop	{r4, pc}

08004390 <_Balloc>:
 8004390:	b570      	push	{r4, r5, r6, lr}
 8004392:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004394:	4604      	mov	r4, r0
 8004396:	460d      	mov	r5, r1
 8004398:	b976      	cbnz	r6, 80043b8 <_Balloc+0x28>
 800439a:	2010      	movs	r0, #16
 800439c:	f7ff ffe2 	bl	8004364 <malloc>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6260      	str	r0, [r4, #36]	; 0x24
 80043a4:	b920      	cbnz	r0, 80043b0 <_Balloc+0x20>
 80043a6:	4b18      	ldr	r3, [pc, #96]	; (8004408 <_Balloc+0x78>)
 80043a8:	4818      	ldr	r0, [pc, #96]	; (800440c <_Balloc+0x7c>)
 80043aa:	2166      	movs	r1, #102	; 0x66
 80043ac:	f7fe f850 	bl	8002450 <__assert_func>
 80043b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80043b4:	6006      	str	r6, [r0, #0]
 80043b6:	60c6      	str	r6, [r0, #12]
 80043b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80043ba:	68f3      	ldr	r3, [r6, #12]
 80043bc:	b183      	cbz	r3, 80043e0 <_Balloc+0x50>
 80043be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80043c6:	b9b8      	cbnz	r0, 80043f8 <_Balloc+0x68>
 80043c8:	2101      	movs	r1, #1
 80043ca:	fa01 f605 	lsl.w	r6, r1, r5
 80043ce:	1d72      	adds	r2, r6, #5
 80043d0:	0092      	lsls	r2, r2, #2
 80043d2:	4620      	mov	r0, r4
 80043d4:	f000 fb60 	bl	8004a98 <_calloc_r>
 80043d8:	b160      	cbz	r0, 80043f4 <_Balloc+0x64>
 80043da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80043de:	e00e      	b.n	80043fe <_Balloc+0x6e>
 80043e0:	2221      	movs	r2, #33	; 0x21
 80043e2:	2104      	movs	r1, #4
 80043e4:	4620      	mov	r0, r4
 80043e6:	f000 fb57 	bl	8004a98 <_calloc_r>
 80043ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043ec:	60f0      	str	r0, [r6, #12]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e4      	bne.n	80043be <_Balloc+0x2e>
 80043f4:	2000      	movs	r0, #0
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	6802      	ldr	r2, [r0, #0]
 80043fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80043fe:	2300      	movs	r3, #0
 8004400:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004404:	e7f7      	b.n	80043f6 <_Balloc+0x66>
 8004406:	bf00      	nop
 8004408:	08004fd2 	.word	0x08004fd2
 800440c:	080050b8 	.word	0x080050b8

08004410 <_Bfree>:
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004414:	4605      	mov	r5, r0
 8004416:	460c      	mov	r4, r1
 8004418:	b976      	cbnz	r6, 8004438 <_Bfree+0x28>
 800441a:	2010      	movs	r0, #16
 800441c:	f7ff ffa2 	bl	8004364 <malloc>
 8004420:	4602      	mov	r2, r0
 8004422:	6268      	str	r0, [r5, #36]	; 0x24
 8004424:	b920      	cbnz	r0, 8004430 <_Bfree+0x20>
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <_Bfree+0x3c>)
 8004428:	4809      	ldr	r0, [pc, #36]	; (8004450 <_Bfree+0x40>)
 800442a:	218a      	movs	r1, #138	; 0x8a
 800442c:	f7fe f810 	bl	8002450 <__assert_func>
 8004430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004434:	6006      	str	r6, [r0, #0]
 8004436:	60c6      	str	r6, [r0, #12]
 8004438:	b13c      	cbz	r4, 800444a <_Bfree+0x3a>
 800443a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800443c:	6862      	ldr	r2, [r4, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004444:	6021      	str	r1, [r4, #0]
 8004446:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	08004fd2 	.word	0x08004fd2
 8004450:	080050b8 	.word	0x080050b8

08004454 <__multadd>:
 8004454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004458:	690d      	ldr	r5, [r1, #16]
 800445a:	4607      	mov	r7, r0
 800445c:	460c      	mov	r4, r1
 800445e:	461e      	mov	r6, r3
 8004460:	f101 0c14 	add.w	ip, r1, #20
 8004464:	2000      	movs	r0, #0
 8004466:	f8dc 3000 	ldr.w	r3, [ip]
 800446a:	b299      	uxth	r1, r3
 800446c:	fb02 6101 	mla	r1, r2, r1, r6
 8004470:	0c1e      	lsrs	r6, r3, #16
 8004472:	0c0b      	lsrs	r3, r1, #16
 8004474:	fb02 3306 	mla	r3, r2, r6, r3
 8004478:	b289      	uxth	r1, r1
 800447a:	3001      	adds	r0, #1
 800447c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004480:	4285      	cmp	r5, r0
 8004482:	f84c 1b04 	str.w	r1, [ip], #4
 8004486:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800448a:	dcec      	bgt.n	8004466 <__multadd+0x12>
 800448c:	b30e      	cbz	r6, 80044d2 <__multadd+0x7e>
 800448e:	68a3      	ldr	r3, [r4, #8]
 8004490:	42ab      	cmp	r3, r5
 8004492:	dc19      	bgt.n	80044c8 <__multadd+0x74>
 8004494:	6861      	ldr	r1, [r4, #4]
 8004496:	4638      	mov	r0, r7
 8004498:	3101      	adds	r1, #1
 800449a:	f7ff ff79 	bl	8004390 <_Balloc>
 800449e:	4680      	mov	r8, r0
 80044a0:	b928      	cbnz	r0, 80044ae <__multadd+0x5a>
 80044a2:	4602      	mov	r2, r0
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <__multadd+0x84>)
 80044a6:	480d      	ldr	r0, [pc, #52]	; (80044dc <__multadd+0x88>)
 80044a8:	21b5      	movs	r1, #181	; 0xb5
 80044aa:	f7fd ffd1 	bl	8002450 <__assert_func>
 80044ae:	6922      	ldr	r2, [r4, #16]
 80044b0:	3202      	adds	r2, #2
 80044b2:	f104 010c 	add.w	r1, r4, #12
 80044b6:	0092      	lsls	r2, r2, #2
 80044b8:	300c      	adds	r0, #12
 80044ba:	f7ff ff5b 	bl	8004374 <memcpy>
 80044be:	4621      	mov	r1, r4
 80044c0:	4638      	mov	r0, r7
 80044c2:	f7ff ffa5 	bl	8004410 <_Bfree>
 80044c6:	4644      	mov	r4, r8
 80044c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80044cc:	3501      	adds	r5, #1
 80044ce:	615e      	str	r6, [r3, #20]
 80044d0:	6125      	str	r5, [r4, #16]
 80044d2:	4620      	mov	r0, r4
 80044d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d8:	08005044 	.word	0x08005044
 80044dc:	080050b8 	.word	0x080050b8

080044e0 <__hi0bits>:
 80044e0:	0c03      	lsrs	r3, r0, #16
 80044e2:	041b      	lsls	r3, r3, #16
 80044e4:	b9d3      	cbnz	r3, 800451c <__hi0bits+0x3c>
 80044e6:	0400      	lsls	r0, r0, #16
 80044e8:	2310      	movs	r3, #16
 80044ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80044ee:	bf04      	itt	eq
 80044f0:	0200      	lsleq	r0, r0, #8
 80044f2:	3308      	addeq	r3, #8
 80044f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80044f8:	bf04      	itt	eq
 80044fa:	0100      	lsleq	r0, r0, #4
 80044fc:	3304      	addeq	r3, #4
 80044fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004502:	bf04      	itt	eq
 8004504:	0080      	lsleq	r0, r0, #2
 8004506:	3302      	addeq	r3, #2
 8004508:	2800      	cmp	r0, #0
 800450a:	db05      	blt.n	8004518 <__hi0bits+0x38>
 800450c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004510:	f103 0301 	add.w	r3, r3, #1
 8004514:	bf08      	it	eq
 8004516:	2320      	moveq	r3, #32
 8004518:	4618      	mov	r0, r3
 800451a:	4770      	bx	lr
 800451c:	2300      	movs	r3, #0
 800451e:	e7e4      	b.n	80044ea <__hi0bits+0xa>

08004520 <__lo0bits>:
 8004520:	6803      	ldr	r3, [r0, #0]
 8004522:	f013 0207 	ands.w	r2, r3, #7
 8004526:	4601      	mov	r1, r0
 8004528:	d00b      	beq.n	8004542 <__lo0bits+0x22>
 800452a:	07da      	lsls	r2, r3, #31
 800452c:	d423      	bmi.n	8004576 <__lo0bits+0x56>
 800452e:	0798      	lsls	r0, r3, #30
 8004530:	bf49      	itett	mi
 8004532:	085b      	lsrmi	r3, r3, #1
 8004534:	089b      	lsrpl	r3, r3, #2
 8004536:	2001      	movmi	r0, #1
 8004538:	600b      	strmi	r3, [r1, #0]
 800453a:	bf5c      	itt	pl
 800453c:	600b      	strpl	r3, [r1, #0]
 800453e:	2002      	movpl	r0, #2
 8004540:	4770      	bx	lr
 8004542:	b298      	uxth	r0, r3
 8004544:	b9a8      	cbnz	r0, 8004572 <__lo0bits+0x52>
 8004546:	0c1b      	lsrs	r3, r3, #16
 8004548:	2010      	movs	r0, #16
 800454a:	b2da      	uxtb	r2, r3
 800454c:	b90a      	cbnz	r2, 8004552 <__lo0bits+0x32>
 800454e:	3008      	adds	r0, #8
 8004550:	0a1b      	lsrs	r3, r3, #8
 8004552:	071a      	lsls	r2, r3, #28
 8004554:	bf04      	itt	eq
 8004556:	091b      	lsreq	r3, r3, #4
 8004558:	3004      	addeq	r0, #4
 800455a:	079a      	lsls	r2, r3, #30
 800455c:	bf04      	itt	eq
 800455e:	089b      	lsreq	r3, r3, #2
 8004560:	3002      	addeq	r0, #2
 8004562:	07da      	lsls	r2, r3, #31
 8004564:	d403      	bmi.n	800456e <__lo0bits+0x4e>
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	f100 0001 	add.w	r0, r0, #1
 800456c:	d005      	beq.n	800457a <__lo0bits+0x5a>
 800456e:	600b      	str	r3, [r1, #0]
 8004570:	4770      	bx	lr
 8004572:	4610      	mov	r0, r2
 8004574:	e7e9      	b.n	800454a <__lo0bits+0x2a>
 8004576:	2000      	movs	r0, #0
 8004578:	4770      	bx	lr
 800457a:	2020      	movs	r0, #32
 800457c:	4770      	bx	lr
	...

08004580 <__i2b>:
 8004580:	b510      	push	{r4, lr}
 8004582:	460c      	mov	r4, r1
 8004584:	2101      	movs	r1, #1
 8004586:	f7ff ff03 	bl	8004390 <_Balloc>
 800458a:	4602      	mov	r2, r0
 800458c:	b928      	cbnz	r0, 800459a <__i2b+0x1a>
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <__i2b+0x24>)
 8004590:	4805      	ldr	r0, [pc, #20]	; (80045a8 <__i2b+0x28>)
 8004592:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004596:	f7fd ff5b 	bl	8002450 <__assert_func>
 800459a:	2301      	movs	r3, #1
 800459c:	6144      	str	r4, [r0, #20]
 800459e:	6103      	str	r3, [r0, #16]
 80045a0:	bd10      	pop	{r4, pc}
 80045a2:	bf00      	nop
 80045a4:	08005044 	.word	0x08005044
 80045a8:	080050b8 	.word	0x080050b8

080045ac <__multiply>:
 80045ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b0:	4691      	mov	r9, r2
 80045b2:	690a      	ldr	r2, [r1, #16]
 80045b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	bfb8      	it	lt
 80045bc:	460b      	movlt	r3, r1
 80045be:	460c      	mov	r4, r1
 80045c0:	bfbc      	itt	lt
 80045c2:	464c      	movlt	r4, r9
 80045c4:	4699      	movlt	r9, r3
 80045c6:	6927      	ldr	r7, [r4, #16]
 80045c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80045cc:	68a3      	ldr	r3, [r4, #8]
 80045ce:	6861      	ldr	r1, [r4, #4]
 80045d0:	eb07 060a 	add.w	r6, r7, sl
 80045d4:	42b3      	cmp	r3, r6
 80045d6:	b085      	sub	sp, #20
 80045d8:	bfb8      	it	lt
 80045da:	3101      	addlt	r1, #1
 80045dc:	f7ff fed8 	bl	8004390 <_Balloc>
 80045e0:	b930      	cbnz	r0, 80045f0 <__multiply+0x44>
 80045e2:	4602      	mov	r2, r0
 80045e4:	4b44      	ldr	r3, [pc, #272]	; (80046f8 <__multiply+0x14c>)
 80045e6:	4845      	ldr	r0, [pc, #276]	; (80046fc <__multiply+0x150>)
 80045e8:	f240 115d 	movw	r1, #349	; 0x15d
 80045ec:	f7fd ff30 	bl	8002450 <__assert_func>
 80045f0:	f100 0514 	add.w	r5, r0, #20
 80045f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80045f8:	462b      	mov	r3, r5
 80045fa:	2200      	movs	r2, #0
 80045fc:	4543      	cmp	r3, r8
 80045fe:	d321      	bcc.n	8004644 <__multiply+0x98>
 8004600:	f104 0314 	add.w	r3, r4, #20
 8004604:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004608:	f109 0314 	add.w	r3, r9, #20
 800460c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004610:	9202      	str	r2, [sp, #8]
 8004612:	1b3a      	subs	r2, r7, r4
 8004614:	3a15      	subs	r2, #21
 8004616:	f022 0203 	bic.w	r2, r2, #3
 800461a:	3204      	adds	r2, #4
 800461c:	f104 0115 	add.w	r1, r4, #21
 8004620:	428f      	cmp	r7, r1
 8004622:	bf38      	it	cc
 8004624:	2204      	movcc	r2, #4
 8004626:	9201      	str	r2, [sp, #4]
 8004628:	9a02      	ldr	r2, [sp, #8]
 800462a:	9303      	str	r3, [sp, #12]
 800462c:	429a      	cmp	r2, r3
 800462e:	d80c      	bhi.n	800464a <__multiply+0x9e>
 8004630:	2e00      	cmp	r6, #0
 8004632:	dd03      	ble.n	800463c <__multiply+0x90>
 8004634:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004638:	2b00      	cmp	r3, #0
 800463a:	d05a      	beq.n	80046f2 <__multiply+0x146>
 800463c:	6106      	str	r6, [r0, #16]
 800463e:	b005      	add	sp, #20
 8004640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004644:	f843 2b04 	str.w	r2, [r3], #4
 8004648:	e7d8      	b.n	80045fc <__multiply+0x50>
 800464a:	f8b3 a000 	ldrh.w	sl, [r3]
 800464e:	f1ba 0f00 	cmp.w	sl, #0
 8004652:	d024      	beq.n	800469e <__multiply+0xf2>
 8004654:	f104 0e14 	add.w	lr, r4, #20
 8004658:	46a9      	mov	r9, r5
 800465a:	f04f 0c00 	mov.w	ip, #0
 800465e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004662:	f8d9 1000 	ldr.w	r1, [r9]
 8004666:	fa1f fb82 	uxth.w	fp, r2
 800466a:	b289      	uxth	r1, r1
 800466c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004670:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004674:	f8d9 2000 	ldr.w	r2, [r9]
 8004678:	4461      	add	r1, ip
 800467a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800467e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004682:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004686:	b289      	uxth	r1, r1
 8004688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800468c:	4577      	cmp	r7, lr
 800468e:	f849 1b04 	str.w	r1, [r9], #4
 8004692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004696:	d8e2      	bhi.n	800465e <__multiply+0xb2>
 8004698:	9a01      	ldr	r2, [sp, #4]
 800469a:	f845 c002 	str.w	ip, [r5, r2]
 800469e:	9a03      	ldr	r2, [sp, #12]
 80046a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80046a4:	3304      	adds	r3, #4
 80046a6:	f1b9 0f00 	cmp.w	r9, #0
 80046aa:	d020      	beq.n	80046ee <__multiply+0x142>
 80046ac:	6829      	ldr	r1, [r5, #0]
 80046ae:	f104 0c14 	add.w	ip, r4, #20
 80046b2:	46ae      	mov	lr, r5
 80046b4:	f04f 0a00 	mov.w	sl, #0
 80046b8:	f8bc b000 	ldrh.w	fp, [ip]
 80046bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80046c0:	fb09 220b 	mla	r2, r9, fp, r2
 80046c4:	4492      	add	sl, r2
 80046c6:	b289      	uxth	r1, r1
 80046c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80046cc:	f84e 1b04 	str.w	r1, [lr], #4
 80046d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80046d4:	f8be 1000 	ldrh.w	r1, [lr]
 80046d8:	0c12      	lsrs	r2, r2, #16
 80046da:	fb09 1102 	mla	r1, r9, r2, r1
 80046de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80046e2:	4567      	cmp	r7, ip
 80046e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80046e8:	d8e6      	bhi.n	80046b8 <__multiply+0x10c>
 80046ea:	9a01      	ldr	r2, [sp, #4]
 80046ec:	50a9      	str	r1, [r5, r2]
 80046ee:	3504      	adds	r5, #4
 80046f0:	e79a      	b.n	8004628 <__multiply+0x7c>
 80046f2:	3e01      	subs	r6, #1
 80046f4:	e79c      	b.n	8004630 <__multiply+0x84>
 80046f6:	bf00      	nop
 80046f8:	08005044 	.word	0x08005044
 80046fc:	080050b8 	.word	0x080050b8

08004700 <__pow5mult>:
 8004700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004704:	4615      	mov	r5, r2
 8004706:	f012 0203 	ands.w	r2, r2, #3
 800470a:	4606      	mov	r6, r0
 800470c:	460f      	mov	r7, r1
 800470e:	d007      	beq.n	8004720 <__pow5mult+0x20>
 8004710:	4c25      	ldr	r4, [pc, #148]	; (80047a8 <__pow5mult+0xa8>)
 8004712:	3a01      	subs	r2, #1
 8004714:	2300      	movs	r3, #0
 8004716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800471a:	f7ff fe9b 	bl	8004454 <__multadd>
 800471e:	4607      	mov	r7, r0
 8004720:	10ad      	asrs	r5, r5, #2
 8004722:	d03d      	beq.n	80047a0 <__pow5mult+0xa0>
 8004724:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004726:	b97c      	cbnz	r4, 8004748 <__pow5mult+0x48>
 8004728:	2010      	movs	r0, #16
 800472a:	f7ff fe1b 	bl	8004364 <malloc>
 800472e:	4602      	mov	r2, r0
 8004730:	6270      	str	r0, [r6, #36]	; 0x24
 8004732:	b928      	cbnz	r0, 8004740 <__pow5mult+0x40>
 8004734:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <__pow5mult+0xac>)
 8004736:	481e      	ldr	r0, [pc, #120]	; (80047b0 <__pow5mult+0xb0>)
 8004738:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800473c:	f7fd fe88 	bl	8002450 <__assert_func>
 8004740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004744:	6004      	str	r4, [r0, #0]
 8004746:	60c4      	str	r4, [r0, #12]
 8004748:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800474c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004750:	b94c      	cbnz	r4, 8004766 <__pow5mult+0x66>
 8004752:	f240 2171 	movw	r1, #625	; 0x271
 8004756:	4630      	mov	r0, r6
 8004758:	f7ff ff12 	bl	8004580 <__i2b>
 800475c:	2300      	movs	r3, #0
 800475e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004762:	4604      	mov	r4, r0
 8004764:	6003      	str	r3, [r0, #0]
 8004766:	f04f 0900 	mov.w	r9, #0
 800476a:	07eb      	lsls	r3, r5, #31
 800476c:	d50a      	bpl.n	8004784 <__pow5mult+0x84>
 800476e:	4639      	mov	r1, r7
 8004770:	4622      	mov	r2, r4
 8004772:	4630      	mov	r0, r6
 8004774:	f7ff ff1a 	bl	80045ac <__multiply>
 8004778:	4639      	mov	r1, r7
 800477a:	4680      	mov	r8, r0
 800477c:	4630      	mov	r0, r6
 800477e:	f7ff fe47 	bl	8004410 <_Bfree>
 8004782:	4647      	mov	r7, r8
 8004784:	106d      	asrs	r5, r5, #1
 8004786:	d00b      	beq.n	80047a0 <__pow5mult+0xa0>
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	b938      	cbnz	r0, 800479c <__pow5mult+0x9c>
 800478c:	4622      	mov	r2, r4
 800478e:	4621      	mov	r1, r4
 8004790:	4630      	mov	r0, r6
 8004792:	f7ff ff0b 	bl	80045ac <__multiply>
 8004796:	6020      	str	r0, [r4, #0]
 8004798:	f8c0 9000 	str.w	r9, [r0]
 800479c:	4604      	mov	r4, r0
 800479e:	e7e4      	b.n	800476a <__pow5mult+0x6a>
 80047a0:	4638      	mov	r0, r7
 80047a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a6:	bf00      	nop
 80047a8:	08005208 	.word	0x08005208
 80047ac:	08004fd2 	.word	0x08004fd2
 80047b0:	080050b8 	.word	0x080050b8

080047b4 <__lshift>:
 80047b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b8:	460c      	mov	r4, r1
 80047ba:	6849      	ldr	r1, [r1, #4]
 80047bc:	6923      	ldr	r3, [r4, #16]
 80047be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80047c2:	68a3      	ldr	r3, [r4, #8]
 80047c4:	4607      	mov	r7, r0
 80047c6:	4691      	mov	r9, r2
 80047c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80047cc:	f108 0601 	add.w	r6, r8, #1
 80047d0:	42b3      	cmp	r3, r6
 80047d2:	db0b      	blt.n	80047ec <__lshift+0x38>
 80047d4:	4638      	mov	r0, r7
 80047d6:	f7ff fddb 	bl	8004390 <_Balloc>
 80047da:	4605      	mov	r5, r0
 80047dc:	b948      	cbnz	r0, 80047f2 <__lshift+0x3e>
 80047de:	4602      	mov	r2, r0
 80047e0:	4b2a      	ldr	r3, [pc, #168]	; (800488c <__lshift+0xd8>)
 80047e2:	482b      	ldr	r0, [pc, #172]	; (8004890 <__lshift+0xdc>)
 80047e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80047e8:	f7fd fe32 	bl	8002450 <__assert_func>
 80047ec:	3101      	adds	r1, #1
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	e7ee      	b.n	80047d0 <__lshift+0x1c>
 80047f2:	2300      	movs	r3, #0
 80047f4:	f100 0114 	add.w	r1, r0, #20
 80047f8:	f100 0210 	add.w	r2, r0, #16
 80047fc:	4618      	mov	r0, r3
 80047fe:	4553      	cmp	r3, sl
 8004800:	db37      	blt.n	8004872 <__lshift+0xbe>
 8004802:	6920      	ldr	r0, [r4, #16]
 8004804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004808:	f104 0314 	add.w	r3, r4, #20
 800480c:	f019 091f 	ands.w	r9, r9, #31
 8004810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004814:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004818:	d02f      	beq.n	800487a <__lshift+0xc6>
 800481a:	f1c9 0e20 	rsb	lr, r9, #32
 800481e:	468a      	mov	sl, r1
 8004820:	f04f 0c00 	mov.w	ip, #0
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	fa02 f209 	lsl.w	r2, r2, r9
 800482a:	ea42 020c 	orr.w	r2, r2, ip
 800482e:	f84a 2b04 	str.w	r2, [sl], #4
 8004832:	f853 2b04 	ldr.w	r2, [r3], #4
 8004836:	4298      	cmp	r0, r3
 8004838:	fa22 fc0e 	lsr.w	ip, r2, lr
 800483c:	d8f2      	bhi.n	8004824 <__lshift+0x70>
 800483e:	1b03      	subs	r3, r0, r4
 8004840:	3b15      	subs	r3, #21
 8004842:	f023 0303 	bic.w	r3, r3, #3
 8004846:	3304      	adds	r3, #4
 8004848:	f104 0215 	add.w	r2, r4, #21
 800484c:	4290      	cmp	r0, r2
 800484e:	bf38      	it	cc
 8004850:	2304      	movcc	r3, #4
 8004852:	f841 c003 	str.w	ip, [r1, r3]
 8004856:	f1bc 0f00 	cmp.w	ip, #0
 800485a:	d001      	beq.n	8004860 <__lshift+0xac>
 800485c:	f108 0602 	add.w	r6, r8, #2
 8004860:	3e01      	subs	r6, #1
 8004862:	4638      	mov	r0, r7
 8004864:	612e      	str	r6, [r5, #16]
 8004866:	4621      	mov	r1, r4
 8004868:	f7ff fdd2 	bl	8004410 <_Bfree>
 800486c:	4628      	mov	r0, r5
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004872:	f842 0f04 	str.w	r0, [r2, #4]!
 8004876:	3301      	adds	r3, #1
 8004878:	e7c1      	b.n	80047fe <__lshift+0x4a>
 800487a:	3904      	subs	r1, #4
 800487c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004880:	f841 2f04 	str.w	r2, [r1, #4]!
 8004884:	4298      	cmp	r0, r3
 8004886:	d8f9      	bhi.n	800487c <__lshift+0xc8>
 8004888:	e7ea      	b.n	8004860 <__lshift+0xac>
 800488a:	bf00      	nop
 800488c:	08005044 	.word	0x08005044
 8004890:	080050b8 	.word	0x080050b8

08004894 <__mcmp>:
 8004894:	b530      	push	{r4, r5, lr}
 8004896:	6902      	ldr	r2, [r0, #16]
 8004898:	690c      	ldr	r4, [r1, #16]
 800489a:	1b12      	subs	r2, r2, r4
 800489c:	d10e      	bne.n	80048bc <__mcmp+0x28>
 800489e:	f100 0314 	add.w	r3, r0, #20
 80048a2:	3114      	adds	r1, #20
 80048a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80048a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80048ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80048b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80048b4:	42a5      	cmp	r5, r4
 80048b6:	d003      	beq.n	80048c0 <__mcmp+0x2c>
 80048b8:	d305      	bcc.n	80048c6 <__mcmp+0x32>
 80048ba:	2201      	movs	r2, #1
 80048bc:	4610      	mov	r0, r2
 80048be:	bd30      	pop	{r4, r5, pc}
 80048c0:	4283      	cmp	r3, r0
 80048c2:	d3f3      	bcc.n	80048ac <__mcmp+0x18>
 80048c4:	e7fa      	b.n	80048bc <__mcmp+0x28>
 80048c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048ca:	e7f7      	b.n	80048bc <__mcmp+0x28>

080048cc <__mdiff>:
 80048cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d0:	460c      	mov	r4, r1
 80048d2:	4606      	mov	r6, r0
 80048d4:	4611      	mov	r1, r2
 80048d6:	4620      	mov	r0, r4
 80048d8:	4690      	mov	r8, r2
 80048da:	f7ff ffdb 	bl	8004894 <__mcmp>
 80048de:	1e05      	subs	r5, r0, #0
 80048e0:	d110      	bne.n	8004904 <__mdiff+0x38>
 80048e2:	4629      	mov	r1, r5
 80048e4:	4630      	mov	r0, r6
 80048e6:	f7ff fd53 	bl	8004390 <_Balloc>
 80048ea:	b930      	cbnz	r0, 80048fa <__mdiff+0x2e>
 80048ec:	4b3a      	ldr	r3, [pc, #232]	; (80049d8 <__mdiff+0x10c>)
 80048ee:	4602      	mov	r2, r0
 80048f0:	f240 2132 	movw	r1, #562	; 0x232
 80048f4:	4839      	ldr	r0, [pc, #228]	; (80049dc <__mdiff+0x110>)
 80048f6:	f7fd fdab 	bl	8002450 <__assert_func>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004904:	bfa4      	itt	ge
 8004906:	4643      	movge	r3, r8
 8004908:	46a0      	movge	r8, r4
 800490a:	4630      	mov	r0, r6
 800490c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004910:	bfa6      	itte	ge
 8004912:	461c      	movge	r4, r3
 8004914:	2500      	movge	r5, #0
 8004916:	2501      	movlt	r5, #1
 8004918:	f7ff fd3a 	bl	8004390 <_Balloc>
 800491c:	b920      	cbnz	r0, 8004928 <__mdiff+0x5c>
 800491e:	4b2e      	ldr	r3, [pc, #184]	; (80049d8 <__mdiff+0x10c>)
 8004920:	4602      	mov	r2, r0
 8004922:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004926:	e7e5      	b.n	80048f4 <__mdiff+0x28>
 8004928:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800492c:	6926      	ldr	r6, [r4, #16]
 800492e:	60c5      	str	r5, [r0, #12]
 8004930:	f104 0914 	add.w	r9, r4, #20
 8004934:	f108 0514 	add.w	r5, r8, #20
 8004938:	f100 0e14 	add.w	lr, r0, #20
 800493c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004940:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004944:	f108 0210 	add.w	r2, r8, #16
 8004948:	46f2      	mov	sl, lr
 800494a:	2100      	movs	r1, #0
 800494c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004950:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004954:	fa1f f883 	uxth.w	r8, r3
 8004958:	fa11 f18b 	uxtah	r1, r1, fp
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	eba1 0808 	sub.w	r8, r1, r8
 8004962:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004966:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800496a:	fa1f f888 	uxth.w	r8, r8
 800496e:	1419      	asrs	r1, r3, #16
 8004970:	454e      	cmp	r6, r9
 8004972:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004976:	f84a 3b04 	str.w	r3, [sl], #4
 800497a:	d8e7      	bhi.n	800494c <__mdiff+0x80>
 800497c:	1b33      	subs	r3, r6, r4
 800497e:	3b15      	subs	r3, #21
 8004980:	f023 0303 	bic.w	r3, r3, #3
 8004984:	3304      	adds	r3, #4
 8004986:	3415      	adds	r4, #21
 8004988:	42a6      	cmp	r6, r4
 800498a:	bf38      	it	cc
 800498c:	2304      	movcc	r3, #4
 800498e:	441d      	add	r5, r3
 8004990:	4473      	add	r3, lr
 8004992:	469e      	mov	lr, r3
 8004994:	462e      	mov	r6, r5
 8004996:	4566      	cmp	r6, ip
 8004998:	d30e      	bcc.n	80049b8 <__mdiff+0xec>
 800499a:	f10c 0203 	add.w	r2, ip, #3
 800499e:	1b52      	subs	r2, r2, r5
 80049a0:	f022 0203 	bic.w	r2, r2, #3
 80049a4:	3d03      	subs	r5, #3
 80049a6:	45ac      	cmp	ip, r5
 80049a8:	bf38      	it	cc
 80049aa:	2200      	movcc	r2, #0
 80049ac:	441a      	add	r2, r3
 80049ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80049b2:	b17b      	cbz	r3, 80049d4 <__mdiff+0x108>
 80049b4:	6107      	str	r7, [r0, #16]
 80049b6:	e7a3      	b.n	8004900 <__mdiff+0x34>
 80049b8:	f856 8b04 	ldr.w	r8, [r6], #4
 80049bc:	fa11 f288 	uxtah	r2, r1, r8
 80049c0:	1414      	asrs	r4, r2, #16
 80049c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80049c6:	b292      	uxth	r2, r2
 80049c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80049cc:	f84e 2b04 	str.w	r2, [lr], #4
 80049d0:	1421      	asrs	r1, r4, #16
 80049d2:	e7e0      	b.n	8004996 <__mdiff+0xca>
 80049d4:	3f01      	subs	r7, #1
 80049d6:	e7ea      	b.n	80049ae <__mdiff+0xe2>
 80049d8:	08005044 	.word	0x08005044
 80049dc:	080050b8 	.word	0x080050b8

080049e0 <__d2b>:
 80049e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80049e4:	4689      	mov	r9, r1
 80049e6:	2101      	movs	r1, #1
 80049e8:	ec57 6b10 	vmov	r6, r7, d0
 80049ec:	4690      	mov	r8, r2
 80049ee:	f7ff fccf 	bl	8004390 <_Balloc>
 80049f2:	4604      	mov	r4, r0
 80049f4:	b930      	cbnz	r0, 8004a04 <__d2b+0x24>
 80049f6:	4602      	mov	r2, r0
 80049f8:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <__d2b+0xb0>)
 80049fa:	4826      	ldr	r0, [pc, #152]	; (8004a94 <__d2b+0xb4>)
 80049fc:	f240 310a 	movw	r1, #778	; 0x30a
 8004a00:	f7fd fd26 	bl	8002450 <__assert_func>
 8004a04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004a08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004a0c:	bb35      	cbnz	r5, 8004a5c <__d2b+0x7c>
 8004a0e:	2e00      	cmp	r6, #0
 8004a10:	9301      	str	r3, [sp, #4]
 8004a12:	d028      	beq.n	8004a66 <__d2b+0x86>
 8004a14:	4668      	mov	r0, sp
 8004a16:	9600      	str	r6, [sp, #0]
 8004a18:	f7ff fd82 	bl	8004520 <__lo0bits>
 8004a1c:	9900      	ldr	r1, [sp, #0]
 8004a1e:	b300      	cbz	r0, 8004a62 <__d2b+0x82>
 8004a20:	9a01      	ldr	r2, [sp, #4]
 8004a22:	f1c0 0320 	rsb	r3, r0, #32
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	40c2      	lsrs	r2, r0
 8004a2e:	6163      	str	r3, [r4, #20]
 8004a30:	9201      	str	r2, [sp, #4]
 8004a32:	9b01      	ldr	r3, [sp, #4]
 8004a34:	61a3      	str	r3, [r4, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf14      	ite	ne
 8004a3a:	2202      	movne	r2, #2
 8004a3c:	2201      	moveq	r2, #1
 8004a3e:	6122      	str	r2, [r4, #16]
 8004a40:	b1d5      	cbz	r5, 8004a78 <__d2b+0x98>
 8004a42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004a46:	4405      	add	r5, r0
 8004a48:	f8c9 5000 	str.w	r5, [r9]
 8004a4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004a50:	f8c8 0000 	str.w	r0, [r8]
 8004a54:	4620      	mov	r0, r4
 8004a56:	b003      	add	sp, #12
 8004a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a60:	e7d5      	b.n	8004a0e <__d2b+0x2e>
 8004a62:	6161      	str	r1, [r4, #20]
 8004a64:	e7e5      	b.n	8004a32 <__d2b+0x52>
 8004a66:	a801      	add	r0, sp, #4
 8004a68:	f7ff fd5a 	bl	8004520 <__lo0bits>
 8004a6c:	9b01      	ldr	r3, [sp, #4]
 8004a6e:	6163      	str	r3, [r4, #20]
 8004a70:	2201      	movs	r2, #1
 8004a72:	6122      	str	r2, [r4, #16]
 8004a74:	3020      	adds	r0, #32
 8004a76:	e7e3      	b.n	8004a40 <__d2b+0x60>
 8004a78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004a7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004a80:	f8c9 0000 	str.w	r0, [r9]
 8004a84:	6918      	ldr	r0, [r3, #16]
 8004a86:	f7ff fd2b 	bl	80044e0 <__hi0bits>
 8004a8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004a8e:	e7df      	b.n	8004a50 <__d2b+0x70>
 8004a90:	08005044 	.word	0x08005044
 8004a94:	080050b8 	.word	0x080050b8

08004a98 <_calloc_r>:
 8004a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a9a:	fba1 2402 	umull	r2, r4, r1, r2
 8004a9e:	b94c      	cbnz	r4, 8004ab4 <_calloc_r+0x1c>
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	9201      	str	r2, [sp, #4]
 8004aa4:	f000 f87a 	bl	8004b9c <_malloc_r>
 8004aa8:	9a01      	ldr	r2, [sp, #4]
 8004aaa:	4605      	mov	r5, r0
 8004aac:	b930      	cbnz	r0, 8004abc <_calloc_r+0x24>
 8004aae:	4628      	mov	r0, r5
 8004ab0:	b003      	add	sp, #12
 8004ab2:	bd30      	pop	{r4, r5, pc}
 8004ab4:	220c      	movs	r2, #12
 8004ab6:	6002      	str	r2, [r0, #0]
 8004ab8:	2500      	movs	r5, #0
 8004aba:	e7f8      	b.n	8004aae <_calloc_r+0x16>
 8004abc:	4621      	mov	r1, r4
 8004abe:	f7fd fd21 	bl	8002504 <memset>
 8004ac2:	e7f4      	b.n	8004aae <_calloc_r+0x16>

08004ac4 <_free_r>:
 8004ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ac6:	2900      	cmp	r1, #0
 8004ac8:	d044      	beq.n	8004b54 <_free_r+0x90>
 8004aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ace:	9001      	str	r0, [sp, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ad6:	bfb8      	it	lt
 8004ad8:	18e4      	addlt	r4, r4, r3
 8004ada:	f000 f9d3 	bl	8004e84 <__malloc_lock>
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <_free_r+0x94>)
 8004ae0:	9801      	ldr	r0, [sp, #4]
 8004ae2:	6813      	ldr	r3, [r2, #0]
 8004ae4:	b933      	cbnz	r3, 8004af4 <_free_r+0x30>
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	6014      	str	r4, [r2, #0]
 8004aea:	b003      	add	sp, #12
 8004aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004af0:	f000 b9ce 	b.w	8004e90 <__malloc_unlock>
 8004af4:	42a3      	cmp	r3, r4
 8004af6:	d908      	bls.n	8004b0a <_free_r+0x46>
 8004af8:	6825      	ldr	r5, [r4, #0]
 8004afa:	1961      	adds	r1, r4, r5
 8004afc:	428b      	cmp	r3, r1
 8004afe:	bf01      	itttt	eq
 8004b00:	6819      	ldreq	r1, [r3, #0]
 8004b02:	685b      	ldreq	r3, [r3, #4]
 8004b04:	1949      	addeq	r1, r1, r5
 8004b06:	6021      	streq	r1, [r4, #0]
 8004b08:	e7ed      	b.n	8004ae6 <_free_r+0x22>
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	b10b      	cbz	r3, 8004b14 <_free_r+0x50>
 8004b10:	42a3      	cmp	r3, r4
 8004b12:	d9fa      	bls.n	8004b0a <_free_r+0x46>
 8004b14:	6811      	ldr	r1, [r2, #0]
 8004b16:	1855      	adds	r5, r2, r1
 8004b18:	42a5      	cmp	r5, r4
 8004b1a:	d10b      	bne.n	8004b34 <_free_r+0x70>
 8004b1c:	6824      	ldr	r4, [r4, #0]
 8004b1e:	4421      	add	r1, r4
 8004b20:	1854      	adds	r4, r2, r1
 8004b22:	42a3      	cmp	r3, r4
 8004b24:	6011      	str	r1, [r2, #0]
 8004b26:	d1e0      	bne.n	8004aea <_free_r+0x26>
 8004b28:	681c      	ldr	r4, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	6053      	str	r3, [r2, #4]
 8004b2e:	4421      	add	r1, r4
 8004b30:	6011      	str	r1, [r2, #0]
 8004b32:	e7da      	b.n	8004aea <_free_r+0x26>
 8004b34:	d902      	bls.n	8004b3c <_free_r+0x78>
 8004b36:	230c      	movs	r3, #12
 8004b38:	6003      	str	r3, [r0, #0]
 8004b3a:	e7d6      	b.n	8004aea <_free_r+0x26>
 8004b3c:	6825      	ldr	r5, [r4, #0]
 8004b3e:	1961      	adds	r1, r4, r5
 8004b40:	428b      	cmp	r3, r1
 8004b42:	bf04      	itt	eq
 8004b44:	6819      	ldreq	r1, [r3, #0]
 8004b46:	685b      	ldreq	r3, [r3, #4]
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	bf04      	itt	eq
 8004b4c:	1949      	addeq	r1, r1, r5
 8004b4e:	6021      	streq	r1, [r4, #0]
 8004b50:	6054      	str	r4, [r2, #4]
 8004b52:	e7ca      	b.n	8004aea <_free_r+0x26>
 8004b54:	b003      	add	sp, #12
 8004b56:	bd30      	pop	{r4, r5, pc}
 8004b58:	20000228 	.word	0x20000228

08004b5c <sbrk_aligned>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4e0e      	ldr	r6, [pc, #56]	; (8004b98 <sbrk_aligned+0x3c>)
 8004b60:	460c      	mov	r4, r1
 8004b62:	6831      	ldr	r1, [r6, #0]
 8004b64:	4605      	mov	r5, r0
 8004b66:	b911      	cbnz	r1, 8004b6e <sbrk_aligned+0x12>
 8004b68:	f000 f88c 	bl	8004c84 <_sbrk_r>
 8004b6c:	6030      	str	r0, [r6, #0]
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f887 	bl	8004c84 <_sbrk_r>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d00a      	beq.n	8004b90 <sbrk_aligned+0x34>
 8004b7a:	1cc4      	adds	r4, r0, #3
 8004b7c:	f024 0403 	bic.w	r4, r4, #3
 8004b80:	42a0      	cmp	r0, r4
 8004b82:	d007      	beq.n	8004b94 <sbrk_aligned+0x38>
 8004b84:	1a21      	subs	r1, r4, r0
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 f87c 	bl	8004c84 <_sbrk_r>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d101      	bne.n	8004b94 <sbrk_aligned+0x38>
 8004b90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b94:	4620      	mov	r0, r4
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	2000022c 	.word	0x2000022c

08004b9c <_malloc_r>:
 8004b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba0:	1ccd      	adds	r5, r1, #3
 8004ba2:	f025 0503 	bic.w	r5, r5, #3
 8004ba6:	3508      	adds	r5, #8
 8004ba8:	2d0c      	cmp	r5, #12
 8004baa:	bf38      	it	cc
 8004bac:	250c      	movcc	r5, #12
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	db01      	blt.n	8004bb8 <_malloc_r+0x1c>
 8004bb4:	42a9      	cmp	r1, r5
 8004bb6:	d905      	bls.n	8004bc4 <_malloc_r+0x28>
 8004bb8:	230c      	movs	r3, #12
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	2600      	movs	r6, #0
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc4:	4e2e      	ldr	r6, [pc, #184]	; (8004c80 <_malloc_r+0xe4>)
 8004bc6:	f000 f95d 	bl	8004e84 <__malloc_lock>
 8004bca:	6833      	ldr	r3, [r6, #0]
 8004bcc:	461c      	mov	r4, r3
 8004bce:	bb34      	cbnz	r4, 8004c1e <_malloc_r+0x82>
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	f7ff ffc2 	bl	8004b5c <sbrk_aligned>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	4604      	mov	r4, r0
 8004bdc:	d14d      	bne.n	8004c7a <_malloc_r+0xde>
 8004bde:	6834      	ldr	r4, [r6, #0]
 8004be0:	4626      	mov	r6, r4
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	d140      	bne.n	8004c68 <_malloc_r+0xcc>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	4631      	mov	r1, r6
 8004bea:	4638      	mov	r0, r7
 8004bec:	eb04 0803 	add.w	r8, r4, r3
 8004bf0:	f000 f848 	bl	8004c84 <_sbrk_r>
 8004bf4:	4580      	cmp	r8, r0
 8004bf6:	d13a      	bne.n	8004c6e <_malloc_r+0xd2>
 8004bf8:	6821      	ldr	r1, [r4, #0]
 8004bfa:	3503      	adds	r5, #3
 8004bfc:	1a6d      	subs	r5, r5, r1
 8004bfe:	f025 0503 	bic.w	r5, r5, #3
 8004c02:	3508      	adds	r5, #8
 8004c04:	2d0c      	cmp	r5, #12
 8004c06:	bf38      	it	cc
 8004c08:	250c      	movcc	r5, #12
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	f7ff ffa5 	bl	8004b5c <sbrk_aligned>
 8004c12:	3001      	adds	r0, #1
 8004c14:	d02b      	beq.n	8004c6e <_malloc_r+0xd2>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	442b      	add	r3, r5
 8004c1a:	6023      	str	r3, [r4, #0]
 8004c1c:	e00e      	b.n	8004c3c <_malloc_r+0xa0>
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	1b52      	subs	r2, r2, r5
 8004c22:	d41e      	bmi.n	8004c62 <_malloc_r+0xc6>
 8004c24:	2a0b      	cmp	r2, #11
 8004c26:	d916      	bls.n	8004c56 <_malloc_r+0xba>
 8004c28:	1961      	adds	r1, r4, r5
 8004c2a:	42a3      	cmp	r3, r4
 8004c2c:	6025      	str	r5, [r4, #0]
 8004c2e:	bf18      	it	ne
 8004c30:	6059      	strne	r1, [r3, #4]
 8004c32:	6863      	ldr	r3, [r4, #4]
 8004c34:	bf08      	it	eq
 8004c36:	6031      	streq	r1, [r6, #0]
 8004c38:	5162      	str	r2, [r4, r5]
 8004c3a:	604b      	str	r3, [r1, #4]
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f104 060b 	add.w	r6, r4, #11
 8004c42:	f000 f925 	bl	8004e90 <__malloc_unlock>
 8004c46:	f026 0607 	bic.w	r6, r6, #7
 8004c4a:	1d23      	adds	r3, r4, #4
 8004c4c:	1af2      	subs	r2, r6, r3
 8004c4e:	d0b6      	beq.n	8004bbe <_malloc_r+0x22>
 8004c50:	1b9b      	subs	r3, r3, r6
 8004c52:	50a3      	str	r3, [r4, r2]
 8004c54:	e7b3      	b.n	8004bbe <_malloc_r+0x22>
 8004c56:	6862      	ldr	r2, [r4, #4]
 8004c58:	42a3      	cmp	r3, r4
 8004c5a:	bf0c      	ite	eq
 8004c5c:	6032      	streq	r2, [r6, #0]
 8004c5e:	605a      	strne	r2, [r3, #4]
 8004c60:	e7ec      	b.n	8004c3c <_malloc_r+0xa0>
 8004c62:	4623      	mov	r3, r4
 8004c64:	6864      	ldr	r4, [r4, #4]
 8004c66:	e7b2      	b.n	8004bce <_malloc_r+0x32>
 8004c68:	4634      	mov	r4, r6
 8004c6a:	6876      	ldr	r6, [r6, #4]
 8004c6c:	e7b9      	b.n	8004be2 <_malloc_r+0x46>
 8004c6e:	230c      	movs	r3, #12
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	4638      	mov	r0, r7
 8004c74:	f000 f90c 	bl	8004e90 <__malloc_unlock>
 8004c78:	e7a1      	b.n	8004bbe <_malloc_r+0x22>
 8004c7a:	6025      	str	r5, [r4, #0]
 8004c7c:	e7de      	b.n	8004c3c <_malloc_r+0xa0>
 8004c7e:	bf00      	nop
 8004c80:	20000228 	.word	0x20000228

08004c84 <_sbrk_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4d06      	ldr	r5, [pc, #24]	; (8004ca0 <_sbrk_r+0x1c>)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	4604      	mov	r4, r0
 8004c8c:	4608      	mov	r0, r1
 8004c8e:	602b      	str	r3, [r5, #0]
 8004c90:	f7fc fc40 	bl	8001514 <_sbrk>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d102      	bne.n	8004c9e <_sbrk_r+0x1a>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	b103      	cbz	r3, 8004c9e <_sbrk_r+0x1a>
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	20000230 	.word	0x20000230

08004ca4 <_raise_r>:
 8004ca4:	291f      	cmp	r1, #31
 8004ca6:	b538      	push	{r3, r4, r5, lr}
 8004ca8:	4604      	mov	r4, r0
 8004caa:	460d      	mov	r5, r1
 8004cac:	d904      	bls.n	8004cb8 <_raise_r+0x14>
 8004cae:	2316      	movs	r3, #22
 8004cb0:	6003      	str	r3, [r0, #0]
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004cba:	b112      	cbz	r2, 8004cc2 <_raise_r+0x1e>
 8004cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004cc0:	b94b      	cbnz	r3, 8004cd6 <_raise_r+0x32>
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 f830 	bl	8004d28 <_getpid_r>
 8004cc8:	462a      	mov	r2, r5
 8004cca:	4601      	mov	r1, r0
 8004ccc:	4620      	mov	r0, r4
 8004cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cd2:	f000 b817 	b.w	8004d04 <_kill_r>
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d00a      	beq.n	8004cf0 <_raise_r+0x4c>
 8004cda:	1c59      	adds	r1, r3, #1
 8004cdc:	d103      	bne.n	8004ce6 <_raise_r+0x42>
 8004cde:	2316      	movs	r3, #22
 8004ce0:	6003      	str	r3, [r0, #0]
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	e7e7      	b.n	8004cb6 <_raise_r+0x12>
 8004ce6:	2400      	movs	r4, #0
 8004ce8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004cec:	4628      	mov	r0, r5
 8004cee:	4798      	blx	r3
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	e7e0      	b.n	8004cb6 <_raise_r+0x12>

08004cf4 <raise>:
 8004cf4:	4b02      	ldr	r3, [pc, #8]	; (8004d00 <raise+0xc>)
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	f7ff bfd3 	b.w	8004ca4 <_raise_r>
 8004cfe:	bf00      	nop
 8004d00:	2000000c 	.word	0x2000000c

08004d04 <_kill_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d07      	ldr	r5, [pc, #28]	; (8004d24 <_kill_r+0x20>)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	602b      	str	r3, [r5, #0]
 8004d12:	f7fc fb93 	bl	800143c <_kill>
 8004d16:	1c43      	adds	r3, r0, #1
 8004d18:	d102      	bne.n	8004d20 <_kill_r+0x1c>
 8004d1a:	682b      	ldr	r3, [r5, #0]
 8004d1c:	b103      	cbz	r3, 8004d20 <_kill_r+0x1c>
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	bd38      	pop	{r3, r4, r5, pc}
 8004d22:	bf00      	nop
 8004d24:	20000230 	.word	0x20000230

08004d28 <_getpid_r>:
 8004d28:	f7fc bb80 	b.w	800142c <_getpid>

08004d2c <__sread>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	460c      	mov	r4, r1
 8004d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d34:	f000 f8b2 	bl	8004e9c <_read_r>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	bfab      	itete	ge
 8004d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d40:	181b      	addge	r3, r3, r0
 8004d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d46:	bfac      	ite	ge
 8004d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d4a:	81a3      	strhlt	r3, [r4, #12]
 8004d4c:	bd10      	pop	{r4, pc}

08004d4e <__swrite>:
 8004d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d52:	461f      	mov	r7, r3
 8004d54:	898b      	ldrh	r3, [r1, #12]
 8004d56:	05db      	lsls	r3, r3, #23
 8004d58:	4605      	mov	r5, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	d505      	bpl.n	8004d6c <__swrite+0x1e>
 8004d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d64:	2302      	movs	r3, #2
 8004d66:	2200      	movs	r2, #0
 8004d68:	f000 f868 	bl	8004e3c <_lseek_r>
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d76:	81a3      	strh	r3, [r4, #12]
 8004d78:	4632      	mov	r2, r6
 8004d7a:	463b      	mov	r3, r7
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d82:	f000 b817 	b.w	8004db4 <_write_r>

08004d86 <__sseek>:
 8004d86:	b510      	push	{r4, lr}
 8004d88:	460c      	mov	r4, r1
 8004d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8e:	f000 f855 	bl	8004e3c <_lseek_r>
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	bf15      	itete	ne
 8004d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004da2:	81a3      	strheq	r3, [r4, #12]
 8004da4:	bf18      	it	ne
 8004da6:	81a3      	strhne	r3, [r4, #12]
 8004da8:	bd10      	pop	{r4, pc}

08004daa <__sclose>:
 8004daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dae:	f000 b813 	b.w	8004dd8 <_close_r>
	...

08004db4 <_write_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4d07      	ldr	r5, [pc, #28]	; (8004dd4 <_write_r+0x20>)
 8004db8:	4604      	mov	r4, r0
 8004dba:	4608      	mov	r0, r1
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	602a      	str	r2, [r5, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f7fc f9bb 	bl	800113e <_write>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d102      	bne.n	8004dd2 <_write_r+0x1e>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	b103      	cbz	r3, 8004dd2 <_write_r+0x1e>
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	20000230 	.word	0x20000230

08004dd8 <_close_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4d06      	ldr	r5, [pc, #24]	; (8004df4 <_close_r+0x1c>)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4604      	mov	r4, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	602b      	str	r3, [r5, #0]
 8004de4:	f7fc fb61 	bl	80014aa <_close>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_close_r+0x1a>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_close_r+0x1a>
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	20000230 	.word	0x20000230

08004df8 <_fstat_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4d07      	ldr	r5, [pc, #28]	; (8004e18 <_fstat_r+0x20>)
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	4604      	mov	r4, r0
 8004e00:	4608      	mov	r0, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	602b      	str	r3, [r5, #0]
 8004e06:	f7fc fb5c 	bl	80014c2 <_fstat>
 8004e0a:	1c43      	adds	r3, r0, #1
 8004e0c:	d102      	bne.n	8004e14 <_fstat_r+0x1c>
 8004e0e:	682b      	ldr	r3, [r5, #0]
 8004e10:	b103      	cbz	r3, 8004e14 <_fstat_r+0x1c>
 8004e12:	6023      	str	r3, [r4, #0]
 8004e14:	bd38      	pop	{r3, r4, r5, pc}
 8004e16:	bf00      	nop
 8004e18:	20000230 	.word	0x20000230

08004e1c <_isatty_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4d06      	ldr	r5, [pc, #24]	; (8004e38 <_isatty_r+0x1c>)
 8004e20:	2300      	movs	r3, #0
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	602b      	str	r3, [r5, #0]
 8004e28:	f7fc fb5b 	bl	80014e2 <_isatty>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_isatty_r+0x1a>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_isatty_r+0x1a>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	20000230 	.word	0x20000230

08004e3c <_lseek_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4d07      	ldr	r5, [pc, #28]	; (8004e5c <_lseek_r+0x20>)
 8004e40:	4604      	mov	r4, r0
 8004e42:	4608      	mov	r0, r1
 8004e44:	4611      	mov	r1, r2
 8004e46:	2200      	movs	r2, #0
 8004e48:	602a      	str	r2, [r5, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f7fc fb54 	bl	80014f8 <_lseek>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_lseek_r+0x1e>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_lseek_r+0x1e>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	20000230 	.word	0x20000230

08004e60 <__ascii_mbtowc>:
 8004e60:	b082      	sub	sp, #8
 8004e62:	b901      	cbnz	r1, 8004e66 <__ascii_mbtowc+0x6>
 8004e64:	a901      	add	r1, sp, #4
 8004e66:	b142      	cbz	r2, 8004e7a <__ascii_mbtowc+0x1a>
 8004e68:	b14b      	cbz	r3, 8004e7e <__ascii_mbtowc+0x1e>
 8004e6a:	7813      	ldrb	r3, [r2, #0]
 8004e6c:	600b      	str	r3, [r1, #0]
 8004e6e:	7812      	ldrb	r2, [r2, #0]
 8004e70:	1e10      	subs	r0, r2, #0
 8004e72:	bf18      	it	ne
 8004e74:	2001      	movne	r0, #1
 8004e76:	b002      	add	sp, #8
 8004e78:	4770      	bx	lr
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	e7fb      	b.n	8004e76 <__ascii_mbtowc+0x16>
 8004e7e:	f06f 0001 	mvn.w	r0, #1
 8004e82:	e7f8      	b.n	8004e76 <__ascii_mbtowc+0x16>

08004e84 <__malloc_lock>:
 8004e84:	4801      	ldr	r0, [pc, #4]	; (8004e8c <__malloc_lock+0x8>)
 8004e86:	f7ff ba06 	b.w	8004296 <__retarget_lock_acquire_recursive>
 8004e8a:	bf00      	nop
 8004e8c:	20000224 	.word	0x20000224

08004e90 <__malloc_unlock>:
 8004e90:	4801      	ldr	r0, [pc, #4]	; (8004e98 <__malloc_unlock+0x8>)
 8004e92:	f7ff ba01 	b.w	8004298 <__retarget_lock_release_recursive>
 8004e96:	bf00      	nop
 8004e98:	20000224 	.word	0x20000224

08004e9c <_read_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4d07      	ldr	r5, [pc, #28]	; (8004ebc <_read_r+0x20>)
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	4608      	mov	r0, r1
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	602a      	str	r2, [r5, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7fc fae0 	bl	8001470 <_read>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d102      	bne.n	8004eba <_read_r+0x1e>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	b103      	cbz	r3, 8004eba <_read_r+0x1e>
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	20000230 	.word	0x20000230

08004ec0 <__ascii_wctomb>:
 8004ec0:	b149      	cbz	r1, 8004ed6 <__ascii_wctomb+0x16>
 8004ec2:	2aff      	cmp	r2, #255	; 0xff
 8004ec4:	bf85      	ittet	hi
 8004ec6:	238a      	movhi	r3, #138	; 0x8a
 8004ec8:	6003      	strhi	r3, [r0, #0]
 8004eca:	700a      	strbls	r2, [r1, #0]
 8004ecc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004ed0:	bf98      	it	ls
 8004ed2:	2001      	movls	r0, #1
 8004ed4:	4770      	bx	lr
 8004ed6:	4608      	mov	r0, r1
 8004ed8:	4770      	bx	lr
	...

08004edc <_init>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr

08004ee8 <_fini>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	bf00      	nop
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr
