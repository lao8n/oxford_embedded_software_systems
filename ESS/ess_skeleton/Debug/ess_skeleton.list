
ess_skeleton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08006030  08006030  00016030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006458  08006458  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006458  08006458  00016458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006460  08006460  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000110  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a18a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f19  00000000  00000000  0002a396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  0002c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a38  00000000  00000000  0002ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000045b3  00000000  00000000  0002d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d371  00000000  00000000  00031e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ced0b  00000000  00000000  0003f17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010de87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d80  00000000  00000000  0010ded8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006014 	.word	0x08006014

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006014 	.word	0x08006014

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <AccInit>:
#include "acc.h"

void AccInit(void){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	SPIAcc_Init();
 8000eb2:	f000 fb83 	bl	80015bc <SPIAcc_Init>
	uint8_t buffer[1];
	SPIAcc_Get(0x0F, buffer, 1); // WHOAMI
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4619      	mov	r1, r3
 8000ebc:	200f      	movs	r0, #15
 8000ebe:	f000 fc37 	bl	8001730 <SPIAcc_Get>
	// set fastest sampling rate
	buffer[1] = 0x87;
 8000ec2:	2387      	movs	r3, #135	; 0x87
 8000ec4:	717b      	strb	r3, [r7, #5]
	SPIAcc_Send(20, buffer, 1); // CTRL_REG1
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4619      	mov	r1, r3
 8000ecc:	2014      	movs	r0, #20
 8000ece:	f000 fc05 	bl	80016dc <SPIAcc_Send>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <AccRead>:

void AccRead(acc3_t * reading){
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	SPIAcc_Get(0x28, data, 2); // OUT_X_L, OUT_X_H;
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2028      	movs	r0, #40	; 0x28
 8000eec:	f000 fc20 	bl	8001730 <SPIAcc_Get>
	SPIAcc_Get(0x2A, &data[2], 2); // OUT_Y_L, OUT_Y_H;
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	202a      	movs	r0, #42	; 0x2a
 8000efc:	f000 fc18 	bl	8001730 <SPIAcc_Get>
	SPIAcc_Get(0x2C, &data[4], 2); // OUT_Z_L, OUT_Z_H;
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	3304      	adds	r3, #4
 8000f06:	2202      	movs	r2, #2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	202c      	movs	r0, #44	; 0x2c
 8000f0c:	f000 fc10 	bl	8001730 <SPIAcc_Get>
	int16_t x_axis = (data[1] << 8) + data[0];
 8000f10:	7b7b      	ldrb	r3, [r7, #13]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	7b3b      	ldrb	r3, [r7, #12]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	82fb      	strh	r3, [r7, #22]
	int16_t y_axis = (data[3] << 8) + data[2];
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	4413      	add	r3, r2
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	82bb      	strh	r3, [r7, #20]
	int16_t z_axis = (data[5] << 8) + data[4];
 8000f34:	7c7b      	ldrb	r3, [r7, #17]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	7c3b      	ldrb	r3, [r7, #16]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	827b      	strh	r3, [r7, #18]
	reading->x = x_axis;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	8afa      	ldrh	r2, [r7, #22]
 8000f4a:	801a      	strh	r2, [r3, #0]
	reading->y = y_axis;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	8aba      	ldrh	r2, [r7, #20]
 8000f50:	805a      	strh	r2, [r3, #2]
	reading->z = z_axis;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	8a7a      	ldrh	r2, [r7, #18]
 8000f56:	809a      	strh	r2, [r3, #4]
}
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <display_init>:
#include "pwm_driver.h"

#define PORTD ((uint32_t*)0x40020C14)


void display_init(void){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	static LED_t led_orange;
	static LED_t led_blue;
	static LED_t led_red;

	// set up the leds
	led_init(&led_green, PORTD, GREEN);
 8000f64:	2200      	movs	r2, #0
 8000f66:	4915      	ldr	r1, [pc, #84]	; (8000fbc <display_init+0x5c>)
 8000f68:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <display_init+0x60>)
 8000f6a:	f000 f9c3 	bl	80012f4 <led_init>
	led_init(&led_orange, PORTD, ORANGE);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4912      	ldr	r1, [pc, #72]	; (8000fbc <display_init+0x5c>)
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <display_init+0x64>)
 8000f74:	f000 f9be 	bl	80012f4 <led_init>
	led_init(&led_blue, PORTD, BLUE);
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4910      	ldr	r1, [pc, #64]	; (8000fbc <display_init+0x5c>)
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <display_init+0x68>)
 8000f7e:	f000 f9b9 	bl	80012f4 <led_init>
	led_init(&led_red, PORTD, RED);
 8000f82:	2203      	movs	r2, #3
 8000f84:	490d      	ldr	r1, [pc, #52]	; (8000fbc <display_init+0x5c>)
 8000f86:	4811      	ldr	r0, [pc, #68]	; (8000fcc <display_init+0x6c>)
 8000f88:	f000 f9b4 	bl	80012f4 <led_init>

	// set up pwm driver
	pwm_driver_init(&led_green, &led_red, &led_orange, &led_blue);
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <display_init+0x68>)
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <display_init+0x64>)
 8000f90:	490e      	ldr	r1, [pc, #56]	; (8000fcc <display_init+0x6c>)
 8000f92:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <display_init+0x60>)
 8000f94:	f000 fa58 	bl	8001448 <pwm_driver_init>

	// set brightness values
	pwm_driver_set(GREEN, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 fa7e 	bl	800149c <pwm_driver_set>
	pwm_driver_set(ORANGE, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 fa7a 	bl	800149c <pwm_driver_set>
	pwm_driver_set(BLUE, 0);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2002      	movs	r0, #2
 8000fac:	f000 fa76 	bl	800149c <pwm_driver_set>
	pwm_driver_set(RED, 0);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	f000 fa72 	bl	800149c <pwm_driver_set>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020c14 	.word	0x40020c14
 8000fc0:	200001f8 	.word	0x200001f8
 8000fc4:	20000200 	.word	0x20000200
 8000fc8:	20000208 	.word	0x20000208
 8000fcc:	20000210 	.word	0x20000210

08000fd0 <display_axis>:


void display_axis(int16_t axis, colour_t neg, colour_t pos){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	717b      	strb	r3, [r7, #5]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	713b      	strb	r3, [r7, #4]
	if(axis < -2000) {
 8000fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe6:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8000fea:	da0a      	bge.n	8001002 <display_axis+0x32>
		pwm_driver_set(neg, 100);
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	2164      	movs	r1, #100	; 0x64
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fa53 	bl	800149c <pwm_driver_set>
		pwm_driver_set(pos, 0);
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fa4e 	bl	800149c <pwm_driver_set>
		pwm_driver_set(neg, 0);
	} else {
		pwm_driver_set(pos, 0);
		pwm_driver_set(neg, 0);
	}
}
 8001000:	e051      	b.n	80010a6 <display_axis+0xd6>
	} else if (axis > 2000) {
 8001002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001006:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800100a:	dd0a      	ble.n	8001022 <display_axis+0x52>
		pwm_driver_set(pos, 100);
 800100c:	793b      	ldrb	r3, [r7, #4]
 800100e:	2164      	movs	r1, #100	; 0x64
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fa43 	bl	800149c <pwm_driver_set>
		pwm_driver_set(neg, 0);
 8001016:	797b      	ldrb	r3, [r7, #5]
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fa3e 	bl	800149c <pwm_driver_set>
}
 8001020:	e041      	b.n	80010a6 <display_axis+0xd6>
	} else if (axis < -1000){
 8001022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001026:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800102a:	da16      	bge.n	800105a <display_axis+0x8a>
		uint8_t brightness = (axis + 1000)/-10;
 800102c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001030:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001034:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <display_axis+0xe0>)
 8001036:	fb82 1203 	smull	r1, r2, r2, r3
 800103a:	1092      	asrs	r2, r2, #2
 800103c:	17db      	asrs	r3, r3, #31
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	73bb      	strb	r3, [r7, #14]
		pwm_driver_set(neg, brightness);
 8001042:	7bba      	ldrb	r2, [r7, #14]
 8001044:	797b      	ldrb	r3, [r7, #5]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fa27 	bl	800149c <pwm_driver_set>
		pwm_driver_set(pos, 0);
 800104e:	793b      	ldrb	r3, [r7, #4]
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fa22 	bl	800149c <pwm_driver_set>
}
 8001058:	e025      	b.n	80010a6 <display_axis+0xd6>
	} else if (axis > 1000){
 800105a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001062:	dd16      	ble.n	8001092 <display_axis+0xc2>
		uint8_t brightness = (axis - 1000)/10;
 8001064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001068:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800106c:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <display_axis+0xe0>)
 800106e:	fb82 1203 	smull	r1, r2, r2, r3
 8001072:	1092      	asrs	r2, r2, #2
 8001074:	17db      	asrs	r3, r3, #31
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	73fb      	strb	r3, [r7, #15]
		pwm_driver_set(pos, brightness);
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	793b      	ldrb	r3, [r7, #4]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f000 fa0b 	bl	800149c <pwm_driver_set>
		pwm_driver_set(neg, 0);
 8001086:	797b      	ldrb	r3, [r7, #5]
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fa06 	bl	800149c <pwm_driver_set>
}
 8001090:	e009      	b.n	80010a6 <display_axis+0xd6>
		pwm_driver_set(pos, 0);
 8001092:	793b      	ldrb	r3, [r7, #4]
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fa00 	bl	800149c <pwm_driver_set>
		pwm_driver_set(neg, 0);
 800109c:	797b      	ldrb	r3, [r7, #5]
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f9fb 	bl	800149c <pwm_driver_set>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	66666667 	.word	0x66666667

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	; 0x50
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2230      	movs	r2, #48	; 0x30
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 faba 	bl	800363c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b23      	ldr	r3, [pc, #140]	; (800116c <SystemClock_Config+0xb8>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	4a22      	ldr	r2, [pc, #136]	; (800116c <SystemClock_Config+0xb8>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	; 0x40
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <SystemClock_Config+0xb8>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <SystemClock_Config+0xbc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <SystemClock_Config+0xbc>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <SystemClock_Config+0xbc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001110:	2302      	movs	r3, #2
 8001112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001114:	2301      	movs	r3, #1
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001118:	2310      	movs	r3, #16
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111c:	2302      	movs	r3, #2
 800111e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001120:	2300      	movs	r3, #0
 8001122:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001124:	2308      	movs	r3, #8
 8001126:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001128:	23a8      	movs	r3, #168	; 0xa8
 800112a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001130:	2304      	movs	r3, #4
 8001132:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f000 ffb3 	bl	80020a4 <HAL_RCC_OscConfig>
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113e:	230f      	movs	r3, #15
 8001140:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001142:	2302      	movs	r3, #2
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800114a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800114e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	61fb      	str	r3, [r7, #28]

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2105      	movs	r1, #5
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fa0f 	bl	8002580 <HAL_RCC_ClockConfig>
}
 8001162:	bf00      	nop
 8001164:	3750      	adds	r7, #80	; 0x50
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <_init_leds>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void _init_leds(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_init_leds+0x60>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <_init_leds+0x60>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <_init_leds+0x60>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <_init_leds+0x64>)
 80011ac:	f000 ff60 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <_init_leds+0x64>)
 80011c8:	f000 fdb6 	bl	8001d38 <HAL_GPIO_Init>

}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020c00 	.word	0x40020c00

080011dc <_init_button>:


void _init_button() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <_init_button+0x44>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <_init_button+0x44>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <_init_button+0x44>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
	 * Output type is push-pull
	 * Mode is Input
	 * No pull resistor
	 * Speed 100MHz
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fe:	2301      	movs	r3, #1
 8001200:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
	/* Initialize pin */
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	4619      	mov	r1, r3
 8001212:	4804      	ldr	r0, [pc, #16]	; (8001224 <_init_button+0x48>)
 8001214:	f000 fd90 	bl	8001d38 <HAL_GPIO_Init>
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000

08001228 <ess_helper_init>:



void ess_helper_init() {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	  SystemClock_Config();
 800122c:	f7ff ff42 	bl	80010b4 <SystemClock_Config>
	  _init_leds();
 8001230:	f7ff ffa0 	bl	8001174 <_init_leds>
	  _init_button();
 8001234:	f7ff ffd2 	bl	80011dc <_init_button>
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <TMR4_Init_ISR>:

TIM_HandleTypeDef TIM_Handle;

// Hardware timer is more accurate but still uses 100% of CPU when it checks the flag. If is doing something else then it could miss the flag and lead to jitter.
// Better to use ISR instea
void TMR4_Init_ISR(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
	__TIM4_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <TMR4_Init_ISR+0x74>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <TMR4_Init_ISR+0x74>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <TMR4_Init_ISR+0x74>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
	TIM_Handle.Instance = TIM4;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <TMR4_Init_ISR+0x78>)
 8001260:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <TMR4_Init_ISR+0x7c>)
 8001262:	601a      	str	r2, [r3, #0]
	// timer tick frequency = 8400000 / (0 + 1) = 84000000
	TIM_Handle.Init.Prescaler = 0;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <TMR4_Init_ISR+0x78>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
	/* Count up */
	TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <TMR4_Init_ISR+0x78>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
	 * in our case it is 16 bit = 65535
	 * Frequency = timer_tick_frequency / (TIM_PERIOD + 1)
	 * if period is larger than max timer value need to choose a larger prescaler
	 * and slow down timer tick frequency
	 */
	TIM_Handle.Init.Period = 8399; // 32Hz
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <TMR4_Init_ISR+0x78>)
 8001272:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001276:	60da      	str	r2, [r3, #12]
	TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <TMR4_Init_ISR+0x78>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
	TIM_Handle.Init.RepetitionCounter = 0;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <TMR4_Init_ISR+0x78>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
	TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <TMR4_Init_ISR+0x78>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&TIM_Handle);
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <TMR4_Init_ISR+0x78>)
 800128c:	f002 f882 	bl	8003394 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&TIM_Handle);
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <TMR4_Init_ISR+0x78>)
 8001292:	f002 f8b4 	bl	80033fe <HAL_TIM_Base_Start_IT>
	// Enable TIM4 global interrupt
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0); // changed to 0
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	201e      	movs	r0, #30
 800129c:	f000 fd15 	bl	8001cca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012a0:	201e      	movs	r0, #30
 80012a2:	f000 fd2e 	bl	8001d02 <HAL_NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	20000218 	.word	0x20000218
 80012b8:	40000800 	.word	0x40000800

080012bc <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	// check the flag, in case other interrupts are also
	if(__HAL_TIM_GET_FLAG(&TIM_Handle, TIM_FLAG_UPDATE) != RESET){
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <TIM4_IRQHandler+0x34>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10d      	bne.n	80012ea <TIM4_IRQHandler+0x2e>
		if(__HAL_TIM_GET_ITSTATUS(&TIM_Handle, TIM_IT_UPDATE) != RESET){
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <TIM4_IRQHandler+0x34>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d106      	bne.n	80012ea <TIM4_IRQHandler+0x2e>
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle, TIM_FLAG_UPDATE);
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <TIM4_IRQHandler+0x34>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f06f 0201 	mvn.w	r2, #1
 80012e4:	611a      	str	r2, [r3, #16]
			pwm_driver_update();
 80012e6:	f000 f915 	bl	8001514 <pwm_driver_update>
		}
	}
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000218 	.word	0x20000218

080012f4 <led_init>:
#include "led_driver.h"

void led_init(LED_t *led, uint32_t * port, uint32_t pin){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
	led->port = port;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	601a      	str	r2, [r3, #0]
	led->pin = pin;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	605a      	str	r2, [r3, #4]
	led_off(led);
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f000 f81c 	bl	800134a <led_off>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <led_on>:

void led_on(LED_t * led){
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
	(*led->port) |= 0x1000 << led->pin;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	4619      	mov	r1, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <led_off>:

void led_off(LED_t * led){
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	(*led->port) &=~ (0x1000 << led->pin);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	4619      	mov	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	400a      	ands	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001384:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001388:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d013      	beq.n	80013bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001394:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001398:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800139c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00b      	beq.n	80013bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013a4:	e000      	b.n	80013a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80013a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f9      	beq.n	80013a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_write>:
#include "stm32f4xx_it.h"
#include "display_driver.h"
#include "spi_driver.h"
#include "acc.h"

int _write(int file, char *ptr, int len){
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
	int i = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++){
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e009      	b.n	80013f4 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ffc7 	bl	800137c <ITM_SendChar>
	for(i = 0; i < len; i++){
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf1      	blt.n	80013e0 <_write+0x16>
	}
	return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <main>:

int main(void){
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
	/* Initialize system */
	HAL_Init();
 800140c:	f000 fb10 	bl	8001a30 <HAL_Init>
	/* Initialize peripherals on board */
	ess_helper_init();
 8001410:	f7ff ff0a 	bl	8001228 <ess_helper_init>

	display_init();
 8001414:	f7ff fda4 	bl	8000f60 <display_init>

	AccInit();
 8001418:	f7ff fd48 	bl	8000eac <AccInit>
	TMR4_Init_ISR();
 800141c:	f7ff ff0e 	bl	800123c <TMR4_Init_ISR>
	acc3_t reading;
	// loop
	while(1){
		AccRead(&reading);
 8001420:	463b      	mov	r3, r7
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd59 	bl	8000eda <AccRead>
		display_axis(reading.x, GREEN, RED);
 8001428:	f9b7 3000 	ldrsh.w	r3, [r7]
 800142c:	2203      	movs	r2, #3
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fdcd 	bl	8000fd0 <display_axis>
		display_axis(reading.y, ORANGE, BLUE);
 8001436:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800143a:	2202      	movs	r2, #2
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fdc6 	bl	8000fd0 <display_axis>
		AccRead(&reading);
 8001444:	e7ec      	b.n	8001420 <main+0x1a>
	...

08001448 <pwm_driver_init>:

// assumes only one pwm_driver instance in the system
static struct pwm_state state;

// initialize pwm driver
void pwm_driver_init(LED_t *ch0, LED_t *ch1, LED_t *ch2, LED_t *ch3){
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
	// start counter at 0
	state.counter = 0;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <pwm_driver_init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

	// set all channels to off
	state.ch0_compare = 0;
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <pwm_driver_init+0x50>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
	state.ch1_compare = 0;
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <pwm_driver_init+0x50>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
	state.ch2_compare = 0;
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <pwm_driver_init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
	state.ch3_compare = 0;
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <pwm_driver_init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]

	// store pointer for each led driver
	state.ch0 = ch0;
 8001474:	4a08      	ldr	r2, [pc, #32]	; (8001498 <pwm_driver_init+0x50>)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6153      	str	r3, [r2, #20]
	state.ch1 = ch1;
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <pwm_driver_init+0x50>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	6193      	str	r3, [r2, #24]
	state.ch2 = ch2;
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <pwm_driver_init+0x50>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	61d3      	str	r3, [r2, #28]
	state.ch3 = ch3;
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <pwm_driver_init+0x50>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	6213      	str	r3, [r2, #32]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	20000258 	.word	0x20000258

0800149c <pwm_driver_set>:

void pwm_driver_set(uint8_t channel, uint8_t value){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
	// bounds check
	assert(channel >= 0);
	assert(channel < 4);
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d905      	bls.n	80014be <pwm_driver_set+0x22>
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <pwm_driver_set+0x68>)
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <pwm_driver_set+0x6c>)
 80014b6:	212a      	movs	r1, #42	; 0x2a
 80014b8:	4814      	ldr	r0, [pc, #80]	; (800150c <pwm_driver_set+0x70>)
 80014ba:	f002 f865 	bl	8003588 <__assert_func>

	// update compare register
	switch (channel){
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d81b      	bhi.n	80014fc <pwm_driver_set+0x60>
 80014c4:	a201      	add	r2, pc, #4	; (adr r2, 80014cc <pwm_driver_set+0x30>)
 80014c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ca:	bf00      	nop
 80014cc:	080014dd 	.word	0x080014dd
 80014d0:	080014e5 	.word	0x080014e5
 80014d4:	080014ed 	.word	0x080014ed
 80014d8:	080014f5 	.word	0x080014f5
	case 0:
		state.ch0_compare = value;
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <pwm_driver_set+0x74>)
 80014e0:	6053      	str	r3, [r2, #4]
		break;
 80014e2:	e00b      	b.n	80014fc <pwm_driver_set+0x60>
	case 1:
		state.ch1_compare = value;
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <pwm_driver_set+0x74>)
 80014e8:	6093      	str	r3, [r2, #8]
		break;
 80014ea:	e007      	b.n	80014fc <pwm_driver_set+0x60>
	case 2:
		state.ch2_compare = value;
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <pwm_driver_set+0x74>)
 80014f0:	60d3      	str	r3, [r2, #12]
		break;
 80014f2:	e003      	b.n	80014fc <pwm_driver_set+0x60>
	case 3:
		state.ch3_compare = value;
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	4a06      	ldr	r2, [pc, #24]	; (8001510 <pwm_driver_set+0x74>)
 80014f8:	6113      	str	r3, [r2, #16]
	// no default as have assertions
	}
}
 80014fa:	e7ff      	b.n	80014fc <pwm_driver_set+0x60>
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	08006030 	.word	0x08006030
 8001508:	08006058 	.word	0x08006058
 800150c:	0800603c 	.word	0x0800603c
 8001510:	20000258 	.word	0x20000258

08001514 <pwm_driver_update>:

void pwm_driver_update(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	// update ch0
	if(state.ch0_compare > state.counter){
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <pwm_driver_update+0xa4>)
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <pwm_driver_update+0xa4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d905      	bls.n	8001530 <pwm_driver_update+0x1c>
		led_on(state.ch0);
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <pwm_driver_update+0xa4>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fef6 	bl	800131a <led_on>
 800152e:	e004      	b.n	800153a <pwm_driver_update+0x26>
	} else {
		led_off(state.ch0);
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <pwm_driver_update+0xa4>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff08 	bl	800134a <led_off>
	}
	// update ch1
	if(state.ch1_compare > state.counter){
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <pwm_driver_update+0xa4>)
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <pwm_driver_update+0xa4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d905      	bls.n	8001552 <pwm_driver_update+0x3e>
		led_on(state.ch1);
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <pwm_driver_update+0xa4>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fee5 	bl	800131a <led_on>
 8001550:	e004      	b.n	800155c <pwm_driver_update+0x48>
	} else {
		led_off(state.ch1);
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <pwm_driver_update+0xa4>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fef7 	bl	800134a <led_off>
	}
	// update ch2
	if(state.ch2_compare > state.counter){
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <pwm_driver_update+0xa4>)
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <pwm_driver_update+0xa4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d905      	bls.n	8001574 <pwm_driver_update+0x60>
		led_on(state.ch2);
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <pwm_driver_update+0xa4>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fed4 	bl	800131a <led_on>
 8001572:	e004      	b.n	800157e <pwm_driver_update+0x6a>
	} else {
		led_off(state.ch2);
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <pwm_driver_update+0xa4>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fee6 	bl	800134a <led_off>
	}
	// update ch3
	if(state.ch3_compare > state.counter){
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <pwm_driver_update+0xa4>)
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <pwm_driver_update+0xa4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d905      	bls.n	8001596 <pwm_driver_update+0x82>
		led_on(state.ch3);
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <pwm_driver_update+0xa4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fec3 	bl	800131a <led_on>
 8001594:	e004      	b.n	80015a0 <pwm_driver_update+0x8c>
	} else {
		led_off(state.ch3);
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <pwm_driver_update+0xa4>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fed5 	bl	800134a <led_off>
	}

	// update counter value
	if(state.counter++ > PWM_MAX){
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <pwm_driver_update+0xa4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	4904      	ldr	r1, [pc, #16]	; (80015b8 <pwm_driver_update+0xa4>)
 80015a8:	600a      	str	r2, [r1, #0]
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d902      	bls.n	80015b4 <pwm_driver_update+0xa0>
		state.counter = 0;
 80015ae:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <pwm_driver_update+0xa4>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
	}
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000258 	.word	0x20000258

080015bc <SPIAcc_Init>:
#include "stm32f4xx_it.h"
#include "stm32f4xx_hal_adc.h"
SPI_HandleTypeDef hspi1;


void SPIAcc_Init(void){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
            GPIO_InitTypeDef GPIO_InitTypeDefStruct;
            // Enable clock to SPI1
            hspi1.Instance = SPI1;
 80015c2:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <SPIAcc_Init+0x10c>)
 80015c4:	4a41      	ldr	r2, [pc, #260]	; (80016cc <SPIAcc_Init+0x110>)
 80015c6:	601a      	str	r2, [r3, #0]
            __HAL_RCC_SPI1_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <SPIAcc_Init+0x114>)
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	4a3f      	ldr	r2, [pc, #252]	; (80016d0 <SPIAcc_Init+0x114>)
 80015d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d6:	6453      	str	r3, [r2, #68]	; 0x44
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <SPIAcc_Init+0x114>)
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
            // Setup SPI to be master
            hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015e4:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <SPIAcc_Init+0x10c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
            hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <SPIAcc_Init+0x10c>)
 80015ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f0:	605a      	str	r2, [r3, #4]
            hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f2:	4b35      	ldr	r3, [pc, #212]	; (80016c8 <SPIAcc_Init+0x10c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
            hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f8:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <SPIAcc_Init+0x10c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
            hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <SPIAcc_Init+0x10c>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
            hspi1.Init.NSS = SPI_NSS_SOFT;
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <SPIAcc_Init+0x10c>)
 8001606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160a:	619a      	str	r2, [r3, #24]
            hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <SPIAcc_Init+0x10c>)
 800160e:	2238      	movs	r2, #56	; 0x38
 8001610:	61da      	str	r2, [r3, #28]
            hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <SPIAcc_Init+0x10c>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
            hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <SPIAcc_Init+0x10c>)
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
            hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <SPIAcc_Init+0x10c>)
 8001620:	2200      	movs	r2, #0
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
            hspi1.Init.CRCPolynomial = 10;
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <SPIAcc_Init+0x10c>)
 8001626:	220a      	movs	r2, #10
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
            HAL_SPI_Init(&hspi1);
 800162a:	4827      	ldr	r0, [pc, #156]	; (80016c8 <SPIAcc_Init+0x10c>)
 800162c:	f001 f954 	bl	80028d8 <HAL_SPI_Init>
            // Enable clocks to Ports A and E
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <SPIAcc_Init+0x114>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <SPIAcc_Init+0x114>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6313      	str	r3, [r2, #48]	; 0x30
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <SPIAcc_Init+0x114>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
            __HAL_RCC_GPIOE_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <SPIAcc_Init+0x114>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <SPIAcc_Init+0x114>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <SPIAcc_Init+0x114>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	683b      	ldr	r3, [r7, #0]
            //RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOE , ENABLE);
            // Set SPI pins on PortA (A5,A6,A7) to Alternate Function Mode
            GPIO_InitTypeDefStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_6;
 8001668:	23e0      	movs	r3, #224	; 0xe0
 800166a:	60fb      	str	r3, [r7, #12]
            GPIO_InitTypeDefStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	613b      	str	r3, [r7, #16]
            GPIO_InitTypeDefStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001670:	2302      	movs	r3, #2
 8001672:	61bb      	str	r3, [r7, #24]
            // Connect the PortA pins to the alternate function
            GPIO_InitTypeDefStruct.Alternate = GPIO_AF5_SPI1;
 8001674:	2305      	movs	r3, #5
 8001676:	61fb      	str	r3, [r7, #28]
            //GPIO_InitTypeDefStruct.GPIO_OType = GPIO_OType_PP;
            GPIO_InitTypeDefStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
            HAL_GPIO_Init(GPIOA, &GPIO_InitTypeDefStruct);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4619      	mov	r1, r3
 8001682:	4814      	ldr	r0, [pc, #80]	; (80016d4 <SPIAcc_Init+0x118>)
 8001684:	f000 fb58 	bl	8001d38 <HAL_GPIO_Init>
            // Pin E3 is SPI_CS (chip select) 
            GPIO_InitTypeDefStruct.Pin = GPIO_PIN_3;
 8001688:	2308      	movs	r3, #8
 800168a:	60fb      	str	r3, [r7, #12]
            GPIO_InitTypeDefStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
            GPIO_InitTypeDefStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
            GPIO_InitTypeDefStruct.Pull = GPIO_PULLUP;
 8001694:	2301      	movs	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
            HAL_GPIO_Init(GPIOE, &GPIO_InitTypeDefStruct);
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	4619      	mov	r1, r3
 800169e:	480e      	ldr	r0, [pc, #56]	; (80016d8 <SPIAcc_Init+0x11c>)
 80016a0:	f000 fb4a 	bl	8001d38 <HAL_GPIO_Init>
            // Hold CS high 
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2108      	movs	r1, #8
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <SPIAcc_Init+0x11c>)
 80016aa:	f000 fce1 	bl	8002070 <HAL_GPIO_WritePin>
            // Enable the SPI module
            __HAL_SPI_ENABLE(&hspi1);
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <SPIAcc_Init+0x10c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SPIAcc_Init+0x10c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016bc:	601a      	str	r2, [r3, #0]
}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000027c 	.word	0x2000027c
 80016cc:	40013000 	.word	0x40013000
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40021000 	.word	0x40021000

080016dc <SPIAcc_Send>:
 

void SPIAcc_Send(uint8_t address, uint8_t* data, uint8_t size){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	4613      	mov	r3, r2
 80016ea:	71bb      	strb	r3, [r7, #6]

	uint8_t spiReg = address;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2108      	movs	r1, #8
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <SPIAcc_Send+0x4c>)
 80016f6:	f000 fcbb 	bl	8002070 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, &spiReg, 1, 10);
 80016fa:	f107 010f 	add.w	r1, r7, #15
 80016fe:	230a      	movs	r3, #10
 8001700:	2201      	movs	r2, #1
 8001702:	480a      	ldr	r0, [pc, #40]	; (800172c <SPIAcc_Send+0x50>)
 8001704:	f001 f956 	bl	80029b4 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, data, size, 10);
 8001708:	79bb      	ldrb	r3, [r7, #6]
 800170a:	b29a      	uxth	r2, r3
 800170c:	230a      	movs	r3, #10
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	4806      	ldr	r0, [pc, #24]	; (800172c <SPIAcc_Send+0x50>)
 8001712:	f001 f94f 	bl	80029b4 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	2108      	movs	r1, #8
 800171a:	4803      	ldr	r0, [pc, #12]	; (8001728 <SPIAcc_Send+0x4c>)
 800171c:	f000 fca8 	bl	8002070 <HAL_GPIO_WritePin>
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	2000027c 	.word	0x2000027c

08001730 <SPIAcc_Get>:
 

void SPIAcc_Get(uint8_t address, uint8_t* data, uint8_t size){
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	4613      	mov	r3, r2
 800173e:	71bb      	strb	r3, [r7, #6]

	uint8_t spiBuf[4];
	spiBuf[0] = address | 0x80;
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001746:	b2db      	uxtb	r3, r3
 8001748:	723b      	strb	r3, [r7, #8]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2108      	movs	r1, #8
 800174e:	4818      	ldr	r0, [pc, #96]	; (80017b0 <SPIAcc_Get+0x80>)
 8001750:	f000 fc8e 	bl	8002070 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, spiBuf, 1, 100);
 8001754:	f107 0108 	add.w	r1, r7, #8
 8001758:	2364      	movs	r3, #100	; 0x64
 800175a:	2201      	movs	r2, #1
 800175c:	4815      	ldr	r0, [pc, #84]	; (80017b4 <SPIAcc_Get+0x84>)
 800175e:	f001 f929 	bl	80029b4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, spiBuf, size, 100);
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	b29a      	uxth	r2, r3
 8001766:	f107 0108 	add.w	r1, r7, #8
 800176a:	2364      	movs	r3, #100	; 0x64
 800176c:	4811      	ldr	r0, [pc, #68]	; (80017b4 <SPIAcc_Get+0x84>)
 800176e:	f001 fa55 	bl	8002c1c <HAL_SPI_Receive>


    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	2108      	movs	r1, #8
 8001776:	480e      	ldr	r0, [pc, #56]	; (80017b0 <SPIAcc_Get+0x80>)
 8001778:	f000 fc7a 	bl	8002070 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e00b      	b.n	800179a <SPIAcc_Get+0x6a>
	{
		data[i] = spiBuf[i];
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	6839      	ldr	r1, [r7, #0]
 8001788:	440b      	add	r3, r1
 800178a:	3210      	adds	r2, #16
 800178c:	443a      	add	r2, r7
 800178e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8001792:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	3301      	adds	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dbed      	blt.n	8001782 <SPIAcc_Get+0x52>
	}

}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	2000027c 	.word	0x2000027c

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_MspInit+0x4c>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_MspInit+0x4c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_MspInit+0x4c>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_MspInit+0x4c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f93e 	bl	8001ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
	return 1;
 8001860:	2301      	movs	r3, #1
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_kill>:

int _kill(int pid, int sig)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001876:	f001 fea5 	bl	80035c4 <__errno>
 800187a:	4603      	mov	r3, r0
 800187c:	2216      	movs	r2, #22
 800187e:	601a      	str	r2, [r3, #0]
	return -1;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_exit>:

void _exit (int status)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ffe7 	bl	800186c <_kill>
	while (1) {}		/* Make sure we hang here */
 800189e:	e7fe      	b.n	800189e <_exit+0x12>

080018a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e00a      	b.n	80018c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018b2:	f3af 8000 	nop.w
 80018b6:	4601      	mov	r1, r0
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	60ba      	str	r2, [r7, #8]
 80018be:	b2ca      	uxtb	r2, r1
 80018c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf0      	blt.n	80018b2 <_read+0x12>
	}

return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_close>:
	}
	return len;
}

int _close(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
	return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001902:	605a      	str	r2, [r3, #4]
	return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_isatty>:

int _isatty(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
	return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f001 fe26 	bl	80035c4 <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20020000 	.word	0x20020000
 80019a4:	00000400 	.word	0x00000400
 80019a8:	200002d4 	.word	0x200002d4
 80019ac:	200002f0 	.word	0x200002f0

080019b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <SystemInit+0x28>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <SystemInit+0x28>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <SystemInit+0x28>)
 80019c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ca:	609a      	str	r2, [r3, #8]
#endif
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019e2:	490e      	ldr	r1, [pc, #56]	; (8001a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e4:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f8:	4c0b      	ldr	r4, [pc, #44]	; (8001a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a06:	f7ff ffd3 	bl	80019b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f001 fdf3 	bl	80035f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f7ff fcfa 	bl	8001406 <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a20:	08006468 	.word	0x08006468
  ldr r2, =_sbss
 8001a24:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a28:	200002ec 	.word	0x200002ec

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_Init+0x40>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_Init+0x40>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_Init+0x40>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 f92b 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f808 	bl	8001a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fea8 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_InitTick+0x54>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f943 	bl	8001d1e <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00e      	b.n	8001ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d80a      	bhi.n	8001abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab0:	f000 f90b 	bl	8001cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <HAL_InitTick+0x5c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008
 8001af8:	200002d8 	.word	0x200002d8

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200002d8 	.word	0x200002d8

08001b14 <__NVIC_SetPriorityGrouping>:
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b30:	4013      	ands	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__NVIC_SetPriorityGrouping+0x44>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	60d3      	str	r3, [r2, #12]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_GetPriorityGrouping>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <__NVIC_GetPriorityGrouping+0x18>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	f003 0307 	and.w	r3, r3, #7
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_EnableIRQ>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4907      	ldr	r1, [pc, #28]	; (8001bb0 <__NVIC_EnableIRQ+0x38>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	2001      	movs	r0, #1
 8001b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	; (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <SysTick_Config>:
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c80:	d301      	bcc.n	8001c86 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2301      	movs	r3, #1
 8001c84:	e00f      	b.n	8001ca6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <SysTick_Config+0x40>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8e:	210f      	movs	r1, #15
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c94:	f7ff ff8e 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <SysTick_Config+0x40>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9e:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <SysTick_Config+0x40>)
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	e000e010 	.word	0xe000e010

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff ff29 	bl	8001b14 <__NVIC_SetPriorityGrouping>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cdc:	f7ff ff3e 	bl	8001b5c <__NVIC_GetPriorityGrouping>
 8001ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	68b9      	ldr	r1, [r7, #8]
 8001ce6:	6978      	ldr	r0, [r7, #20]
 8001ce8:	f7ff ff8e 	bl	8001c08 <NVIC_EncodePriority>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff5d 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cfa:	bf00      	nop
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff31 	bl	8001b78 <__NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffa2 	bl	8001c70 <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e16b      	b.n	800202c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	f040 815a 	bne.w	8002026 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d00b      	beq.n	8001d92 <HAL_GPIO_Init+0x5a>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d007      	beq.n	8001d92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d86:	2b11      	cmp	r3, #17
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d130      	bne.n	8001df4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc8:	2201      	movs	r2, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 0201 	and.w	r2, r3, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0xfc>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b12      	cmp	r3, #18
 8001e32:	d123      	bne.n	8001e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	08da      	lsrs	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3208      	adds	r2, #8
 8001e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	08da      	lsrs	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3208      	adds	r2, #8
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80b4 	beq.w	8002026 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b60      	ldr	r3, [pc, #384]	; (8002044 <HAL_GPIO_Init+0x30c>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a5f      	ldr	r2, [pc, #380]	; (8002044 <HAL_GPIO_Init+0x30c>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b5d      	ldr	r3, [pc, #372]	; (8002044 <HAL_GPIO_Init+0x30c>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eda:	4a5b      	ldr	r2, [pc, #364]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_GPIO_Init+0x314>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02b      	beq.n	8001f5e <HAL_GPIO_Init+0x226>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a51      	ldr	r2, [pc, #324]	; (8002050 <HAL_GPIO_Init+0x318>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d025      	beq.n	8001f5a <HAL_GPIO_Init+0x222>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a50      	ldr	r2, [pc, #320]	; (8002054 <HAL_GPIO_Init+0x31c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <HAL_GPIO_Init+0x21e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4f      	ldr	r2, [pc, #316]	; (8002058 <HAL_GPIO_Init+0x320>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x21a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4e      	ldr	r2, [pc, #312]	; (800205c <HAL_GPIO_Init+0x324>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x216>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4d      	ldr	r2, [pc, #308]	; (8002060 <HAL_GPIO_Init+0x328>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x212>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4c      	ldr	r2, [pc, #304]	; (8002064 <HAL_GPIO_Init+0x32c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x20e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <HAL_GPIO_Init+0x330>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x20a>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e00e      	b.n	8001f60 <HAL_GPIO_Init+0x228>
 8001f42:	2308      	movs	r3, #8
 8001f44:	e00c      	b.n	8001f60 <HAL_GPIO_Init+0x228>
 8001f46:	2306      	movs	r3, #6
 8001f48:	e00a      	b.n	8001f60 <HAL_GPIO_Init+0x228>
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	e008      	b.n	8001f60 <HAL_GPIO_Init+0x228>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x228>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e004      	b.n	8001f60 <HAL_GPIO_Init+0x228>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_Init+0x228>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_Init+0x228>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f70:	4935      	ldr	r1, [pc, #212]	; (8002048 <HAL_GPIO_Init+0x310>)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_GPIO_Init+0x334>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa2:	4a32      	ldr	r2, [pc, #200]	; (800206c <HAL_GPIO_Init+0x334>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fa8:	4b30      	ldr	r3, [pc, #192]	; (800206c <HAL_GPIO_Init+0x334>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fcc:	4a27      	ldr	r2, [pc, #156]	; (800206c <HAL_GPIO_Init+0x334>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_GPIO_Init+0x334>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_GPIO_Init+0x334>)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_GPIO_Init+0x334>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002020:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_GPIO_Init+0x334>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3301      	adds	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	2b0f      	cmp	r3, #15
 8002030:	f67f ae90 	bls.w	8001d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40013800 	.word	0x40013800
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400
 8002054:	40020800 	.word	0x40020800
 8002058:	40020c00 	.word	0x40020c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40021400 	.word	0x40021400
 8002064:	40021800 	.word	0x40021800
 8002068:	40021c00 	.word	0x40021c00
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e25e      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d075      	beq.n	80021ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020c2:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d00c      	beq.n	80020e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ce:	4b85      	ldr	r3, [pc, #532]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d112      	bne.n	8002100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020da:	4b82      	ldr	r3, [pc, #520]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e6:	d10b      	bne.n	8002100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e8:	4b7e      	ldr	r3, [pc, #504]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d05b      	beq.n	80021ac <HAL_RCC_OscConfig+0x108>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d157      	bne.n	80021ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e239      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002108:	d106      	bne.n	8002118 <HAL_RCC_OscConfig+0x74>
 800210a:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a75      	ldr	r2, [pc, #468]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e01d      	b.n	8002154 <HAL_RCC_OscConfig+0xb0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x98>
 8002122:	4b70      	ldr	r3, [pc, #448]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a6f      	ldr	r2, [pc, #444]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a6c      	ldr	r2, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0xb0>
 800213c:	4b69      	ldr	r3, [pc, #420]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a68      	ldr	r2, [pc, #416]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b66      	ldr	r3, [pc, #408]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a65      	ldr	r2, [pc, #404]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 800214e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d013      	beq.n	8002184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff fcce 	bl	8001afc <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002164:	f7ff fcca 	bl	8001afc <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b64      	cmp	r3, #100	; 0x64
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e1fe      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	4b5b      	ldr	r3, [pc, #364]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0xc0>
 8002182:	e014      	b.n	80021ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fcba 	bl	8001afc <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fcb6 	bl	8001afc <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e1ea      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	4b51      	ldr	r3, [pc, #324]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0xe8>
 80021aa:	e000      	b.n	80021ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d063      	beq.n	8002282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ba:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00b      	beq.n	80021de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d11c      	bne.n	800220c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021d2:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d116      	bne.n	800220c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_RCC_OscConfig+0x152>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e1be      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4937      	ldr	r1, [pc, #220]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	e03a      	b.n	8002282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <HAL_RCC_OscConfig+0x244>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7ff fc6f 	bl	8001afc <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002222:	f7ff fc6b 	bl	8001afc <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e19f      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4925      	ldr	r1, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e015      	b.n	8002282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <HAL_RCC_OscConfig+0x244>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff fc4e 	bl	8001afc <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002264:	f7ff fc4a 	bl	8001afc <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e17e      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d036      	beq.n	80022fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d016      	beq.n	80022c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_RCC_OscConfig+0x248>)
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7ff fc2e 	bl	8001afc <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a4:	f7ff fc2a 	bl	8001afc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e15e      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_OscConfig+0x240>)
 80022b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x200>
 80022c2:	e01b      	b.n	80022fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_RCC_OscConfig+0x248>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7ff fc17 	bl	8001afc <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	e00e      	b.n	80022f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d2:	f7ff fc13 	bl	8001afc <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d907      	bls.n	80022f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e147      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
 80022e4:	40023800 	.word	0x40023800
 80022e8:	42470000 	.word	0x42470000
 80022ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80022f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ea      	bne.n	80022d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 8097 	beq.w	8002438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230e:	4b81      	ldr	r3, [pc, #516]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10f      	bne.n	800233a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b7d      	ldr	r3, [pc, #500]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a7c      	ldr	r2, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b77      	ldr	r3, [pc, #476]	; (8002518 <HAL_RCC_OscConfig+0x474>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b74      	ldr	r3, [pc, #464]	; (8002518 <HAL_RCC_OscConfig+0x474>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a73      	ldr	r2, [pc, #460]	; (8002518 <HAL_RCC_OscConfig+0x474>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7ff fbd3 	bl	8001afc <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7ff fbcf 	bl	8001afc <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e103      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <HAL_RCC_OscConfig+0x474>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x2ea>
 8002380:	4b64      	ldr	r3, [pc, #400]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	4a63      	ldr	r2, [pc, #396]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6713      	str	r3, [r2, #112]	; 0x70
 800238c:	e01c      	b.n	80023c8 <HAL_RCC_OscConfig+0x324>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x30c>
 8002396:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a5e      	ldr	r2, [pc, #376]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a5b      	ldr	r2, [pc, #364]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0x324>
 80023b0:	4b58      	ldr	r3, [pc, #352]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a57      	ldr	r2, [pc, #348]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
 80023bc:	4b55      	ldr	r3, [pc, #340]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023c2:	f023 0304 	bic.w	r3, r3, #4
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7ff fb94 	bl	8001afc <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7ff fb90 	bl	8001afc <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0c2      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ee:	4b49      	ldr	r3, [pc, #292]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0ee      	beq.n	80023d8 <HAL_RCC_OscConfig+0x334>
 80023fa:	e014      	b.n	8002426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fc:	f7ff fb7e 	bl	8001afc <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7ff fb7a 	bl	8001afc <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e0ac      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241a:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ee      	bne.n	8002404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4a38      	ldr	r2, [pc, #224]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8098 	beq.w	8002572 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002442:	4b34      	ldr	r3, [pc, #208]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b08      	cmp	r3, #8
 800244c:	d05c      	beq.n	8002508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d141      	bne.n	80024da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_RCC_OscConfig+0x478>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fb4e 	bl	8001afc <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002464:	f7ff fb4a 	bl	8001afc <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e07e      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69da      	ldr	r2, [r3, #28]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	085b      	lsrs	r3, r3, #1
 800249a:	3b01      	subs	r3, #1
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	061b      	lsls	r3, r3, #24
 80024a6:	491b      	ldr	r1, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_RCC_OscConfig+0x478>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7ff fb23 	bl	8001afc <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff fb1f 	bl	8001afc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e053      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x416>
 80024d8:	e04b      	b.n	8002572 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_RCC_OscConfig+0x478>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fb0c 	bl	8001afc <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff fb08 	bl	8001afc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e03c      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_OscConfig+0x470>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x444>
 8002506:	e034      	b.n	8002572 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e02f      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
 8002514:	40023800 	.word	0x40023800
 8002518:	40007000 	.word	0x40007000
 800251c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_RCC_OscConfig+0x4d8>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	429a      	cmp	r2, r3
 8002532:	d11c      	bne.n	800256e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d115      	bne.n	800256e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002548:	4013      	ands	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800254e:	4293      	cmp	r3, r2
 8002550:	d10d      	bne.n	800256e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0cc      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b68      	ldr	r3, [pc, #416]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d90c      	bls.n	80025bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b63      	ldr	r3, [pc, #396]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0b8      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d4:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4a52      	ldr	r2, [pc, #328]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f8:	4b50      	ldr	r3, [pc, #320]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	494d      	ldr	r1, [pc, #308]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d044      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d119      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e07f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d003      	beq.n	800263e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800263a:	2b03      	cmp	r3, #3
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b3f      	ldr	r3, [pc, #252]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e067      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4934      	ldr	r1, [pc, #208]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002670:	f7ff fa44 	bl	8001afc <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7ff fa40 	bl	8001afc <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e04f      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d20c      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_RCC_ClockConfig+0x1b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e032      	b.n	800272e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4916      	ldr	r1, [pc, #88]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	490e      	ldr	r1, [pc, #56]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002706:	f000 f821 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800270a:	4602      	mov	r2, r0
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	490a      	ldr	r1, [pc, #40]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	5ccb      	ldrb	r3, [r1, r3]
 800271a:	fa22 f303 	lsr.w	r3, r2, r3
 800271e:	4a09      	ldr	r2, [pc, #36]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f9a4 	bl	8001a74 <HAL_InitTick>

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40023c00 	.word	0x40023c00
 800273c:	40023800 	.word	0x40023800
 8002740:	08006068 	.word	0x08006068
 8002744:	20000000 	.word	0x20000000
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002750:	b090      	sub	sp, #64	; 0x40
 8002752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
 8002758:	2300      	movs	r3, #0
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275c:	2300      	movs	r3, #0
 800275e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b08      	cmp	r3, #8
 800276e:	d00d      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x40>
 8002770:	2b08      	cmp	r3, #8
 8002772:	f200 80a1 	bhi.w	80028b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x34>
 800277a:	2b04      	cmp	r3, #4
 800277c:	d003      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x3a>
 800277e:	e09b      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002780:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002782:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002784:	e09b      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002786:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002788:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800278a:	e098      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800278c:	4b4f      	ldr	r3, [pc, #316]	; (80028cc <HAL_RCC_GetSysClockFreq+0x180>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002796:	4b4d      	ldr	r3, [pc, #308]	; (80028cc <HAL_RCC_GetSysClockFreq+0x180>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d028      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a2:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <HAL_RCC_GetSysClockFreq+0x180>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	099b      	lsrs	r3, r3, #6
 80027a8:	2200      	movs	r2, #0
 80027aa:	623b      	str	r3, [r7, #32]
 80027ac:	627a      	str	r2, [r7, #36]	; 0x24
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027b4:	2100      	movs	r1, #0
 80027b6:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80027b8:	fb03 f201 	mul.w	r2, r3, r1
 80027bc:	2300      	movs	r3, #0
 80027be:	fb00 f303 	mul.w	r3, r0, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	4a43      	ldr	r2, [pc, #268]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80027c6:	fba0 1202 	umull	r1, r2, r0, r2
 80027ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027cc:	460a      	mov	r2, r1
 80027ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80027d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d2:	4413      	add	r3, r2
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	2200      	movs	r2, #0
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	61fa      	str	r2, [r7, #28]
 80027de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027e6:	f7fe f9df 	bl	8000ba8 <__aeabi_uldivmod>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4613      	mov	r3, r2
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f2:	e053      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f4:	4b35      	ldr	r3, [pc, #212]	; (80028cc <HAL_RCC_GetSysClockFreq+0x180>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	2200      	movs	r2, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	617a      	str	r2, [r7, #20]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002806:	f04f 0b00 	mov.w	fp, #0
 800280a:	4652      	mov	r2, sl
 800280c:	465b      	mov	r3, fp
 800280e:	f04f 0000 	mov.w	r0, #0
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	0159      	lsls	r1, r3, #5
 8002818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281c:	0150      	lsls	r0, r2, #5
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	ebb2 080a 	subs.w	r8, r2, sl
 8002826:	eb63 090b 	sbc.w	r9, r3, fp
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002836:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800283a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800283e:	ebb2 0408 	subs.w	r4, r2, r8
 8002842:	eb63 0509 	sbc.w	r5, r3, r9
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	00eb      	lsls	r3, r5, #3
 8002850:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002854:	00e2      	lsls	r2, r4, #3
 8002856:	4614      	mov	r4, r2
 8002858:	461d      	mov	r5, r3
 800285a:	eb14 030a 	adds.w	r3, r4, sl
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	eb45 030b 	adc.w	r3, r5, fp
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002872:	4629      	mov	r1, r5
 8002874:	028b      	lsls	r3, r1, #10
 8002876:	4621      	mov	r1, r4
 8002878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800287c:	4621      	mov	r1, r4
 800287e:	028a      	lsls	r2, r1, #10
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002886:	2200      	movs	r2, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	60fa      	str	r2, [r7, #12]
 800288c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002890:	f7fe f98a 	bl	8000ba8 <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4613      	mov	r3, r2
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_GetSysClockFreq+0x180>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	3301      	adds	r3, #1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028b6:	e002      	b.n	80028be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3740      	adds	r7, #64	; 0x40
 80028c4:	46bd      	mov	sp, r7
 80028c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	00f42400 	.word	0x00f42400
 80028d4:	017d7840 	.word	0x017d7840

080028d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e056      	b.n	8002998 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d106      	bne.n	800290a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f84b 	bl	80029a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2202      	movs	r2, #2
 800290e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002920:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	ea42 0103 	orr.w	r1, r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	0c1b      	lsrs	r3, r3, #16
 8002968:	f003 0104 	and.w	r1, r3, #4
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002986:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_SPI_Transmit+0x22>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e11e      	b.n	8002c14 <HAL_SPI_Transmit+0x260>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029de:	f7ff f88d 	bl	8001afc <HAL_GetTick>
 80029e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d002      	beq.n	80029fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
 80029f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029f8:	e103      	b.n	8002c02 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_SPI_Transmit+0x52>
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a0a:	e0fa      	b.n	8002c02 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2203      	movs	r2, #3
 8002a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a52:	d107      	bne.n	8002a64 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d007      	beq.n	8002a82 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a8a:	d14b      	bne.n	8002b24 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_SPI_Transmit+0xe6>
 8002a94:	8afb      	ldrh	r3, [r7, #22]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d13e      	bne.n	8002b18 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	881a      	ldrh	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	1c9a      	adds	r2, r3, #2
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002abe:	e02b      	b.n	8002b18 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d112      	bne.n	8002af4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	881a      	ldrh	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	1c9a      	adds	r2, r3, #2
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002af2:	e011      	b.n	8002b18 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af4:	f7ff f802 	bl	8001afc <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d803      	bhi.n	8002b0c <HAL_SPI_Transmit+0x158>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b0a:	d102      	bne.n	8002b12 <HAL_SPI_Transmit+0x15e>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b16:	e074      	b.n	8002c02 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1ce      	bne.n	8002ac0 <HAL_SPI_Transmit+0x10c>
 8002b22:	e04c      	b.n	8002bbe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_SPI_Transmit+0x17e>
 8002b2c:	8afb      	ldrh	r3, [r7, #22]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d140      	bne.n	8002bb4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b58:	e02c      	b.n	8002bb4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d113      	bne.n	8002b90 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	7812      	ldrb	r2, [r2, #0]
 8002b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b8e:	e011      	b.n	8002bb4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b90:	f7fe ffb4 	bl	8001afc <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d803      	bhi.n	8002ba8 <HAL_SPI_Transmit+0x1f4>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba6:	d102      	bne.n	8002bae <HAL_SPI_Transmit+0x1fa>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bb2:	e026      	b.n	8002c02 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1cd      	bne.n	8002b5a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fba4 	bl	8003310 <SPI_EndRxTxTransaction>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e000      	b.n	8002c02 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002c00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c38:	d112      	bne.n	8002c60 <HAL_SPI_Receive+0x44>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10e      	bne.n	8002c60 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2204      	movs	r2, #4
 8002c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f8e9 	bl	8002e2e <HAL_SPI_TransmitReceive>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	e0e2      	b.n	8002e26 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_SPI_Receive+0x52>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e0db      	b.n	8002e26 <HAL_SPI_Receive+0x20a>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c76:	f7fe ff41 	bl	8001afc <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d002      	beq.n	8002c8e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c8c:	e0c2      	b.n	8002e14 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_SPI_Receive+0x7e>
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c9e:	e0b9      	b.n	8002e14 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce6:	d107      	bne.n	8002cf8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cf6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d02:	2b40      	cmp	r3, #64	; 0x40
 8002d04:	d007      	beq.n	8002d16 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d162      	bne.n	8002de4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d1e:	e02e      	b.n	8002d7e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d115      	bne.n	8002d5a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f103 020c 	add.w	r2, r3, #12
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	7812      	ldrb	r2, [r2, #0]
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d58:	e011      	b.n	8002d7e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5a:	f7fe fecf 	bl	8001afc <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d803      	bhi.n	8002d72 <HAL_SPI_Receive+0x156>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Receive+0x15c>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d7c:	e04a      	b.n	8002e14 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1cb      	bne.n	8002d20 <HAL_SPI_Receive+0x104>
 8002d88:	e031      	b.n	8002dee <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d113      	bne.n	8002dc0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	b292      	uxth	r2, r2
 8002da4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	1c9a      	adds	r2, r3, #2
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dbe:	e011      	b.n	8002de4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc0:	f7fe fe9c 	bl	8001afc <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d803      	bhi.n	8002dd8 <HAL_SPI_Receive+0x1bc>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd6:	d102      	bne.n	8002dde <HAL_SPI_Receive+0x1c2>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002de2:	e017      	b.n	8002e14 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1cd      	bne.n	8002d8a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fa27 	bl	8003246 <SPI_EndRxTransaction>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
 8002e10:	e000      	b.n	8002e14 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002e12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b08c      	sub	sp, #48	; 0x30
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x26>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e18a      	b.n	800316a <HAL_SPI_TransmitReceive+0x33c>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e5c:	f7fe fe4e 	bl	8001afc <HAL_GetTick>
 8002e60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d00f      	beq.n	8002e9e <HAL_SPI_TransmitReceive+0x70>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e84:	d107      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x68>
 8002e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d003      	beq.n	8002e9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
 8002e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e9c:	e15b      	b.n	8003156 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_SPI_TransmitReceive+0x82>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_SPI_TransmitReceive+0x82>
 8002eaa:	887b      	ldrh	r3, [r7, #2]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002eb6:	e14e      	b.n	8003156 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d003      	beq.n	8002ecc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	887a      	ldrh	r2, [r7, #2]
 8002ee2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	887a      	ldrh	r2, [r7, #2]
 8002eee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d007      	beq.n	8002f20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f28:	d178      	bne.n	800301c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_SPI_TransmitReceive+0x10a>
 8002f32:	8b7b      	ldrh	r3, [r7, #26]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d166      	bne.n	8003006 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	1c9a      	adds	r2, r3, #2
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f5c:	e053      	b.n	8003006 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x176>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x176>
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d113      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	881a      	ldrh	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d119      	bne.n	8002fe6 <HAL_SPI_TransmitReceive+0x1b8>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d014      	beq.n	8002fe6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	1c9a      	adds	r2, r3, #2
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fe6:	f7fe fd89 	bl	8001afc <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d807      	bhi.n	8003006 <HAL_SPI_TransmitReceive+0x1d8>
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ffc:	d003      	beq.n	8003006 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003004:	e0a7      	b.n	8003156 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1a6      	bne.n	8002f5e <HAL_SPI_TransmitReceive+0x130>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1a1      	bne.n	8002f5e <HAL_SPI_TransmitReceive+0x130>
 800301a:	e07c      	b.n	8003116 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_SPI_TransmitReceive+0x1fc>
 8003024:	8b7b      	ldrh	r3, [r7, #26]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d16b      	bne.n	8003102 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	330c      	adds	r3, #12
 8003034:	7812      	ldrb	r2, [r2, #0]
 8003036:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003050:	e057      	b.n	8003102 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	d11c      	bne.n	800309a <HAL_SPI_TransmitReceive+0x26c>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d017      	beq.n	800309a <HAL_SPI_TransmitReceive+0x26c>
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d114      	bne.n	800309a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	7812      	ldrb	r2, [r2, #0]
 800307c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d119      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x2ae>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d014      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030d8:	2301      	movs	r3, #1
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030dc:	f7fe fd0e 	bl	8001afc <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d803      	bhi.n	80030f4 <HAL_SPI_TransmitReceive+0x2c6>
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f2:	d102      	bne.n	80030fa <HAL_SPI_TransmitReceive+0x2cc>
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003100:	e029      	b.n	8003156 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1a2      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x224>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d19d      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f8f8 	bl	8003310 <SPI_EndRxTxTransaction>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003132:	e010      	b.n	8003156 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10b      	bne.n	8003154 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	e000      	b.n	8003156 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003154:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800316a:	4618      	mov	r0, r3
 800316c:	3730      	adds	r7, #48	; 0x30
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003182:	e04c      	b.n	800321e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318a:	d048      	beq.n	800321e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800318c:	f7fe fcb6 	bl	8001afc <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d902      	bls.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d13d      	bne.n	800321e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ba:	d111      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c4:	d004      	beq.n	80031d0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d107      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	d10f      	bne.n	800320a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003208:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e00f      	b.n	800323e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4013      	ands	r3, r2
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	429a      	cmp	r2, r3
 800323a:	d1a3      	bne.n	8003184 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af02      	add	r7, sp, #8
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800325a:	d111      	bne.n	8003280 <SPI_EndRxTransaction+0x3a>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003264:	d004      	beq.n	8003270 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326e:	d107      	bne.n	8003280 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003288:	d12a      	bne.n	80032e0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003292:	d012      	beq.n	80032ba <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2200      	movs	r2, #0
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7ff ff67 	bl	8003172 <SPI_WaitFlagStateUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d02d      	beq.n	8003306 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e026      	b.n	8003308 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2101      	movs	r1, #1
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f7ff ff54 	bl	8003172 <SPI_WaitFlagStateUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01a      	beq.n	8003306 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e013      	b.n	8003308 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2200      	movs	r2, #0
 80032e8:	2101      	movs	r1, #1
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7ff ff41 	bl	8003172 <SPI_WaitFlagStateUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fa:	f043 0220 	orr.w	r2, r3, #32
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e000      	b.n	8003308 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800331c:	4b1b      	ldr	r3, [pc, #108]	; (800338c <SPI_EndRxTxTransaction+0x7c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <SPI_EndRxTxTransaction+0x80>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0d5b      	lsrs	r3, r3, #21
 8003328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333a:	d112      	bne.n	8003362 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2200      	movs	r2, #0
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7ff ff13 	bl	8003172 <SPI_WaitFlagStateUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	f043 0220 	orr.w	r2, r3, #32
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e00f      	b.n	8003382 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3b01      	subs	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b80      	cmp	r3, #128	; 0x80
 800337a:	d0f2      	beq.n	8003362 <SPI_EndRxTxTransaction+0x52>
 800337c:	e000      	b.n	8003380 <SPI_EndRxTxTransaction+0x70>
        break;
 800337e:	bf00      	nop
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000000 	.word	0x20000000
 8003390:	165e9f81 	.word	0x165e9f81

08003394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e01d      	b.n	80033e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f815 	bl	80033ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f000 f838 	bl	8003448 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b085      	sub	sp, #20
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b06      	cmp	r3, #6
 8003426:	d007      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a40      	ldr	r2, [pc, #256]	; (800355c <TIM_Base_SetConfig+0x114>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003466:	d00f      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a3d      	ldr	r2, [pc, #244]	; (8003560 <TIM_Base_SetConfig+0x118>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00b      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3c      	ldr	r2, [pc, #240]	; (8003564 <TIM_Base_SetConfig+0x11c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a3b      	ldr	r2, [pc, #236]	; (8003568 <TIM_Base_SetConfig+0x120>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_Base_SetConfig+0x40>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a3a      	ldr	r2, [pc, #232]	; (800356c <TIM_Base_SetConfig+0x124>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2f      	ldr	r2, [pc, #188]	; (800355c <TIM_Base_SetConfig+0x114>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d02b      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a8:	d027      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2c      	ldr	r2, [pc, #176]	; (8003560 <TIM_Base_SetConfig+0x118>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d023      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2b      	ldr	r2, [pc, #172]	; (8003564 <TIM_Base_SetConfig+0x11c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01f      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <TIM_Base_SetConfig+0x120>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01b      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a29      	ldr	r2, [pc, #164]	; (800356c <TIM_Base_SetConfig+0x124>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d017      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a28      	ldr	r2, [pc, #160]	; (8003570 <TIM_Base_SetConfig+0x128>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a27      	ldr	r2, [pc, #156]	; (8003574 <TIM_Base_SetConfig+0x12c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00f      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a26      	ldr	r2, [pc, #152]	; (8003578 <TIM_Base_SetConfig+0x130>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00b      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a25      	ldr	r2, [pc, #148]	; (800357c <TIM_Base_SetConfig+0x134>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a24      	ldr	r2, [pc, #144]	; (8003580 <TIM_Base_SetConfig+0x138>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a23      	ldr	r2, [pc, #140]	; (8003584 <TIM_Base_SetConfig+0x13c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d108      	bne.n	800350c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <TIM_Base_SetConfig+0x114>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <TIM_Base_SetConfig+0xf8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a0c      	ldr	r2, [pc, #48]	; (800356c <TIM_Base_SetConfig+0x124>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d103      	bne.n	8003548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	615a      	str	r2, [r3, #20]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40010000 	.word	0x40010000
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40010400 	.word	0x40010400
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800
 800357c:	40001800 	.word	0x40001800
 8003580:	40001c00 	.word	0x40001c00
 8003584:	40002000 	.word	0x40002000

08003588 <__assert_func>:
 8003588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800358a:	4614      	mov	r4, r2
 800358c:	461a      	mov	r2, r3
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <__assert_func+0x2c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4605      	mov	r5, r0
 8003594:	68d8      	ldr	r0, [r3, #12]
 8003596:	b14c      	cbz	r4, 80035ac <__assert_func+0x24>
 8003598:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <__assert_func+0x30>)
 800359a:	9100      	str	r1, [sp, #0]
 800359c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80035a0:	4906      	ldr	r1, [pc, #24]	; (80035bc <__assert_func+0x34>)
 80035a2:	462b      	mov	r3, r5
 80035a4:	f000 f814 	bl	80035d0 <fiprintf>
 80035a8:	f000 fed4 	bl	8004354 <abort>
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <__assert_func+0x38>)
 80035ae:	461c      	mov	r4, r3
 80035b0:	e7f3      	b.n	800359a <__assert_func+0x12>
 80035b2:	bf00      	nop
 80035b4:	2000000c 	.word	0x2000000c
 80035b8:	08006078 	.word	0x08006078
 80035bc:	08006085 	.word	0x08006085
 80035c0:	080060b3 	.word	0x080060b3

080035c4 <__errno>:
 80035c4:	4b01      	ldr	r3, [pc, #4]	; (80035cc <__errno+0x8>)
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	2000000c 	.word	0x2000000c

080035d0 <fiprintf>:
 80035d0:	b40e      	push	{r1, r2, r3}
 80035d2:	b503      	push	{r0, r1, lr}
 80035d4:	4601      	mov	r1, r0
 80035d6:	ab03      	add	r3, sp, #12
 80035d8:	4805      	ldr	r0, [pc, #20]	; (80035f0 <fiprintf+0x20>)
 80035da:	f853 2b04 	ldr.w	r2, [r3], #4
 80035de:	6800      	ldr	r0, [r0, #0]
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	f000 f85d 	bl	80036a0 <_vfiprintf_r>
 80035e6:	b002      	add	sp, #8
 80035e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035ec:	b003      	add	sp, #12
 80035ee:	4770      	bx	lr
 80035f0:	2000000c 	.word	0x2000000c

080035f4 <__libc_init_array>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	4d0d      	ldr	r5, [pc, #52]	; (800362c <__libc_init_array+0x38>)
 80035f8:	4c0d      	ldr	r4, [pc, #52]	; (8003630 <__libc_init_array+0x3c>)
 80035fa:	1b64      	subs	r4, r4, r5
 80035fc:	10a4      	asrs	r4, r4, #2
 80035fe:	2600      	movs	r6, #0
 8003600:	42a6      	cmp	r6, r4
 8003602:	d109      	bne.n	8003618 <__libc_init_array+0x24>
 8003604:	4d0b      	ldr	r5, [pc, #44]	; (8003634 <__libc_init_array+0x40>)
 8003606:	4c0c      	ldr	r4, [pc, #48]	; (8003638 <__libc_init_array+0x44>)
 8003608:	f002 fd04 	bl	8006014 <_init>
 800360c:	1b64      	subs	r4, r4, r5
 800360e:	10a4      	asrs	r4, r4, #2
 8003610:	2600      	movs	r6, #0
 8003612:	42a6      	cmp	r6, r4
 8003614:	d105      	bne.n	8003622 <__libc_init_array+0x2e>
 8003616:	bd70      	pop	{r4, r5, r6, pc}
 8003618:	f855 3b04 	ldr.w	r3, [r5], #4
 800361c:	4798      	blx	r3
 800361e:	3601      	adds	r6, #1
 8003620:	e7ee      	b.n	8003600 <__libc_init_array+0xc>
 8003622:	f855 3b04 	ldr.w	r3, [r5], #4
 8003626:	4798      	blx	r3
 8003628:	3601      	adds	r6, #1
 800362a:	e7f2      	b.n	8003612 <__libc_init_array+0x1e>
 800362c:	08006460 	.word	0x08006460
 8003630:	08006460 	.word	0x08006460
 8003634:	08006460 	.word	0x08006460
 8003638:	08006464 	.word	0x08006464

0800363c <memset>:
 800363c:	4402      	add	r2, r0
 800363e:	4603      	mov	r3, r0
 8003640:	4293      	cmp	r3, r2
 8003642:	d100      	bne.n	8003646 <memset+0xa>
 8003644:	4770      	bx	lr
 8003646:	f803 1b01 	strb.w	r1, [r3], #1
 800364a:	e7f9      	b.n	8003640 <memset+0x4>

0800364c <__sfputc_r>:
 800364c:	6893      	ldr	r3, [r2, #8]
 800364e:	3b01      	subs	r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	b410      	push	{r4}
 8003654:	6093      	str	r3, [r2, #8]
 8003656:	da08      	bge.n	800366a <__sfputc_r+0x1e>
 8003658:	6994      	ldr	r4, [r2, #24]
 800365a:	42a3      	cmp	r3, r4
 800365c:	db01      	blt.n	8003662 <__sfputc_r+0x16>
 800365e:	290a      	cmp	r1, #10
 8003660:	d103      	bne.n	800366a <__sfputc_r+0x1e>
 8003662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003666:	f000 bdb5 	b.w	80041d4 <__swbuf_r>
 800366a:	6813      	ldr	r3, [r2, #0]
 800366c:	1c58      	adds	r0, r3, #1
 800366e:	6010      	str	r0, [r2, #0]
 8003670:	7019      	strb	r1, [r3, #0]
 8003672:	4608      	mov	r0, r1
 8003674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003678:	4770      	bx	lr

0800367a <__sfputs_r>:
 800367a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367c:	4606      	mov	r6, r0
 800367e:	460f      	mov	r7, r1
 8003680:	4614      	mov	r4, r2
 8003682:	18d5      	adds	r5, r2, r3
 8003684:	42ac      	cmp	r4, r5
 8003686:	d101      	bne.n	800368c <__sfputs_r+0x12>
 8003688:	2000      	movs	r0, #0
 800368a:	e007      	b.n	800369c <__sfputs_r+0x22>
 800368c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003690:	463a      	mov	r2, r7
 8003692:	4630      	mov	r0, r6
 8003694:	f7ff ffda 	bl	800364c <__sfputc_r>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d1f3      	bne.n	8003684 <__sfputs_r+0xa>
 800369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036a0 <_vfiprintf_r>:
 80036a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a4:	460d      	mov	r5, r1
 80036a6:	b09d      	sub	sp, #116	; 0x74
 80036a8:	4614      	mov	r4, r2
 80036aa:	4698      	mov	r8, r3
 80036ac:	4606      	mov	r6, r0
 80036ae:	b118      	cbz	r0, 80036b8 <_vfiprintf_r+0x18>
 80036b0:	6983      	ldr	r3, [r0, #24]
 80036b2:	b90b      	cbnz	r3, 80036b8 <_vfiprintf_r+0x18>
 80036b4:	f001 fde8 	bl	8005288 <__sinit>
 80036b8:	4b89      	ldr	r3, [pc, #548]	; (80038e0 <_vfiprintf_r+0x240>)
 80036ba:	429d      	cmp	r5, r3
 80036bc:	d11b      	bne.n	80036f6 <_vfiprintf_r+0x56>
 80036be:	6875      	ldr	r5, [r6, #4]
 80036c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036c2:	07d9      	lsls	r1, r3, #31
 80036c4:	d405      	bmi.n	80036d2 <_vfiprintf_r+0x32>
 80036c6:	89ab      	ldrh	r3, [r5, #12]
 80036c8:	059a      	lsls	r2, r3, #22
 80036ca:	d402      	bmi.n	80036d2 <_vfiprintf_r+0x32>
 80036cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036ce:	f001 fe7e 	bl	80053ce <__retarget_lock_acquire_recursive>
 80036d2:	89ab      	ldrh	r3, [r5, #12]
 80036d4:	071b      	lsls	r3, r3, #28
 80036d6:	d501      	bpl.n	80036dc <_vfiprintf_r+0x3c>
 80036d8:	692b      	ldr	r3, [r5, #16]
 80036da:	b9eb      	cbnz	r3, 8003718 <_vfiprintf_r+0x78>
 80036dc:	4629      	mov	r1, r5
 80036de:	4630      	mov	r0, r6
 80036e0:	f000 fdca 	bl	8004278 <__swsetup_r>
 80036e4:	b1c0      	cbz	r0, 8003718 <_vfiprintf_r+0x78>
 80036e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036e8:	07dc      	lsls	r4, r3, #31
 80036ea:	d50e      	bpl.n	800370a <_vfiprintf_r+0x6a>
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036f0:	b01d      	add	sp, #116	; 0x74
 80036f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f6:	4b7b      	ldr	r3, [pc, #492]	; (80038e4 <_vfiprintf_r+0x244>)
 80036f8:	429d      	cmp	r5, r3
 80036fa:	d101      	bne.n	8003700 <_vfiprintf_r+0x60>
 80036fc:	68b5      	ldr	r5, [r6, #8]
 80036fe:	e7df      	b.n	80036c0 <_vfiprintf_r+0x20>
 8003700:	4b79      	ldr	r3, [pc, #484]	; (80038e8 <_vfiprintf_r+0x248>)
 8003702:	429d      	cmp	r5, r3
 8003704:	bf08      	it	eq
 8003706:	68f5      	ldreq	r5, [r6, #12]
 8003708:	e7da      	b.n	80036c0 <_vfiprintf_r+0x20>
 800370a:	89ab      	ldrh	r3, [r5, #12]
 800370c:	0598      	lsls	r0, r3, #22
 800370e:	d4ed      	bmi.n	80036ec <_vfiprintf_r+0x4c>
 8003710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003712:	f001 fe5d 	bl	80053d0 <__retarget_lock_release_recursive>
 8003716:	e7e9      	b.n	80036ec <_vfiprintf_r+0x4c>
 8003718:	2300      	movs	r3, #0
 800371a:	9309      	str	r3, [sp, #36]	; 0x24
 800371c:	2320      	movs	r3, #32
 800371e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003722:	f8cd 800c 	str.w	r8, [sp, #12]
 8003726:	2330      	movs	r3, #48	; 0x30
 8003728:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80038ec <_vfiprintf_r+0x24c>
 800372c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003730:	f04f 0901 	mov.w	r9, #1
 8003734:	4623      	mov	r3, r4
 8003736:	469a      	mov	sl, r3
 8003738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800373c:	b10a      	cbz	r2, 8003742 <_vfiprintf_r+0xa2>
 800373e:	2a25      	cmp	r2, #37	; 0x25
 8003740:	d1f9      	bne.n	8003736 <_vfiprintf_r+0x96>
 8003742:	ebba 0b04 	subs.w	fp, sl, r4
 8003746:	d00b      	beq.n	8003760 <_vfiprintf_r+0xc0>
 8003748:	465b      	mov	r3, fp
 800374a:	4622      	mov	r2, r4
 800374c:	4629      	mov	r1, r5
 800374e:	4630      	mov	r0, r6
 8003750:	f7ff ff93 	bl	800367a <__sfputs_r>
 8003754:	3001      	adds	r0, #1
 8003756:	f000 80aa 	beq.w	80038ae <_vfiprintf_r+0x20e>
 800375a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800375c:	445a      	add	r2, fp
 800375e:	9209      	str	r2, [sp, #36]	; 0x24
 8003760:	f89a 3000 	ldrb.w	r3, [sl]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80a2 	beq.w	80038ae <_vfiprintf_r+0x20e>
 800376a:	2300      	movs	r3, #0
 800376c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003774:	f10a 0a01 	add.w	sl, sl, #1
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	9307      	str	r3, [sp, #28]
 800377c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003780:	931a      	str	r3, [sp, #104]	; 0x68
 8003782:	4654      	mov	r4, sl
 8003784:	2205      	movs	r2, #5
 8003786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800378a:	4858      	ldr	r0, [pc, #352]	; (80038ec <_vfiprintf_r+0x24c>)
 800378c:	f7fc fd28 	bl	80001e0 <memchr>
 8003790:	9a04      	ldr	r2, [sp, #16]
 8003792:	b9d8      	cbnz	r0, 80037cc <_vfiprintf_r+0x12c>
 8003794:	06d1      	lsls	r1, r2, #27
 8003796:	bf44      	itt	mi
 8003798:	2320      	movmi	r3, #32
 800379a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800379e:	0713      	lsls	r3, r2, #28
 80037a0:	bf44      	itt	mi
 80037a2:	232b      	movmi	r3, #43	; 0x2b
 80037a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037a8:	f89a 3000 	ldrb.w	r3, [sl]
 80037ac:	2b2a      	cmp	r3, #42	; 0x2a
 80037ae:	d015      	beq.n	80037dc <_vfiprintf_r+0x13c>
 80037b0:	9a07      	ldr	r2, [sp, #28]
 80037b2:	4654      	mov	r4, sl
 80037b4:	2000      	movs	r0, #0
 80037b6:	f04f 0c0a 	mov.w	ip, #10
 80037ba:	4621      	mov	r1, r4
 80037bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037c0:	3b30      	subs	r3, #48	; 0x30
 80037c2:	2b09      	cmp	r3, #9
 80037c4:	d94e      	bls.n	8003864 <_vfiprintf_r+0x1c4>
 80037c6:	b1b0      	cbz	r0, 80037f6 <_vfiprintf_r+0x156>
 80037c8:	9207      	str	r2, [sp, #28]
 80037ca:	e014      	b.n	80037f6 <_vfiprintf_r+0x156>
 80037cc:	eba0 0308 	sub.w	r3, r0, r8
 80037d0:	fa09 f303 	lsl.w	r3, r9, r3
 80037d4:	4313      	orrs	r3, r2
 80037d6:	9304      	str	r3, [sp, #16]
 80037d8:	46a2      	mov	sl, r4
 80037da:	e7d2      	b.n	8003782 <_vfiprintf_r+0xe2>
 80037dc:	9b03      	ldr	r3, [sp, #12]
 80037de:	1d19      	adds	r1, r3, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	9103      	str	r1, [sp, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bfbb      	ittet	lt
 80037e8:	425b      	neglt	r3, r3
 80037ea:	f042 0202 	orrlt.w	r2, r2, #2
 80037ee:	9307      	strge	r3, [sp, #28]
 80037f0:	9307      	strlt	r3, [sp, #28]
 80037f2:	bfb8      	it	lt
 80037f4:	9204      	strlt	r2, [sp, #16]
 80037f6:	7823      	ldrb	r3, [r4, #0]
 80037f8:	2b2e      	cmp	r3, #46	; 0x2e
 80037fa:	d10c      	bne.n	8003816 <_vfiprintf_r+0x176>
 80037fc:	7863      	ldrb	r3, [r4, #1]
 80037fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003800:	d135      	bne.n	800386e <_vfiprintf_r+0x1ce>
 8003802:	9b03      	ldr	r3, [sp, #12]
 8003804:	1d1a      	adds	r2, r3, #4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	9203      	str	r2, [sp, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	bfb8      	it	lt
 800380e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003812:	3402      	adds	r4, #2
 8003814:	9305      	str	r3, [sp, #20]
 8003816:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80038fc <_vfiprintf_r+0x25c>
 800381a:	7821      	ldrb	r1, [r4, #0]
 800381c:	2203      	movs	r2, #3
 800381e:	4650      	mov	r0, sl
 8003820:	f7fc fcde 	bl	80001e0 <memchr>
 8003824:	b140      	cbz	r0, 8003838 <_vfiprintf_r+0x198>
 8003826:	2340      	movs	r3, #64	; 0x40
 8003828:	eba0 000a 	sub.w	r0, r0, sl
 800382c:	fa03 f000 	lsl.w	r0, r3, r0
 8003830:	9b04      	ldr	r3, [sp, #16]
 8003832:	4303      	orrs	r3, r0
 8003834:	3401      	adds	r4, #1
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800383c:	482c      	ldr	r0, [pc, #176]	; (80038f0 <_vfiprintf_r+0x250>)
 800383e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003842:	2206      	movs	r2, #6
 8003844:	f7fc fccc 	bl	80001e0 <memchr>
 8003848:	2800      	cmp	r0, #0
 800384a:	d03f      	beq.n	80038cc <_vfiprintf_r+0x22c>
 800384c:	4b29      	ldr	r3, [pc, #164]	; (80038f4 <_vfiprintf_r+0x254>)
 800384e:	bb1b      	cbnz	r3, 8003898 <_vfiprintf_r+0x1f8>
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	3307      	adds	r3, #7
 8003854:	f023 0307 	bic.w	r3, r3, #7
 8003858:	3308      	adds	r3, #8
 800385a:	9303      	str	r3, [sp, #12]
 800385c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800385e:	443b      	add	r3, r7
 8003860:	9309      	str	r3, [sp, #36]	; 0x24
 8003862:	e767      	b.n	8003734 <_vfiprintf_r+0x94>
 8003864:	fb0c 3202 	mla	r2, ip, r2, r3
 8003868:	460c      	mov	r4, r1
 800386a:	2001      	movs	r0, #1
 800386c:	e7a5      	b.n	80037ba <_vfiprintf_r+0x11a>
 800386e:	2300      	movs	r3, #0
 8003870:	3401      	adds	r4, #1
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	4619      	mov	r1, r3
 8003876:	f04f 0c0a 	mov.w	ip, #10
 800387a:	4620      	mov	r0, r4
 800387c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003880:	3a30      	subs	r2, #48	; 0x30
 8003882:	2a09      	cmp	r2, #9
 8003884:	d903      	bls.n	800388e <_vfiprintf_r+0x1ee>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0c5      	beq.n	8003816 <_vfiprintf_r+0x176>
 800388a:	9105      	str	r1, [sp, #20]
 800388c:	e7c3      	b.n	8003816 <_vfiprintf_r+0x176>
 800388e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003892:	4604      	mov	r4, r0
 8003894:	2301      	movs	r3, #1
 8003896:	e7f0      	b.n	800387a <_vfiprintf_r+0x1da>
 8003898:	ab03      	add	r3, sp, #12
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	462a      	mov	r2, r5
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <_vfiprintf_r+0x258>)
 80038a0:	a904      	add	r1, sp, #16
 80038a2:	4630      	mov	r0, r6
 80038a4:	f000 f8cc 	bl	8003a40 <_printf_float>
 80038a8:	4607      	mov	r7, r0
 80038aa:	1c78      	adds	r0, r7, #1
 80038ac:	d1d6      	bne.n	800385c <_vfiprintf_r+0x1bc>
 80038ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038b0:	07d9      	lsls	r1, r3, #31
 80038b2:	d405      	bmi.n	80038c0 <_vfiprintf_r+0x220>
 80038b4:	89ab      	ldrh	r3, [r5, #12]
 80038b6:	059a      	lsls	r2, r3, #22
 80038b8:	d402      	bmi.n	80038c0 <_vfiprintf_r+0x220>
 80038ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038bc:	f001 fd88 	bl	80053d0 <__retarget_lock_release_recursive>
 80038c0:	89ab      	ldrh	r3, [r5, #12]
 80038c2:	065b      	lsls	r3, r3, #25
 80038c4:	f53f af12 	bmi.w	80036ec <_vfiprintf_r+0x4c>
 80038c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ca:	e711      	b.n	80036f0 <_vfiprintf_r+0x50>
 80038cc:	ab03      	add	r3, sp, #12
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	462a      	mov	r2, r5
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <_vfiprintf_r+0x258>)
 80038d4:	a904      	add	r1, sp, #16
 80038d6:	4630      	mov	r0, r6
 80038d8:	f000 fb56 	bl	8003f88 <_printf_i>
 80038dc:	e7e4      	b.n	80038a8 <_vfiprintf_r+0x208>
 80038de:	bf00      	nop
 80038e0:	080061b0 	.word	0x080061b0
 80038e4:	080061d0 	.word	0x080061d0
 80038e8:	08006190 	.word	0x08006190
 80038ec:	080060b8 	.word	0x080060b8
 80038f0:	080060c2 	.word	0x080060c2
 80038f4:	08003a41 	.word	0x08003a41
 80038f8:	0800367b 	.word	0x0800367b
 80038fc:	080060be 	.word	0x080060be

08003900 <__cvt>:
 8003900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003904:	ec55 4b10 	vmov	r4, r5, d0
 8003908:	2d00      	cmp	r5, #0
 800390a:	460e      	mov	r6, r1
 800390c:	4619      	mov	r1, r3
 800390e:	462b      	mov	r3, r5
 8003910:	bfbb      	ittet	lt
 8003912:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003916:	461d      	movlt	r5, r3
 8003918:	2300      	movge	r3, #0
 800391a:	232d      	movlt	r3, #45	; 0x2d
 800391c:	700b      	strb	r3, [r1, #0]
 800391e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003920:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003924:	4691      	mov	r9, r2
 8003926:	f023 0820 	bic.w	r8, r3, #32
 800392a:	bfbc      	itt	lt
 800392c:	4622      	movlt	r2, r4
 800392e:	4614      	movlt	r4, r2
 8003930:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003934:	d005      	beq.n	8003942 <__cvt+0x42>
 8003936:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800393a:	d100      	bne.n	800393e <__cvt+0x3e>
 800393c:	3601      	adds	r6, #1
 800393e:	2102      	movs	r1, #2
 8003940:	e000      	b.n	8003944 <__cvt+0x44>
 8003942:	2103      	movs	r1, #3
 8003944:	ab03      	add	r3, sp, #12
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	ab02      	add	r3, sp, #8
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	ec45 4b10 	vmov	d0, r4, r5
 8003950:	4653      	mov	r3, sl
 8003952:	4632      	mov	r2, r6
 8003954:	f000 fd90 	bl	8004478 <_dtoa_r>
 8003958:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800395c:	4607      	mov	r7, r0
 800395e:	d102      	bne.n	8003966 <__cvt+0x66>
 8003960:	f019 0f01 	tst.w	r9, #1
 8003964:	d022      	beq.n	80039ac <__cvt+0xac>
 8003966:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800396a:	eb07 0906 	add.w	r9, r7, r6
 800396e:	d110      	bne.n	8003992 <__cvt+0x92>
 8003970:	783b      	ldrb	r3, [r7, #0]
 8003972:	2b30      	cmp	r3, #48	; 0x30
 8003974:	d10a      	bne.n	800398c <__cvt+0x8c>
 8003976:	2200      	movs	r2, #0
 8003978:	2300      	movs	r3, #0
 800397a:	4620      	mov	r0, r4
 800397c:	4629      	mov	r1, r5
 800397e:	f7fd f8a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003982:	b918      	cbnz	r0, 800398c <__cvt+0x8c>
 8003984:	f1c6 0601 	rsb	r6, r6, #1
 8003988:	f8ca 6000 	str.w	r6, [sl]
 800398c:	f8da 3000 	ldr.w	r3, [sl]
 8003990:	4499      	add	r9, r3
 8003992:	2200      	movs	r2, #0
 8003994:	2300      	movs	r3, #0
 8003996:	4620      	mov	r0, r4
 8003998:	4629      	mov	r1, r5
 800399a:	f7fd f895 	bl	8000ac8 <__aeabi_dcmpeq>
 800399e:	b108      	cbz	r0, 80039a4 <__cvt+0xa4>
 80039a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80039a4:	2230      	movs	r2, #48	; 0x30
 80039a6:	9b03      	ldr	r3, [sp, #12]
 80039a8:	454b      	cmp	r3, r9
 80039aa:	d307      	bcc.n	80039bc <__cvt+0xbc>
 80039ac:	9b03      	ldr	r3, [sp, #12]
 80039ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039b0:	1bdb      	subs	r3, r3, r7
 80039b2:	4638      	mov	r0, r7
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	b004      	add	sp, #16
 80039b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039bc:	1c59      	adds	r1, r3, #1
 80039be:	9103      	str	r1, [sp, #12]
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e7f0      	b.n	80039a6 <__cvt+0xa6>

080039c4 <__exponent>:
 80039c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039c6:	4603      	mov	r3, r0
 80039c8:	2900      	cmp	r1, #0
 80039ca:	bfb8      	it	lt
 80039cc:	4249      	neglt	r1, r1
 80039ce:	f803 2b02 	strb.w	r2, [r3], #2
 80039d2:	bfb4      	ite	lt
 80039d4:	222d      	movlt	r2, #45	; 0x2d
 80039d6:	222b      	movge	r2, #43	; 0x2b
 80039d8:	2909      	cmp	r1, #9
 80039da:	7042      	strb	r2, [r0, #1]
 80039dc:	dd2a      	ble.n	8003a34 <__exponent+0x70>
 80039de:	f10d 0407 	add.w	r4, sp, #7
 80039e2:	46a4      	mov	ip, r4
 80039e4:	270a      	movs	r7, #10
 80039e6:	46a6      	mov	lr, r4
 80039e8:	460a      	mov	r2, r1
 80039ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80039ee:	fb07 1516 	mls	r5, r7, r6, r1
 80039f2:	3530      	adds	r5, #48	; 0x30
 80039f4:	2a63      	cmp	r2, #99	; 0x63
 80039f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80039fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80039fe:	4631      	mov	r1, r6
 8003a00:	dcf1      	bgt.n	80039e6 <__exponent+0x22>
 8003a02:	3130      	adds	r1, #48	; 0x30
 8003a04:	f1ae 0502 	sub.w	r5, lr, #2
 8003a08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a0c:	1c44      	adds	r4, r0, #1
 8003a0e:	4629      	mov	r1, r5
 8003a10:	4561      	cmp	r1, ip
 8003a12:	d30a      	bcc.n	8003a2a <__exponent+0x66>
 8003a14:	f10d 0209 	add.w	r2, sp, #9
 8003a18:	eba2 020e 	sub.w	r2, r2, lr
 8003a1c:	4565      	cmp	r5, ip
 8003a1e:	bf88      	it	hi
 8003a20:	2200      	movhi	r2, #0
 8003a22:	4413      	add	r3, r2
 8003a24:	1a18      	subs	r0, r3, r0
 8003a26:	b003      	add	sp, #12
 8003a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a32:	e7ed      	b.n	8003a10 <__exponent+0x4c>
 8003a34:	2330      	movs	r3, #48	; 0x30
 8003a36:	3130      	adds	r1, #48	; 0x30
 8003a38:	7083      	strb	r3, [r0, #2]
 8003a3a:	70c1      	strb	r1, [r0, #3]
 8003a3c:	1d03      	adds	r3, r0, #4
 8003a3e:	e7f1      	b.n	8003a24 <__exponent+0x60>

08003a40 <_printf_float>:
 8003a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a44:	ed2d 8b02 	vpush	{d8}
 8003a48:	b08d      	sub	sp, #52	; 0x34
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003a50:	4616      	mov	r6, r2
 8003a52:	461f      	mov	r7, r3
 8003a54:	4605      	mov	r5, r0
 8003a56:	f001 fcb5 	bl	80053c4 <_localeconv_r>
 8003a5a:	f8d0 a000 	ldr.w	sl, [r0]
 8003a5e:	4650      	mov	r0, sl
 8003a60:	f7fc fbb6 	bl	80001d0 <strlen>
 8003a64:	2300      	movs	r3, #0
 8003a66:	930a      	str	r3, [sp, #40]	; 0x28
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	9305      	str	r3, [sp, #20]
 8003a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8003a70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003a74:	3307      	adds	r3, #7
 8003a76:	f023 0307 	bic.w	r3, r3, #7
 8003a7a:	f103 0208 	add.w	r2, r3, #8
 8003a7e:	f8c8 2000 	str.w	r2, [r8]
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003a8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a92:	9307      	str	r3, [sp, #28]
 8003a94:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a98:	ee08 0a10 	vmov	s16, r0
 8003a9c:	4b9f      	ldr	r3, [pc, #636]	; (8003d1c <_printf_float+0x2dc>)
 8003a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003aa6:	f7fd f841 	bl	8000b2c <__aeabi_dcmpun>
 8003aaa:	bb88      	cbnz	r0, 8003b10 <_printf_float+0xd0>
 8003aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ab0:	4b9a      	ldr	r3, [pc, #616]	; (8003d1c <_printf_float+0x2dc>)
 8003ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ab6:	f7fd f81b 	bl	8000af0 <__aeabi_dcmple>
 8003aba:	bb48      	cbnz	r0, 8003b10 <_printf_float+0xd0>
 8003abc:	2200      	movs	r2, #0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	f7fd f80a 	bl	8000adc <__aeabi_dcmplt>
 8003ac8:	b110      	cbz	r0, 8003ad0 <_printf_float+0x90>
 8003aca:	232d      	movs	r3, #45	; 0x2d
 8003acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ad0:	4b93      	ldr	r3, [pc, #588]	; (8003d20 <_printf_float+0x2e0>)
 8003ad2:	4894      	ldr	r0, [pc, #592]	; (8003d24 <_printf_float+0x2e4>)
 8003ad4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003ad8:	bf94      	ite	ls
 8003ada:	4698      	movls	r8, r3
 8003adc:	4680      	movhi	r8, r0
 8003ade:	2303      	movs	r3, #3
 8003ae0:	6123      	str	r3, [r4, #16]
 8003ae2:	9b05      	ldr	r3, [sp, #20]
 8003ae4:	f023 0204 	bic.w	r2, r3, #4
 8003ae8:	6022      	str	r2, [r4, #0]
 8003aea:	f04f 0900 	mov.w	r9, #0
 8003aee:	9700      	str	r7, [sp, #0]
 8003af0:	4633      	mov	r3, r6
 8003af2:	aa0b      	add	r2, sp, #44	; 0x2c
 8003af4:	4621      	mov	r1, r4
 8003af6:	4628      	mov	r0, r5
 8003af8:	f000 f9d8 	bl	8003eac <_printf_common>
 8003afc:	3001      	adds	r0, #1
 8003afe:	f040 8090 	bne.w	8003c22 <_printf_float+0x1e2>
 8003b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b06:	b00d      	add	sp, #52	; 0x34
 8003b08:	ecbd 8b02 	vpop	{d8}
 8003b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	4640      	mov	r0, r8
 8003b16:	4649      	mov	r1, r9
 8003b18:	f7fd f808 	bl	8000b2c <__aeabi_dcmpun>
 8003b1c:	b140      	cbz	r0, 8003b30 <_printf_float+0xf0>
 8003b1e:	464b      	mov	r3, r9
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bfbc      	itt	lt
 8003b24:	232d      	movlt	r3, #45	; 0x2d
 8003b26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b2a:	487f      	ldr	r0, [pc, #508]	; (8003d28 <_printf_float+0x2e8>)
 8003b2c:	4b7f      	ldr	r3, [pc, #508]	; (8003d2c <_printf_float+0x2ec>)
 8003b2e:	e7d1      	b.n	8003ad4 <_printf_float+0x94>
 8003b30:	6863      	ldr	r3, [r4, #4]
 8003b32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b36:	9206      	str	r2, [sp, #24]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	d13f      	bne.n	8003bbc <_printf_float+0x17c>
 8003b3c:	2306      	movs	r3, #6
 8003b3e:	6063      	str	r3, [r4, #4]
 8003b40:	9b05      	ldr	r3, [sp, #20]
 8003b42:	6861      	ldr	r1, [r4, #4]
 8003b44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9303      	str	r3, [sp, #12]
 8003b4c:	ab0a      	add	r3, sp, #40	; 0x28
 8003b4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003b52:	ab09      	add	r3, sp, #36	; 0x24
 8003b54:	ec49 8b10 	vmov	d0, r8, r9
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	6022      	str	r2, [r4, #0]
 8003b5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b60:	4628      	mov	r0, r5
 8003b62:	f7ff fecd 	bl	8003900 <__cvt>
 8003b66:	9b06      	ldr	r3, [sp, #24]
 8003b68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b6a:	2b47      	cmp	r3, #71	; 0x47
 8003b6c:	4680      	mov	r8, r0
 8003b6e:	d108      	bne.n	8003b82 <_printf_float+0x142>
 8003b70:	1cc8      	adds	r0, r1, #3
 8003b72:	db02      	blt.n	8003b7a <_printf_float+0x13a>
 8003b74:	6863      	ldr	r3, [r4, #4]
 8003b76:	4299      	cmp	r1, r3
 8003b78:	dd41      	ble.n	8003bfe <_printf_float+0x1be>
 8003b7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8003b7e:	fa5f fb8b 	uxtb.w	fp, fp
 8003b82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b86:	d820      	bhi.n	8003bca <_printf_float+0x18a>
 8003b88:	3901      	subs	r1, #1
 8003b8a:	465a      	mov	r2, fp
 8003b8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b90:	9109      	str	r1, [sp, #36]	; 0x24
 8003b92:	f7ff ff17 	bl	80039c4 <__exponent>
 8003b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b98:	1813      	adds	r3, r2, r0
 8003b9a:	2a01      	cmp	r2, #1
 8003b9c:	4681      	mov	r9, r0
 8003b9e:	6123      	str	r3, [r4, #16]
 8003ba0:	dc02      	bgt.n	8003ba8 <_printf_float+0x168>
 8003ba2:	6822      	ldr	r2, [r4, #0]
 8003ba4:	07d2      	lsls	r2, r2, #31
 8003ba6:	d501      	bpl.n	8003bac <_printf_float+0x16c>
 8003ba8:	3301      	adds	r3, #1
 8003baa:	6123      	str	r3, [r4, #16]
 8003bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d09c      	beq.n	8003aee <_printf_float+0xae>
 8003bb4:	232d      	movs	r3, #45	; 0x2d
 8003bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bba:	e798      	b.n	8003aee <_printf_float+0xae>
 8003bbc:	9a06      	ldr	r2, [sp, #24]
 8003bbe:	2a47      	cmp	r2, #71	; 0x47
 8003bc0:	d1be      	bne.n	8003b40 <_printf_float+0x100>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1bc      	bne.n	8003b40 <_printf_float+0x100>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e7b9      	b.n	8003b3e <_printf_float+0xfe>
 8003bca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003bce:	d118      	bne.n	8003c02 <_printf_float+0x1c2>
 8003bd0:	2900      	cmp	r1, #0
 8003bd2:	6863      	ldr	r3, [r4, #4]
 8003bd4:	dd0b      	ble.n	8003bee <_printf_float+0x1ae>
 8003bd6:	6121      	str	r1, [r4, #16]
 8003bd8:	b913      	cbnz	r3, 8003be0 <_printf_float+0x1a0>
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	07d0      	lsls	r0, r2, #31
 8003bde:	d502      	bpl.n	8003be6 <_printf_float+0x1a6>
 8003be0:	3301      	adds	r3, #1
 8003be2:	440b      	add	r3, r1
 8003be4:	6123      	str	r3, [r4, #16]
 8003be6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003be8:	f04f 0900 	mov.w	r9, #0
 8003bec:	e7de      	b.n	8003bac <_printf_float+0x16c>
 8003bee:	b913      	cbnz	r3, 8003bf6 <_printf_float+0x1b6>
 8003bf0:	6822      	ldr	r2, [r4, #0]
 8003bf2:	07d2      	lsls	r2, r2, #31
 8003bf4:	d501      	bpl.n	8003bfa <_printf_float+0x1ba>
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	e7f4      	b.n	8003be4 <_printf_float+0x1a4>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e7f2      	b.n	8003be4 <_printf_float+0x1a4>
 8003bfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c04:	4299      	cmp	r1, r3
 8003c06:	db05      	blt.n	8003c14 <_printf_float+0x1d4>
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	6121      	str	r1, [r4, #16]
 8003c0c:	07d8      	lsls	r0, r3, #31
 8003c0e:	d5ea      	bpl.n	8003be6 <_printf_float+0x1a6>
 8003c10:	1c4b      	adds	r3, r1, #1
 8003c12:	e7e7      	b.n	8003be4 <_printf_float+0x1a4>
 8003c14:	2900      	cmp	r1, #0
 8003c16:	bfd4      	ite	le
 8003c18:	f1c1 0202 	rsble	r2, r1, #2
 8003c1c:	2201      	movgt	r2, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	e7e0      	b.n	8003be4 <_printf_float+0x1a4>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	055a      	lsls	r2, r3, #21
 8003c26:	d407      	bmi.n	8003c38 <_printf_float+0x1f8>
 8003c28:	6923      	ldr	r3, [r4, #16]
 8003c2a:	4642      	mov	r2, r8
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	4628      	mov	r0, r5
 8003c30:	47b8      	blx	r7
 8003c32:	3001      	adds	r0, #1
 8003c34:	d12c      	bne.n	8003c90 <_printf_float+0x250>
 8003c36:	e764      	b.n	8003b02 <_printf_float+0xc2>
 8003c38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c3c:	f240 80e0 	bls.w	8003e00 <_printf_float+0x3c0>
 8003c40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c44:	2200      	movs	r2, #0
 8003c46:	2300      	movs	r3, #0
 8003c48:	f7fc ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d034      	beq.n	8003cba <_printf_float+0x27a>
 8003c50:	4a37      	ldr	r2, [pc, #220]	; (8003d30 <_printf_float+0x2f0>)
 8003c52:	2301      	movs	r3, #1
 8003c54:	4631      	mov	r1, r6
 8003c56:	4628      	mov	r0, r5
 8003c58:	47b8      	blx	r7
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	f43f af51 	beq.w	8003b02 <_printf_float+0xc2>
 8003c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c64:	429a      	cmp	r2, r3
 8003c66:	db02      	blt.n	8003c6e <_printf_float+0x22e>
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	07d8      	lsls	r0, r3, #31
 8003c6c:	d510      	bpl.n	8003c90 <_printf_float+0x250>
 8003c6e:	ee18 3a10 	vmov	r3, s16
 8003c72:	4652      	mov	r2, sl
 8003c74:	4631      	mov	r1, r6
 8003c76:	4628      	mov	r0, r5
 8003c78:	47b8      	blx	r7
 8003c7a:	3001      	adds	r0, #1
 8003c7c:	f43f af41 	beq.w	8003b02 <_printf_float+0xc2>
 8003c80:	f04f 0800 	mov.w	r8, #0
 8003c84:	f104 091a 	add.w	r9, r4, #26
 8003c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	4543      	cmp	r3, r8
 8003c8e:	dc09      	bgt.n	8003ca4 <_printf_float+0x264>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	079b      	lsls	r3, r3, #30
 8003c94:	f100 8105 	bmi.w	8003ea2 <_printf_float+0x462>
 8003c98:	68e0      	ldr	r0, [r4, #12]
 8003c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c9c:	4298      	cmp	r0, r3
 8003c9e:	bfb8      	it	lt
 8003ca0:	4618      	movlt	r0, r3
 8003ca2:	e730      	b.n	8003b06 <_printf_float+0xc6>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	464a      	mov	r2, r9
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4628      	mov	r0, r5
 8003cac:	47b8      	blx	r7
 8003cae:	3001      	adds	r0, #1
 8003cb0:	f43f af27 	beq.w	8003b02 <_printf_float+0xc2>
 8003cb4:	f108 0801 	add.w	r8, r8, #1
 8003cb8:	e7e6      	b.n	8003c88 <_printf_float+0x248>
 8003cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	dc39      	bgt.n	8003d34 <_printf_float+0x2f4>
 8003cc0:	4a1b      	ldr	r2, [pc, #108]	; (8003d30 <_printf_float+0x2f0>)
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	4631      	mov	r1, r6
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	47b8      	blx	r7
 8003cca:	3001      	adds	r0, #1
 8003ccc:	f43f af19 	beq.w	8003b02 <_printf_float+0xc2>
 8003cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	d102      	bne.n	8003cde <_printf_float+0x29e>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	07d9      	lsls	r1, r3, #31
 8003cdc:	d5d8      	bpl.n	8003c90 <_printf_float+0x250>
 8003cde:	ee18 3a10 	vmov	r3, s16
 8003ce2:	4652      	mov	r2, sl
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	47b8      	blx	r7
 8003cea:	3001      	adds	r0, #1
 8003cec:	f43f af09 	beq.w	8003b02 <_printf_float+0xc2>
 8003cf0:	f04f 0900 	mov.w	r9, #0
 8003cf4:	f104 0a1a 	add.w	sl, r4, #26
 8003cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cfa:	425b      	negs	r3, r3
 8003cfc:	454b      	cmp	r3, r9
 8003cfe:	dc01      	bgt.n	8003d04 <_printf_float+0x2c4>
 8003d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d02:	e792      	b.n	8003c2a <_printf_float+0x1ea>
 8003d04:	2301      	movs	r3, #1
 8003d06:	4652      	mov	r2, sl
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	47b8      	blx	r7
 8003d0e:	3001      	adds	r0, #1
 8003d10:	f43f aef7 	beq.w	8003b02 <_printf_float+0xc2>
 8003d14:	f109 0901 	add.w	r9, r9, #1
 8003d18:	e7ee      	b.n	8003cf8 <_printf_float+0x2b8>
 8003d1a:	bf00      	nop
 8003d1c:	7fefffff 	.word	0x7fefffff
 8003d20:	080060c9 	.word	0x080060c9
 8003d24:	080060cd 	.word	0x080060cd
 8003d28:	080060d5 	.word	0x080060d5
 8003d2c:	080060d1 	.word	0x080060d1
 8003d30:	080060d9 	.word	0x080060d9
 8003d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	bfa8      	it	ge
 8003d3c:	461a      	movge	r2, r3
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	4691      	mov	r9, r2
 8003d42:	dc37      	bgt.n	8003db4 <_printf_float+0x374>
 8003d44:	f04f 0b00 	mov.w	fp, #0
 8003d48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d4c:	f104 021a 	add.w	r2, r4, #26
 8003d50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d52:	9305      	str	r3, [sp, #20]
 8003d54:	eba3 0309 	sub.w	r3, r3, r9
 8003d58:	455b      	cmp	r3, fp
 8003d5a:	dc33      	bgt.n	8003dc4 <_printf_float+0x384>
 8003d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d60:	429a      	cmp	r2, r3
 8003d62:	db3b      	blt.n	8003ddc <_printf_float+0x39c>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	07da      	lsls	r2, r3, #31
 8003d68:	d438      	bmi.n	8003ddc <_printf_float+0x39c>
 8003d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d6c:	9a05      	ldr	r2, [sp, #20]
 8003d6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d70:	1a9a      	subs	r2, r3, r2
 8003d72:	eba3 0901 	sub.w	r9, r3, r1
 8003d76:	4591      	cmp	r9, r2
 8003d78:	bfa8      	it	ge
 8003d7a:	4691      	movge	r9, r2
 8003d7c:	f1b9 0f00 	cmp.w	r9, #0
 8003d80:	dc35      	bgt.n	8003dee <_printf_float+0x3ae>
 8003d82:	f04f 0800 	mov.w	r8, #0
 8003d86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d8a:	f104 0a1a 	add.w	sl, r4, #26
 8003d8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	eba3 0309 	sub.w	r3, r3, r9
 8003d98:	4543      	cmp	r3, r8
 8003d9a:	f77f af79 	ble.w	8003c90 <_printf_float+0x250>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	4652      	mov	r2, sl
 8003da2:	4631      	mov	r1, r6
 8003da4:	4628      	mov	r0, r5
 8003da6:	47b8      	blx	r7
 8003da8:	3001      	adds	r0, #1
 8003daa:	f43f aeaa 	beq.w	8003b02 <_printf_float+0xc2>
 8003dae:	f108 0801 	add.w	r8, r8, #1
 8003db2:	e7ec      	b.n	8003d8e <_printf_float+0x34e>
 8003db4:	4613      	mov	r3, r2
 8003db6:	4631      	mov	r1, r6
 8003db8:	4642      	mov	r2, r8
 8003dba:	4628      	mov	r0, r5
 8003dbc:	47b8      	blx	r7
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d1c0      	bne.n	8003d44 <_printf_float+0x304>
 8003dc2:	e69e      	b.n	8003b02 <_printf_float+0xc2>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4628      	mov	r0, r5
 8003dca:	9205      	str	r2, [sp, #20]
 8003dcc:	47b8      	blx	r7
 8003dce:	3001      	adds	r0, #1
 8003dd0:	f43f ae97 	beq.w	8003b02 <_printf_float+0xc2>
 8003dd4:	9a05      	ldr	r2, [sp, #20]
 8003dd6:	f10b 0b01 	add.w	fp, fp, #1
 8003dda:	e7b9      	b.n	8003d50 <_printf_float+0x310>
 8003ddc:	ee18 3a10 	vmov	r3, s16
 8003de0:	4652      	mov	r2, sl
 8003de2:	4631      	mov	r1, r6
 8003de4:	4628      	mov	r0, r5
 8003de6:	47b8      	blx	r7
 8003de8:	3001      	adds	r0, #1
 8003dea:	d1be      	bne.n	8003d6a <_printf_float+0x32a>
 8003dec:	e689      	b.n	8003b02 <_printf_float+0xc2>
 8003dee:	9a05      	ldr	r2, [sp, #20]
 8003df0:	464b      	mov	r3, r9
 8003df2:	4442      	add	r2, r8
 8003df4:	4631      	mov	r1, r6
 8003df6:	4628      	mov	r0, r5
 8003df8:	47b8      	blx	r7
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	d1c1      	bne.n	8003d82 <_printf_float+0x342>
 8003dfe:	e680      	b.n	8003b02 <_printf_float+0xc2>
 8003e00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e02:	2a01      	cmp	r2, #1
 8003e04:	dc01      	bgt.n	8003e0a <_printf_float+0x3ca>
 8003e06:	07db      	lsls	r3, r3, #31
 8003e08:	d538      	bpl.n	8003e7c <_printf_float+0x43c>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	4631      	mov	r1, r6
 8003e10:	4628      	mov	r0, r5
 8003e12:	47b8      	blx	r7
 8003e14:	3001      	adds	r0, #1
 8003e16:	f43f ae74 	beq.w	8003b02 <_printf_float+0xc2>
 8003e1a:	ee18 3a10 	vmov	r3, s16
 8003e1e:	4652      	mov	r2, sl
 8003e20:	4631      	mov	r1, r6
 8003e22:	4628      	mov	r0, r5
 8003e24:	47b8      	blx	r7
 8003e26:	3001      	adds	r0, #1
 8003e28:	f43f ae6b 	beq.w	8003b02 <_printf_float+0xc2>
 8003e2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e30:	2200      	movs	r2, #0
 8003e32:	2300      	movs	r3, #0
 8003e34:	f7fc fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e38:	b9d8      	cbnz	r0, 8003e72 <_printf_float+0x432>
 8003e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e3c:	f108 0201 	add.w	r2, r8, #1
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4631      	mov	r1, r6
 8003e44:	4628      	mov	r0, r5
 8003e46:	47b8      	blx	r7
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d10e      	bne.n	8003e6a <_printf_float+0x42a>
 8003e4c:	e659      	b.n	8003b02 <_printf_float+0xc2>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4652      	mov	r2, sl
 8003e52:	4631      	mov	r1, r6
 8003e54:	4628      	mov	r0, r5
 8003e56:	47b8      	blx	r7
 8003e58:	3001      	adds	r0, #1
 8003e5a:	f43f ae52 	beq.w	8003b02 <_printf_float+0xc2>
 8003e5e:	f108 0801 	add.w	r8, r8, #1
 8003e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e64:	3b01      	subs	r3, #1
 8003e66:	4543      	cmp	r3, r8
 8003e68:	dcf1      	bgt.n	8003e4e <_printf_float+0x40e>
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e70:	e6dc      	b.n	8003c2c <_printf_float+0x1ec>
 8003e72:	f04f 0800 	mov.w	r8, #0
 8003e76:	f104 0a1a 	add.w	sl, r4, #26
 8003e7a:	e7f2      	b.n	8003e62 <_printf_float+0x422>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	4642      	mov	r2, r8
 8003e80:	e7df      	b.n	8003e42 <_printf_float+0x402>
 8003e82:	2301      	movs	r3, #1
 8003e84:	464a      	mov	r2, r9
 8003e86:	4631      	mov	r1, r6
 8003e88:	4628      	mov	r0, r5
 8003e8a:	47b8      	blx	r7
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	f43f ae38 	beq.w	8003b02 <_printf_float+0xc2>
 8003e92:	f108 0801 	add.w	r8, r8, #1
 8003e96:	68e3      	ldr	r3, [r4, #12]
 8003e98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e9a:	1a5b      	subs	r3, r3, r1
 8003e9c:	4543      	cmp	r3, r8
 8003e9e:	dcf0      	bgt.n	8003e82 <_printf_float+0x442>
 8003ea0:	e6fa      	b.n	8003c98 <_printf_float+0x258>
 8003ea2:	f04f 0800 	mov.w	r8, #0
 8003ea6:	f104 0919 	add.w	r9, r4, #25
 8003eaa:	e7f4      	b.n	8003e96 <_printf_float+0x456>

08003eac <_printf_common>:
 8003eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	4699      	mov	r9, r3
 8003eb4:	688a      	ldr	r2, [r1, #8]
 8003eb6:	690b      	ldr	r3, [r1, #16]
 8003eb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bfb8      	it	lt
 8003ec0:	4613      	movlt	r3, r2
 8003ec2:	6033      	str	r3, [r6, #0]
 8003ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ec8:	4607      	mov	r7, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	b10a      	cbz	r2, 8003ed2 <_printf_common+0x26>
 8003ece:	3301      	adds	r3, #1
 8003ed0:	6033      	str	r3, [r6, #0]
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	0699      	lsls	r1, r3, #26
 8003ed6:	bf42      	ittt	mi
 8003ed8:	6833      	ldrmi	r3, [r6, #0]
 8003eda:	3302      	addmi	r3, #2
 8003edc:	6033      	strmi	r3, [r6, #0]
 8003ede:	6825      	ldr	r5, [r4, #0]
 8003ee0:	f015 0506 	ands.w	r5, r5, #6
 8003ee4:	d106      	bne.n	8003ef4 <_printf_common+0x48>
 8003ee6:	f104 0a19 	add.w	sl, r4, #25
 8003eea:	68e3      	ldr	r3, [r4, #12]
 8003eec:	6832      	ldr	r2, [r6, #0]
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	42ab      	cmp	r3, r5
 8003ef2:	dc26      	bgt.n	8003f42 <_printf_common+0x96>
 8003ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ef8:	1e13      	subs	r3, r2, #0
 8003efa:	6822      	ldr	r2, [r4, #0]
 8003efc:	bf18      	it	ne
 8003efe:	2301      	movne	r3, #1
 8003f00:	0692      	lsls	r2, r2, #26
 8003f02:	d42b      	bmi.n	8003f5c <_printf_common+0xb0>
 8003f04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f08:	4649      	mov	r1, r9
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	47c0      	blx	r8
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d01e      	beq.n	8003f50 <_printf_common+0xa4>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	68e5      	ldr	r5, [r4, #12]
 8003f16:	6832      	ldr	r2, [r6, #0]
 8003f18:	f003 0306 	and.w	r3, r3, #6
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	bf08      	it	eq
 8003f20:	1aad      	subeq	r5, r5, r2
 8003f22:	68a3      	ldr	r3, [r4, #8]
 8003f24:	6922      	ldr	r2, [r4, #16]
 8003f26:	bf0c      	ite	eq
 8003f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f2c:	2500      	movne	r5, #0
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	bfc4      	itt	gt
 8003f32:	1a9b      	subgt	r3, r3, r2
 8003f34:	18ed      	addgt	r5, r5, r3
 8003f36:	2600      	movs	r6, #0
 8003f38:	341a      	adds	r4, #26
 8003f3a:	42b5      	cmp	r5, r6
 8003f3c:	d11a      	bne.n	8003f74 <_printf_common+0xc8>
 8003f3e:	2000      	movs	r0, #0
 8003f40:	e008      	b.n	8003f54 <_printf_common+0xa8>
 8003f42:	2301      	movs	r3, #1
 8003f44:	4652      	mov	r2, sl
 8003f46:	4649      	mov	r1, r9
 8003f48:	4638      	mov	r0, r7
 8003f4a:	47c0      	blx	r8
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d103      	bne.n	8003f58 <_printf_common+0xac>
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f58:	3501      	adds	r5, #1
 8003f5a:	e7c6      	b.n	8003eea <_printf_common+0x3e>
 8003f5c:	18e1      	adds	r1, r4, r3
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	2030      	movs	r0, #48	; 0x30
 8003f62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f66:	4422      	add	r2, r4
 8003f68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f70:	3302      	adds	r3, #2
 8003f72:	e7c7      	b.n	8003f04 <_printf_common+0x58>
 8003f74:	2301      	movs	r3, #1
 8003f76:	4622      	mov	r2, r4
 8003f78:	4649      	mov	r1, r9
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c0      	blx	r8
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d0e6      	beq.n	8003f50 <_printf_common+0xa4>
 8003f82:	3601      	adds	r6, #1
 8003f84:	e7d9      	b.n	8003f3a <_printf_common+0x8e>
	...

08003f88 <_printf_i>:
 8003f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	7e0f      	ldrb	r7, [r1, #24]
 8003f8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f90:	2f78      	cmp	r7, #120	; 0x78
 8003f92:	4691      	mov	r9, r2
 8003f94:	4680      	mov	r8, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	469a      	mov	sl, r3
 8003f9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f9e:	d807      	bhi.n	8003fb0 <_printf_i+0x28>
 8003fa0:	2f62      	cmp	r7, #98	; 0x62
 8003fa2:	d80a      	bhi.n	8003fba <_printf_i+0x32>
 8003fa4:	2f00      	cmp	r7, #0
 8003fa6:	f000 80d8 	beq.w	800415a <_printf_i+0x1d2>
 8003faa:	2f58      	cmp	r7, #88	; 0x58
 8003fac:	f000 80a3 	beq.w	80040f6 <_printf_i+0x16e>
 8003fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fb8:	e03a      	b.n	8004030 <_printf_i+0xa8>
 8003fba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fbe:	2b15      	cmp	r3, #21
 8003fc0:	d8f6      	bhi.n	8003fb0 <_printf_i+0x28>
 8003fc2:	a101      	add	r1, pc, #4	; (adr r1, 8003fc8 <_printf_i+0x40>)
 8003fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08004035 	.word	0x08004035
 8003fd0:	08003fb1 	.word	0x08003fb1
 8003fd4:	08003fb1 	.word	0x08003fb1
 8003fd8:	08003fb1 	.word	0x08003fb1
 8003fdc:	08003fb1 	.word	0x08003fb1
 8003fe0:	08004035 	.word	0x08004035
 8003fe4:	08003fb1 	.word	0x08003fb1
 8003fe8:	08003fb1 	.word	0x08003fb1
 8003fec:	08003fb1 	.word	0x08003fb1
 8003ff0:	08003fb1 	.word	0x08003fb1
 8003ff4:	08004141 	.word	0x08004141
 8003ff8:	08004065 	.word	0x08004065
 8003ffc:	08004123 	.word	0x08004123
 8004000:	08003fb1 	.word	0x08003fb1
 8004004:	08003fb1 	.word	0x08003fb1
 8004008:	08004163 	.word	0x08004163
 800400c:	08003fb1 	.word	0x08003fb1
 8004010:	08004065 	.word	0x08004065
 8004014:	08003fb1 	.word	0x08003fb1
 8004018:	08003fb1 	.word	0x08003fb1
 800401c:	0800412b 	.word	0x0800412b
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	602a      	str	r2, [r5, #0]
 8004028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800402c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004030:	2301      	movs	r3, #1
 8004032:	e0a3      	b.n	800417c <_printf_i+0x1f4>
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	6829      	ldr	r1, [r5, #0]
 8004038:	0606      	lsls	r6, r0, #24
 800403a:	f101 0304 	add.w	r3, r1, #4
 800403e:	d50a      	bpl.n	8004056 <_printf_i+0xce>
 8004040:	680e      	ldr	r6, [r1, #0]
 8004042:	602b      	str	r3, [r5, #0]
 8004044:	2e00      	cmp	r6, #0
 8004046:	da03      	bge.n	8004050 <_printf_i+0xc8>
 8004048:	232d      	movs	r3, #45	; 0x2d
 800404a:	4276      	negs	r6, r6
 800404c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004050:	485e      	ldr	r0, [pc, #376]	; (80041cc <_printf_i+0x244>)
 8004052:	230a      	movs	r3, #10
 8004054:	e019      	b.n	800408a <_printf_i+0x102>
 8004056:	680e      	ldr	r6, [r1, #0]
 8004058:	602b      	str	r3, [r5, #0]
 800405a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800405e:	bf18      	it	ne
 8004060:	b236      	sxthne	r6, r6
 8004062:	e7ef      	b.n	8004044 <_printf_i+0xbc>
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	6820      	ldr	r0, [r4, #0]
 8004068:	1d19      	adds	r1, r3, #4
 800406a:	6029      	str	r1, [r5, #0]
 800406c:	0601      	lsls	r1, r0, #24
 800406e:	d501      	bpl.n	8004074 <_printf_i+0xec>
 8004070:	681e      	ldr	r6, [r3, #0]
 8004072:	e002      	b.n	800407a <_printf_i+0xf2>
 8004074:	0646      	lsls	r6, r0, #25
 8004076:	d5fb      	bpl.n	8004070 <_printf_i+0xe8>
 8004078:	881e      	ldrh	r6, [r3, #0]
 800407a:	4854      	ldr	r0, [pc, #336]	; (80041cc <_printf_i+0x244>)
 800407c:	2f6f      	cmp	r7, #111	; 0x6f
 800407e:	bf0c      	ite	eq
 8004080:	2308      	moveq	r3, #8
 8004082:	230a      	movne	r3, #10
 8004084:	2100      	movs	r1, #0
 8004086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800408a:	6865      	ldr	r5, [r4, #4]
 800408c:	60a5      	str	r5, [r4, #8]
 800408e:	2d00      	cmp	r5, #0
 8004090:	bfa2      	ittt	ge
 8004092:	6821      	ldrge	r1, [r4, #0]
 8004094:	f021 0104 	bicge.w	r1, r1, #4
 8004098:	6021      	strge	r1, [r4, #0]
 800409a:	b90e      	cbnz	r6, 80040a0 <_printf_i+0x118>
 800409c:	2d00      	cmp	r5, #0
 800409e:	d04d      	beq.n	800413c <_printf_i+0x1b4>
 80040a0:	4615      	mov	r5, r2
 80040a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80040a6:	fb03 6711 	mls	r7, r3, r1, r6
 80040aa:	5dc7      	ldrb	r7, [r0, r7]
 80040ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040b0:	4637      	mov	r7, r6
 80040b2:	42bb      	cmp	r3, r7
 80040b4:	460e      	mov	r6, r1
 80040b6:	d9f4      	bls.n	80040a2 <_printf_i+0x11a>
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d10b      	bne.n	80040d4 <_printf_i+0x14c>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	07de      	lsls	r6, r3, #31
 80040c0:	d508      	bpl.n	80040d4 <_printf_i+0x14c>
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	6861      	ldr	r1, [r4, #4]
 80040c6:	4299      	cmp	r1, r3
 80040c8:	bfde      	ittt	le
 80040ca:	2330      	movle	r3, #48	; 0x30
 80040cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80040d4:	1b52      	subs	r2, r2, r5
 80040d6:	6122      	str	r2, [r4, #16]
 80040d8:	f8cd a000 	str.w	sl, [sp]
 80040dc:	464b      	mov	r3, r9
 80040de:	aa03      	add	r2, sp, #12
 80040e0:	4621      	mov	r1, r4
 80040e2:	4640      	mov	r0, r8
 80040e4:	f7ff fee2 	bl	8003eac <_printf_common>
 80040e8:	3001      	adds	r0, #1
 80040ea:	d14c      	bne.n	8004186 <_printf_i+0x1fe>
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040f0:	b004      	add	sp, #16
 80040f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f6:	4835      	ldr	r0, [pc, #212]	; (80041cc <_printf_i+0x244>)
 80040f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040fc:	6829      	ldr	r1, [r5, #0]
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f851 6b04 	ldr.w	r6, [r1], #4
 8004104:	6029      	str	r1, [r5, #0]
 8004106:	061d      	lsls	r5, r3, #24
 8004108:	d514      	bpl.n	8004134 <_printf_i+0x1ac>
 800410a:	07df      	lsls	r7, r3, #31
 800410c:	bf44      	itt	mi
 800410e:	f043 0320 	orrmi.w	r3, r3, #32
 8004112:	6023      	strmi	r3, [r4, #0]
 8004114:	b91e      	cbnz	r6, 800411e <_printf_i+0x196>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	f023 0320 	bic.w	r3, r3, #32
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	2310      	movs	r3, #16
 8004120:	e7b0      	b.n	8004084 <_printf_i+0xfc>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	f043 0320 	orr.w	r3, r3, #32
 8004128:	6023      	str	r3, [r4, #0]
 800412a:	2378      	movs	r3, #120	; 0x78
 800412c:	4828      	ldr	r0, [pc, #160]	; (80041d0 <_printf_i+0x248>)
 800412e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004132:	e7e3      	b.n	80040fc <_printf_i+0x174>
 8004134:	0659      	lsls	r1, r3, #25
 8004136:	bf48      	it	mi
 8004138:	b2b6      	uxthmi	r6, r6
 800413a:	e7e6      	b.n	800410a <_printf_i+0x182>
 800413c:	4615      	mov	r5, r2
 800413e:	e7bb      	b.n	80040b8 <_printf_i+0x130>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	6826      	ldr	r6, [r4, #0]
 8004144:	6961      	ldr	r1, [r4, #20]
 8004146:	1d18      	adds	r0, r3, #4
 8004148:	6028      	str	r0, [r5, #0]
 800414a:	0635      	lsls	r5, r6, #24
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	d501      	bpl.n	8004154 <_printf_i+0x1cc>
 8004150:	6019      	str	r1, [r3, #0]
 8004152:	e002      	b.n	800415a <_printf_i+0x1d2>
 8004154:	0670      	lsls	r0, r6, #25
 8004156:	d5fb      	bpl.n	8004150 <_printf_i+0x1c8>
 8004158:	8019      	strh	r1, [r3, #0]
 800415a:	2300      	movs	r3, #0
 800415c:	6123      	str	r3, [r4, #16]
 800415e:	4615      	mov	r5, r2
 8004160:	e7ba      	b.n	80040d8 <_printf_i+0x150>
 8004162:	682b      	ldr	r3, [r5, #0]
 8004164:	1d1a      	adds	r2, r3, #4
 8004166:	602a      	str	r2, [r5, #0]
 8004168:	681d      	ldr	r5, [r3, #0]
 800416a:	6862      	ldr	r2, [r4, #4]
 800416c:	2100      	movs	r1, #0
 800416e:	4628      	mov	r0, r5
 8004170:	f7fc f836 	bl	80001e0 <memchr>
 8004174:	b108      	cbz	r0, 800417a <_printf_i+0x1f2>
 8004176:	1b40      	subs	r0, r0, r5
 8004178:	6060      	str	r0, [r4, #4]
 800417a:	6863      	ldr	r3, [r4, #4]
 800417c:	6123      	str	r3, [r4, #16]
 800417e:	2300      	movs	r3, #0
 8004180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004184:	e7a8      	b.n	80040d8 <_printf_i+0x150>
 8004186:	6923      	ldr	r3, [r4, #16]
 8004188:	462a      	mov	r2, r5
 800418a:	4649      	mov	r1, r9
 800418c:	4640      	mov	r0, r8
 800418e:	47d0      	blx	sl
 8004190:	3001      	adds	r0, #1
 8004192:	d0ab      	beq.n	80040ec <_printf_i+0x164>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	079b      	lsls	r3, r3, #30
 8004198:	d413      	bmi.n	80041c2 <_printf_i+0x23a>
 800419a:	68e0      	ldr	r0, [r4, #12]
 800419c:	9b03      	ldr	r3, [sp, #12]
 800419e:	4298      	cmp	r0, r3
 80041a0:	bfb8      	it	lt
 80041a2:	4618      	movlt	r0, r3
 80041a4:	e7a4      	b.n	80040f0 <_printf_i+0x168>
 80041a6:	2301      	movs	r3, #1
 80041a8:	4632      	mov	r2, r6
 80041aa:	4649      	mov	r1, r9
 80041ac:	4640      	mov	r0, r8
 80041ae:	47d0      	blx	sl
 80041b0:	3001      	adds	r0, #1
 80041b2:	d09b      	beq.n	80040ec <_printf_i+0x164>
 80041b4:	3501      	adds	r5, #1
 80041b6:	68e3      	ldr	r3, [r4, #12]
 80041b8:	9903      	ldr	r1, [sp, #12]
 80041ba:	1a5b      	subs	r3, r3, r1
 80041bc:	42ab      	cmp	r3, r5
 80041be:	dcf2      	bgt.n	80041a6 <_printf_i+0x21e>
 80041c0:	e7eb      	b.n	800419a <_printf_i+0x212>
 80041c2:	2500      	movs	r5, #0
 80041c4:	f104 0619 	add.w	r6, r4, #25
 80041c8:	e7f5      	b.n	80041b6 <_printf_i+0x22e>
 80041ca:	bf00      	nop
 80041cc:	080060db 	.word	0x080060db
 80041d0:	080060ec 	.word	0x080060ec

080041d4 <__swbuf_r>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	460e      	mov	r6, r1
 80041d8:	4614      	mov	r4, r2
 80041da:	4605      	mov	r5, r0
 80041dc:	b118      	cbz	r0, 80041e6 <__swbuf_r+0x12>
 80041de:	6983      	ldr	r3, [r0, #24]
 80041e0:	b90b      	cbnz	r3, 80041e6 <__swbuf_r+0x12>
 80041e2:	f001 f851 	bl	8005288 <__sinit>
 80041e6:	4b21      	ldr	r3, [pc, #132]	; (800426c <__swbuf_r+0x98>)
 80041e8:	429c      	cmp	r4, r3
 80041ea:	d12b      	bne.n	8004244 <__swbuf_r+0x70>
 80041ec:	686c      	ldr	r4, [r5, #4]
 80041ee:	69a3      	ldr	r3, [r4, #24]
 80041f0:	60a3      	str	r3, [r4, #8]
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	071a      	lsls	r2, r3, #28
 80041f6:	d52f      	bpl.n	8004258 <__swbuf_r+0x84>
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	b36b      	cbz	r3, 8004258 <__swbuf_r+0x84>
 80041fc:	6923      	ldr	r3, [r4, #16]
 80041fe:	6820      	ldr	r0, [r4, #0]
 8004200:	1ac0      	subs	r0, r0, r3
 8004202:	6963      	ldr	r3, [r4, #20]
 8004204:	b2f6      	uxtb	r6, r6
 8004206:	4283      	cmp	r3, r0
 8004208:	4637      	mov	r7, r6
 800420a:	dc04      	bgt.n	8004216 <__swbuf_r+0x42>
 800420c:	4621      	mov	r1, r4
 800420e:	4628      	mov	r0, r5
 8004210:	f000 ffa6 	bl	8005160 <_fflush_r>
 8004214:	bb30      	cbnz	r0, 8004264 <__swbuf_r+0x90>
 8004216:	68a3      	ldr	r3, [r4, #8]
 8004218:	3b01      	subs	r3, #1
 800421a:	60a3      	str	r3, [r4, #8]
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	6022      	str	r2, [r4, #0]
 8004222:	701e      	strb	r6, [r3, #0]
 8004224:	6963      	ldr	r3, [r4, #20]
 8004226:	3001      	adds	r0, #1
 8004228:	4283      	cmp	r3, r0
 800422a:	d004      	beq.n	8004236 <__swbuf_r+0x62>
 800422c:	89a3      	ldrh	r3, [r4, #12]
 800422e:	07db      	lsls	r3, r3, #31
 8004230:	d506      	bpl.n	8004240 <__swbuf_r+0x6c>
 8004232:	2e0a      	cmp	r6, #10
 8004234:	d104      	bne.n	8004240 <__swbuf_r+0x6c>
 8004236:	4621      	mov	r1, r4
 8004238:	4628      	mov	r0, r5
 800423a:	f000 ff91 	bl	8005160 <_fflush_r>
 800423e:	b988      	cbnz	r0, 8004264 <__swbuf_r+0x90>
 8004240:	4638      	mov	r0, r7
 8004242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <__swbuf_r+0x9c>)
 8004246:	429c      	cmp	r4, r3
 8004248:	d101      	bne.n	800424e <__swbuf_r+0x7a>
 800424a:	68ac      	ldr	r4, [r5, #8]
 800424c:	e7cf      	b.n	80041ee <__swbuf_r+0x1a>
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <__swbuf_r+0xa0>)
 8004250:	429c      	cmp	r4, r3
 8004252:	bf08      	it	eq
 8004254:	68ec      	ldreq	r4, [r5, #12]
 8004256:	e7ca      	b.n	80041ee <__swbuf_r+0x1a>
 8004258:	4621      	mov	r1, r4
 800425a:	4628      	mov	r0, r5
 800425c:	f000 f80c 	bl	8004278 <__swsetup_r>
 8004260:	2800      	cmp	r0, #0
 8004262:	d0cb      	beq.n	80041fc <__swbuf_r+0x28>
 8004264:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004268:	e7ea      	b.n	8004240 <__swbuf_r+0x6c>
 800426a:	bf00      	nop
 800426c:	080061b0 	.word	0x080061b0
 8004270:	080061d0 	.word	0x080061d0
 8004274:	08006190 	.word	0x08006190

08004278 <__swsetup_r>:
 8004278:	4b32      	ldr	r3, [pc, #200]	; (8004344 <__swsetup_r+0xcc>)
 800427a:	b570      	push	{r4, r5, r6, lr}
 800427c:	681d      	ldr	r5, [r3, #0]
 800427e:	4606      	mov	r6, r0
 8004280:	460c      	mov	r4, r1
 8004282:	b125      	cbz	r5, 800428e <__swsetup_r+0x16>
 8004284:	69ab      	ldr	r3, [r5, #24]
 8004286:	b913      	cbnz	r3, 800428e <__swsetup_r+0x16>
 8004288:	4628      	mov	r0, r5
 800428a:	f000 fffd 	bl	8005288 <__sinit>
 800428e:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <__swsetup_r+0xd0>)
 8004290:	429c      	cmp	r4, r3
 8004292:	d10f      	bne.n	80042b4 <__swsetup_r+0x3c>
 8004294:	686c      	ldr	r4, [r5, #4]
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800429c:	0719      	lsls	r1, r3, #28
 800429e:	d42c      	bmi.n	80042fa <__swsetup_r+0x82>
 80042a0:	06dd      	lsls	r5, r3, #27
 80042a2:	d411      	bmi.n	80042c8 <__swsetup_r+0x50>
 80042a4:	2309      	movs	r3, #9
 80042a6:	6033      	str	r3, [r6, #0]
 80042a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042ac:	81a3      	strh	r3, [r4, #12]
 80042ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042b2:	e03e      	b.n	8004332 <__swsetup_r+0xba>
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <__swsetup_r+0xd4>)
 80042b6:	429c      	cmp	r4, r3
 80042b8:	d101      	bne.n	80042be <__swsetup_r+0x46>
 80042ba:	68ac      	ldr	r4, [r5, #8]
 80042bc:	e7eb      	b.n	8004296 <__swsetup_r+0x1e>
 80042be:	4b24      	ldr	r3, [pc, #144]	; (8004350 <__swsetup_r+0xd8>)
 80042c0:	429c      	cmp	r4, r3
 80042c2:	bf08      	it	eq
 80042c4:	68ec      	ldreq	r4, [r5, #12]
 80042c6:	e7e6      	b.n	8004296 <__swsetup_r+0x1e>
 80042c8:	0758      	lsls	r0, r3, #29
 80042ca:	d512      	bpl.n	80042f2 <__swsetup_r+0x7a>
 80042cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ce:	b141      	cbz	r1, 80042e2 <__swsetup_r+0x6a>
 80042d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042d4:	4299      	cmp	r1, r3
 80042d6:	d002      	beq.n	80042de <__swsetup_r+0x66>
 80042d8:	4630      	mov	r0, r6
 80042da:	f001 fc8f 	bl	8005bfc <_free_r>
 80042de:	2300      	movs	r3, #0
 80042e0:	6363      	str	r3, [r4, #52]	; 0x34
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	2300      	movs	r3, #0
 80042ec:	6063      	str	r3, [r4, #4]
 80042ee:	6923      	ldr	r3, [r4, #16]
 80042f0:	6023      	str	r3, [r4, #0]
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	f043 0308 	orr.w	r3, r3, #8
 80042f8:	81a3      	strh	r3, [r4, #12]
 80042fa:	6923      	ldr	r3, [r4, #16]
 80042fc:	b94b      	cbnz	r3, 8004312 <__swsetup_r+0x9a>
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004308:	d003      	beq.n	8004312 <__swsetup_r+0x9a>
 800430a:	4621      	mov	r1, r4
 800430c:	4630      	mov	r0, r6
 800430e:	f001 f885 	bl	800541c <__smakebuf_r>
 8004312:	89a0      	ldrh	r0, [r4, #12]
 8004314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004318:	f010 0301 	ands.w	r3, r0, #1
 800431c:	d00a      	beq.n	8004334 <__swsetup_r+0xbc>
 800431e:	2300      	movs	r3, #0
 8004320:	60a3      	str	r3, [r4, #8]
 8004322:	6963      	ldr	r3, [r4, #20]
 8004324:	425b      	negs	r3, r3
 8004326:	61a3      	str	r3, [r4, #24]
 8004328:	6923      	ldr	r3, [r4, #16]
 800432a:	b943      	cbnz	r3, 800433e <__swsetup_r+0xc6>
 800432c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004330:	d1ba      	bne.n	80042a8 <__swsetup_r+0x30>
 8004332:	bd70      	pop	{r4, r5, r6, pc}
 8004334:	0781      	lsls	r1, r0, #30
 8004336:	bf58      	it	pl
 8004338:	6963      	ldrpl	r3, [r4, #20]
 800433a:	60a3      	str	r3, [r4, #8]
 800433c:	e7f4      	b.n	8004328 <__swsetup_r+0xb0>
 800433e:	2000      	movs	r0, #0
 8004340:	e7f7      	b.n	8004332 <__swsetup_r+0xba>
 8004342:	bf00      	nop
 8004344:	2000000c 	.word	0x2000000c
 8004348:	080061b0 	.word	0x080061b0
 800434c:	080061d0 	.word	0x080061d0
 8004350:	08006190 	.word	0x08006190

08004354 <abort>:
 8004354:	b508      	push	{r3, lr}
 8004356:	2006      	movs	r0, #6
 8004358:	f001 fd68 	bl	8005e2c <raise>
 800435c:	2001      	movs	r0, #1
 800435e:	f7fd fa95 	bl	800188c <_exit>

08004362 <quorem>:
 8004362:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004366:	6903      	ldr	r3, [r0, #16]
 8004368:	690c      	ldr	r4, [r1, #16]
 800436a:	42a3      	cmp	r3, r4
 800436c:	4607      	mov	r7, r0
 800436e:	f2c0 8081 	blt.w	8004474 <quorem+0x112>
 8004372:	3c01      	subs	r4, #1
 8004374:	f101 0814 	add.w	r8, r1, #20
 8004378:	f100 0514 	add.w	r5, r0, #20
 800437c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004386:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800438a:	3301      	adds	r3, #1
 800438c:	429a      	cmp	r2, r3
 800438e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004392:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004396:	fbb2 f6f3 	udiv	r6, r2, r3
 800439a:	d331      	bcc.n	8004400 <quorem+0x9e>
 800439c:	f04f 0e00 	mov.w	lr, #0
 80043a0:	4640      	mov	r0, r8
 80043a2:	46ac      	mov	ip, r5
 80043a4:	46f2      	mov	sl, lr
 80043a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80043aa:	b293      	uxth	r3, r2
 80043ac:	fb06 e303 	mla	r3, r6, r3, lr
 80043b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	ebaa 0303 	sub.w	r3, sl, r3
 80043ba:	f8dc a000 	ldr.w	sl, [ip]
 80043be:	0c12      	lsrs	r2, r2, #16
 80043c0:	fa13 f38a 	uxtah	r3, r3, sl
 80043c4:	fb06 e202 	mla	r2, r6, r2, lr
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	9b00      	ldr	r3, [sp, #0]
 80043cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80043d0:	b292      	uxth	r2, r2
 80043d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80043d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043da:	f8bd 3000 	ldrh.w	r3, [sp]
 80043de:	4581      	cmp	r9, r0
 80043e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043e4:	f84c 3b04 	str.w	r3, [ip], #4
 80043e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80043ec:	d2db      	bcs.n	80043a6 <quorem+0x44>
 80043ee:	f855 300b 	ldr.w	r3, [r5, fp]
 80043f2:	b92b      	cbnz	r3, 8004400 <quorem+0x9e>
 80043f4:	9b01      	ldr	r3, [sp, #4]
 80043f6:	3b04      	subs	r3, #4
 80043f8:	429d      	cmp	r5, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	d32e      	bcc.n	800445c <quorem+0xfa>
 80043fe:	613c      	str	r4, [r7, #16]
 8004400:	4638      	mov	r0, r7
 8004402:	f001 fae3 	bl	80059cc <__mcmp>
 8004406:	2800      	cmp	r0, #0
 8004408:	db24      	blt.n	8004454 <quorem+0xf2>
 800440a:	3601      	adds	r6, #1
 800440c:	4628      	mov	r0, r5
 800440e:	f04f 0c00 	mov.w	ip, #0
 8004412:	f858 2b04 	ldr.w	r2, [r8], #4
 8004416:	f8d0 e000 	ldr.w	lr, [r0]
 800441a:	b293      	uxth	r3, r2
 800441c:	ebac 0303 	sub.w	r3, ip, r3
 8004420:	0c12      	lsrs	r2, r2, #16
 8004422:	fa13 f38e 	uxtah	r3, r3, lr
 8004426:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800442a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800442e:	b29b      	uxth	r3, r3
 8004430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004434:	45c1      	cmp	r9, r8
 8004436:	f840 3b04 	str.w	r3, [r0], #4
 800443a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800443e:	d2e8      	bcs.n	8004412 <quorem+0xb0>
 8004440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004448:	b922      	cbnz	r2, 8004454 <quorem+0xf2>
 800444a:	3b04      	subs	r3, #4
 800444c:	429d      	cmp	r5, r3
 800444e:	461a      	mov	r2, r3
 8004450:	d30a      	bcc.n	8004468 <quorem+0x106>
 8004452:	613c      	str	r4, [r7, #16]
 8004454:	4630      	mov	r0, r6
 8004456:	b003      	add	sp, #12
 8004458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	3b04      	subs	r3, #4
 8004460:	2a00      	cmp	r2, #0
 8004462:	d1cc      	bne.n	80043fe <quorem+0x9c>
 8004464:	3c01      	subs	r4, #1
 8004466:	e7c7      	b.n	80043f8 <quorem+0x96>
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	3b04      	subs	r3, #4
 800446c:	2a00      	cmp	r2, #0
 800446e:	d1f0      	bne.n	8004452 <quorem+0xf0>
 8004470:	3c01      	subs	r4, #1
 8004472:	e7eb      	b.n	800444c <quorem+0xea>
 8004474:	2000      	movs	r0, #0
 8004476:	e7ee      	b.n	8004456 <quorem+0xf4>

08004478 <_dtoa_r>:
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447c:	ed2d 8b04 	vpush	{d8-d9}
 8004480:	ec57 6b10 	vmov	r6, r7, d0
 8004484:	b093      	sub	sp, #76	; 0x4c
 8004486:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004488:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800448c:	9106      	str	r1, [sp, #24]
 800448e:	ee10 aa10 	vmov	sl, s0
 8004492:	4604      	mov	r4, r0
 8004494:	9209      	str	r2, [sp, #36]	; 0x24
 8004496:	930c      	str	r3, [sp, #48]	; 0x30
 8004498:	46bb      	mov	fp, r7
 800449a:	b975      	cbnz	r5, 80044ba <_dtoa_r+0x42>
 800449c:	2010      	movs	r0, #16
 800449e:	f000 fffd 	bl	800549c <malloc>
 80044a2:	4602      	mov	r2, r0
 80044a4:	6260      	str	r0, [r4, #36]	; 0x24
 80044a6:	b920      	cbnz	r0, 80044b2 <_dtoa_r+0x3a>
 80044a8:	4ba7      	ldr	r3, [pc, #668]	; (8004748 <_dtoa_r+0x2d0>)
 80044aa:	21ea      	movs	r1, #234	; 0xea
 80044ac:	48a7      	ldr	r0, [pc, #668]	; (800474c <_dtoa_r+0x2d4>)
 80044ae:	f7ff f86b 	bl	8003588 <__assert_func>
 80044b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80044b6:	6005      	str	r5, [r0, #0]
 80044b8:	60c5      	str	r5, [r0, #12]
 80044ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	b151      	cbz	r1, 80044d6 <_dtoa_r+0x5e>
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	604a      	str	r2, [r1, #4]
 80044c4:	2301      	movs	r3, #1
 80044c6:	4093      	lsls	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
 80044ca:	4620      	mov	r0, r4
 80044cc:	f001 f83c 	bl	8005548 <_Bfree>
 80044d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	1e3b      	subs	r3, r7, #0
 80044d8:	bfaa      	itet	ge
 80044da:	2300      	movge	r3, #0
 80044dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80044e0:	f8c8 3000 	strge.w	r3, [r8]
 80044e4:	4b9a      	ldr	r3, [pc, #616]	; (8004750 <_dtoa_r+0x2d8>)
 80044e6:	bfbc      	itt	lt
 80044e8:	2201      	movlt	r2, #1
 80044ea:	f8c8 2000 	strlt.w	r2, [r8]
 80044ee:	ea33 030b 	bics.w	r3, r3, fp
 80044f2:	d11b      	bne.n	800452c <_dtoa_r+0xb4>
 80044f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80044fa:	6013      	str	r3, [r2, #0]
 80044fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004500:	4333      	orrs	r3, r6
 8004502:	f000 8592 	beq.w	800502a <_dtoa_r+0xbb2>
 8004506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004508:	b963      	cbnz	r3, 8004524 <_dtoa_r+0xac>
 800450a:	4b92      	ldr	r3, [pc, #584]	; (8004754 <_dtoa_r+0x2dc>)
 800450c:	e022      	b.n	8004554 <_dtoa_r+0xdc>
 800450e:	4b92      	ldr	r3, [pc, #584]	; (8004758 <_dtoa_r+0x2e0>)
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	3308      	adds	r3, #8
 8004514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	9801      	ldr	r0, [sp, #4]
 800451a:	b013      	add	sp, #76	; 0x4c
 800451c:	ecbd 8b04 	vpop	{d8-d9}
 8004520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004524:	4b8b      	ldr	r3, [pc, #556]	; (8004754 <_dtoa_r+0x2dc>)
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	3303      	adds	r3, #3
 800452a:	e7f3      	b.n	8004514 <_dtoa_r+0x9c>
 800452c:	2200      	movs	r2, #0
 800452e:	2300      	movs	r3, #0
 8004530:	4650      	mov	r0, sl
 8004532:	4659      	mov	r1, fp
 8004534:	f7fc fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004538:	ec4b ab19 	vmov	d9, sl, fp
 800453c:	4680      	mov	r8, r0
 800453e:	b158      	cbz	r0, 8004558 <_dtoa_r+0xe0>
 8004540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004542:	2301      	movs	r3, #1
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 856b 	beq.w	8005024 <_dtoa_r+0xbac>
 800454e:	4883      	ldr	r0, [pc, #524]	; (800475c <_dtoa_r+0x2e4>)
 8004550:	6018      	str	r0, [r3, #0]
 8004552:	1e43      	subs	r3, r0, #1
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	e7df      	b.n	8004518 <_dtoa_r+0xa0>
 8004558:	ec4b ab10 	vmov	d0, sl, fp
 800455c:	aa10      	add	r2, sp, #64	; 0x40
 800455e:	a911      	add	r1, sp, #68	; 0x44
 8004560:	4620      	mov	r0, r4
 8004562:	f001 fad9 	bl	8005b18 <__d2b>
 8004566:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800456a:	ee08 0a10 	vmov	s16, r0
 800456e:	2d00      	cmp	r5, #0
 8004570:	f000 8084 	beq.w	800467c <_dtoa_r+0x204>
 8004574:	ee19 3a90 	vmov	r3, s19
 8004578:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800457c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004580:	4656      	mov	r6, sl
 8004582:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004586:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800458a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800458e:	4b74      	ldr	r3, [pc, #464]	; (8004760 <_dtoa_r+0x2e8>)
 8004590:	2200      	movs	r2, #0
 8004592:	4630      	mov	r0, r6
 8004594:	4639      	mov	r1, r7
 8004596:	f7fb fe77 	bl	8000288 <__aeabi_dsub>
 800459a:	a365      	add	r3, pc, #404	; (adr r3, 8004730 <_dtoa_r+0x2b8>)
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f7fc f82a 	bl	80005f8 <__aeabi_dmul>
 80045a4:	a364      	add	r3, pc, #400	; (adr r3, 8004738 <_dtoa_r+0x2c0>)
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f7fb fe6f 	bl	800028c <__adddf3>
 80045ae:	4606      	mov	r6, r0
 80045b0:	4628      	mov	r0, r5
 80045b2:	460f      	mov	r7, r1
 80045b4:	f7fb ffb6 	bl	8000524 <__aeabi_i2d>
 80045b8:	a361      	add	r3, pc, #388	; (adr r3, 8004740 <_dtoa_r+0x2c8>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	f7fc f81b 	bl	80005f8 <__aeabi_dmul>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4630      	mov	r0, r6
 80045c8:	4639      	mov	r1, r7
 80045ca:	f7fb fe5f 	bl	800028c <__adddf3>
 80045ce:	4606      	mov	r6, r0
 80045d0:	460f      	mov	r7, r1
 80045d2:	f7fc fac1 	bl	8000b58 <__aeabi_d2iz>
 80045d6:	2200      	movs	r2, #0
 80045d8:	9000      	str	r0, [sp, #0]
 80045da:	2300      	movs	r3, #0
 80045dc:	4630      	mov	r0, r6
 80045de:	4639      	mov	r1, r7
 80045e0:	f7fc fa7c 	bl	8000adc <__aeabi_dcmplt>
 80045e4:	b150      	cbz	r0, 80045fc <_dtoa_r+0x184>
 80045e6:	9800      	ldr	r0, [sp, #0]
 80045e8:	f7fb ff9c 	bl	8000524 <__aeabi_i2d>
 80045ec:	4632      	mov	r2, r6
 80045ee:	463b      	mov	r3, r7
 80045f0:	f7fc fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80045f4:	b910      	cbnz	r0, 80045fc <_dtoa_r+0x184>
 80045f6:	9b00      	ldr	r3, [sp, #0]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	9b00      	ldr	r3, [sp, #0]
 80045fe:	2b16      	cmp	r3, #22
 8004600:	d85a      	bhi.n	80046b8 <_dtoa_r+0x240>
 8004602:	9a00      	ldr	r2, [sp, #0]
 8004604:	4b57      	ldr	r3, [pc, #348]	; (8004764 <_dtoa_r+0x2ec>)
 8004606:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	ec51 0b19 	vmov	r0, r1, d9
 8004612:	f7fc fa63 	bl	8000adc <__aeabi_dcmplt>
 8004616:	2800      	cmp	r0, #0
 8004618:	d050      	beq.n	80046bc <_dtoa_r+0x244>
 800461a:	9b00      	ldr	r3, [sp, #0]
 800461c:	3b01      	subs	r3, #1
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	2300      	movs	r3, #0
 8004622:	930b      	str	r3, [sp, #44]	; 0x2c
 8004624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004626:	1b5d      	subs	r5, r3, r5
 8004628:	1e6b      	subs	r3, r5, #1
 800462a:	9305      	str	r3, [sp, #20]
 800462c:	bf45      	ittet	mi
 800462e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004632:	9304      	strmi	r3, [sp, #16]
 8004634:	2300      	movpl	r3, #0
 8004636:	2300      	movmi	r3, #0
 8004638:	bf4c      	ite	mi
 800463a:	9305      	strmi	r3, [sp, #20]
 800463c:	9304      	strpl	r3, [sp, #16]
 800463e:	9b00      	ldr	r3, [sp, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	db3d      	blt.n	80046c0 <_dtoa_r+0x248>
 8004644:	9b05      	ldr	r3, [sp, #20]
 8004646:	9a00      	ldr	r2, [sp, #0]
 8004648:	920a      	str	r2, [sp, #40]	; 0x28
 800464a:	4413      	add	r3, r2
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	2300      	movs	r3, #0
 8004650:	9307      	str	r3, [sp, #28]
 8004652:	9b06      	ldr	r3, [sp, #24]
 8004654:	2b09      	cmp	r3, #9
 8004656:	f200 8089 	bhi.w	800476c <_dtoa_r+0x2f4>
 800465a:	2b05      	cmp	r3, #5
 800465c:	bfc4      	itt	gt
 800465e:	3b04      	subgt	r3, #4
 8004660:	9306      	strgt	r3, [sp, #24]
 8004662:	9b06      	ldr	r3, [sp, #24]
 8004664:	f1a3 0302 	sub.w	r3, r3, #2
 8004668:	bfcc      	ite	gt
 800466a:	2500      	movgt	r5, #0
 800466c:	2501      	movle	r5, #1
 800466e:	2b03      	cmp	r3, #3
 8004670:	f200 8087 	bhi.w	8004782 <_dtoa_r+0x30a>
 8004674:	e8df f003 	tbb	[pc, r3]
 8004678:	59383a2d 	.word	0x59383a2d
 800467c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004680:	441d      	add	r5, r3
 8004682:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004686:	2b20      	cmp	r3, #32
 8004688:	bfc1      	itttt	gt
 800468a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800468e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004692:	fa0b f303 	lslgt.w	r3, fp, r3
 8004696:	fa26 f000 	lsrgt.w	r0, r6, r0
 800469a:	bfda      	itte	le
 800469c:	f1c3 0320 	rsble	r3, r3, #32
 80046a0:	fa06 f003 	lslle.w	r0, r6, r3
 80046a4:	4318      	orrgt	r0, r3
 80046a6:	f7fb ff2d 	bl	8000504 <__aeabi_ui2d>
 80046aa:	2301      	movs	r3, #1
 80046ac:	4606      	mov	r6, r0
 80046ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80046b2:	3d01      	subs	r5, #1
 80046b4:	930e      	str	r3, [sp, #56]	; 0x38
 80046b6:	e76a      	b.n	800458e <_dtoa_r+0x116>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e7b2      	b.n	8004622 <_dtoa_r+0x1aa>
 80046bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80046be:	e7b1      	b.n	8004624 <_dtoa_r+0x1ac>
 80046c0:	9b04      	ldr	r3, [sp, #16]
 80046c2:	9a00      	ldr	r2, [sp, #0]
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	9304      	str	r3, [sp, #16]
 80046c8:	4253      	negs	r3, r2
 80046ca:	9307      	str	r3, [sp, #28]
 80046cc:	2300      	movs	r3, #0
 80046ce:	930a      	str	r3, [sp, #40]	; 0x28
 80046d0:	e7bf      	b.n	8004652 <_dtoa_r+0x1da>
 80046d2:	2300      	movs	r3, #0
 80046d4:	9308      	str	r3, [sp, #32]
 80046d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d8:	2b00      	cmp	r3, #0
 80046da:	dc55      	bgt.n	8004788 <_dtoa_r+0x310>
 80046dc:	2301      	movs	r3, #1
 80046de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80046e2:	461a      	mov	r2, r3
 80046e4:	9209      	str	r2, [sp, #36]	; 0x24
 80046e6:	e00c      	b.n	8004702 <_dtoa_r+0x28a>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e7f3      	b.n	80046d4 <_dtoa_r+0x25c>
 80046ec:	2300      	movs	r3, #0
 80046ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046f0:	9308      	str	r3, [sp, #32]
 80046f2:	9b00      	ldr	r3, [sp, #0]
 80046f4:	4413      	add	r3, r2
 80046f6:	9302      	str	r3, [sp, #8]
 80046f8:	3301      	adds	r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	9303      	str	r3, [sp, #12]
 80046fe:	bfb8      	it	lt
 8004700:	2301      	movlt	r3, #1
 8004702:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004704:	2200      	movs	r2, #0
 8004706:	6042      	str	r2, [r0, #4]
 8004708:	2204      	movs	r2, #4
 800470a:	f102 0614 	add.w	r6, r2, #20
 800470e:	429e      	cmp	r6, r3
 8004710:	6841      	ldr	r1, [r0, #4]
 8004712:	d93d      	bls.n	8004790 <_dtoa_r+0x318>
 8004714:	4620      	mov	r0, r4
 8004716:	f000 fed7 	bl	80054c8 <_Balloc>
 800471a:	9001      	str	r0, [sp, #4]
 800471c:	2800      	cmp	r0, #0
 800471e:	d13b      	bne.n	8004798 <_dtoa_r+0x320>
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <_dtoa_r+0x2f0>)
 8004722:	4602      	mov	r2, r0
 8004724:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004728:	e6c0      	b.n	80044ac <_dtoa_r+0x34>
 800472a:	2301      	movs	r3, #1
 800472c:	e7df      	b.n	80046ee <_dtoa_r+0x276>
 800472e:	bf00      	nop
 8004730:	636f4361 	.word	0x636f4361
 8004734:	3fd287a7 	.word	0x3fd287a7
 8004738:	8b60c8b3 	.word	0x8b60c8b3
 800473c:	3fc68a28 	.word	0x3fc68a28
 8004740:	509f79fb 	.word	0x509f79fb
 8004744:	3fd34413 	.word	0x3fd34413
 8004748:	0800610a 	.word	0x0800610a
 800474c:	08006121 	.word	0x08006121
 8004750:	7ff00000 	.word	0x7ff00000
 8004754:	08006106 	.word	0x08006106
 8004758:	080060fd 	.word	0x080060fd
 800475c:	080060da 	.word	0x080060da
 8004760:	3ff80000 	.word	0x3ff80000
 8004764:	08006278 	.word	0x08006278
 8004768:	0800617c 	.word	0x0800617c
 800476c:	2501      	movs	r5, #1
 800476e:	2300      	movs	r3, #0
 8004770:	9306      	str	r3, [sp, #24]
 8004772:	9508      	str	r5, [sp, #32]
 8004774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004778:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800477c:	2200      	movs	r2, #0
 800477e:	2312      	movs	r3, #18
 8004780:	e7b0      	b.n	80046e4 <_dtoa_r+0x26c>
 8004782:	2301      	movs	r3, #1
 8004784:	9308      	str	r3, [sp, #32]
 8004786:	e7f5      	b.n	8004774 <_dtoa_r+0x2fc>
 8004788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800478a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800478e:	e7b8      	b.n	8004702 <_dtoa_r+0x28a>
 8004790:	3101      	adds	r1, #1
 8004792:	6041      	str	r1, [r0, #4]
 8004794:	0052      	lsls	r2, r2, #1
 8004796:	e7b8      	b.n	800470a <_dtoa_r+0x292>
 8004798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800479a:	9a01      	ldr	r2, [sp, #4]
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	9b03      	ldr	r3, [sp, #12]
 80047a0:	2b0e      	cmp	r3, #14
 80047a2:	f200 809d 	bhi.w	80048e0 <_dtoa_r+0x468>
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	f000 809a 	beq.w	80048e0 <_dtoa_r+0x468>
 80047ac:	9b00      	ldr	r3, [sp, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	dd32      	ble.n	8004818 <_dtoa_r+0x3a0>
 80047b2:	4ab7      	ldr	r2, [pc, #732]	; (8004a90 <_dtoa_r+0x618>)
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80047bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047c0:	9b00      	ldr	r3, [sp, #0]
 80047c2:	05d8      	lsls	r0, r3, #23
 80047c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80047c8:	d516      	bpl.n	80047f8 <_dtoa_r+0x380>
 80047ca:	4bb2      	ldr	r3, [pc, #712]	; (8004a94 <_dtoa_r+0x61c>)
 80047cc:	ec51 0b19 	vmov	r0, r1, d9
 80047d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047d4:	f7fc f83a 	bl	800084c <__aeabi_ddiv>
 80047d8:	f007 070f 	and.w	r7, r7, #15
 80047dc:	4682      	mov	sl, r0
 80047de:	468b      	mov	fp, r1
 80047e0:	2503      	movs	r5, #3
 80047e2:	4eac      	ldr	r6, [pc, #688]	; (8004a94 <_dtoa_r+0x61c>)
 80047e4:	b957      	cbnz	r7, 80047fc <_dtoa_r+0x384>
 80047e6:	4642      	mov	r2, r8
 80047e8:	464b      	mov	r3, r9
 80047ea:	4650      	mov	r0, sl
 80047ec:	4659      	mov	r1, fp
 80047ee:	f7fc f82d 	bl	800084c <__aeabi_ddiv>
 80047f2:	4682      	mov	sl, r0
 80047f4:	468b      	mov	fp, r1
 80047f6:	e028      	b.n	800484a <_dtoa_r+0x3d2>
 80047f8:	2502      	movs	r5, #2
 80047fa:	e7f2      	b.n	80047e2 <_dtoa_r+0x36a>
 80047fc:	07f9      	lsls	r1, r7, #31
 80047fe:	d508      	bpl.n	8004812 <_dtoa_r+0x39a>
 8004800:	4640      	mov	r0, r8
 8004802:	4649      	mov	r1, r9
 8004804:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004808:	f7fb fef6 	bl	80005f8 <__aeabi_dmul>
 800480c:	3501      	adds	r5, #1
 800480e:	4680      	mov	r8, r0
 8004810:	4689      	mov	r9, r1
 8004812:	107f      	asrs	r7, r7, #1
 8004814:	3608      	adds	r6, #8
 8004816:	e7e5      	b.n	80047e4 <_dtoa_r+0x36c>
 8004818:	f000 809b 	beq.w	8004952 <_dtoa_r+0x4da>
 800481c:	9b00      	ldr	r3, [sp, #0]
 800481e:	4f9d      	ldr	r7, [pc, #628]	; (8004a94 <_dtoa_r+0x61c>)
 8004820:	425e      	negs	r6, r3
 8004822:	4b9b      	ldr	r3, [pc, #620]	; (8004a90 <_dtoa_r+0x618>)
 8004824:	f006 020f 	and.w	r2, r6, #15
 8004828:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800482c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004830:	ec51 0b19 	vmov	r0, r1, d9
 8004834:	f7fb fee0 	bl	80005f8 <__aeabi_dmul>
 8004838:	1136      	asrs	r6, r6, #4
 800483a:	4682      	mov	sl, r0
 800483c:	468b      	mov	fp, r1
 800483e:	2300      	movs	r3, #0
 8004840:	2502      	movs	r5, #2
 8004842:	2e00      	cmp	r6, #0
 8004844:	d17a      	bne.n	800493c <_dtoa_r+0x4c4>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1d3      	bne.n	80047f2 <_dtoa_r+0x37a>
 800484a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8082 	beq.w	8004956 <_dtoa_r+0x4de>
 8004852:	4b91      	ldr	r3, [pc, #580]	; (8004a98 <_dtoa_r+0x620>)
 8004854:	2200      	movs	r2, #0
 8004856:	4650      	mov	r0, sl
 8004858:	4659      	mov	r1, fp
 800485a:	f7fc f93f 	bl	8000adc <__aeabi_dcmplt>
 800485e:	2800      	cmp	r0, #0
 8004860:	d079      	beq.n	8004956 <_dtoa_r+0x4de>
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d076      	beq.n	8004956 <_dtoa_r+0x4de>
 8004868:	9b02      	ldr	r3, [sp, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	dd36      	ble.n	80048dc <_dtoa_r+0x464>
 800486e:	9b00      	ldr	r3, [sp, #0]
 8004870:	4650      	mov	r0, sl
 8004872:	4659      	mov	r1, fp
 8004874:	1e5f      	subs	r7, r3, #1
 8004876:	2200      	movs	r2, #0
 8004878:	4b88      	ldr	r3, [pc, #544]	; (8004a9c <_dtoa_r+0x624>)
 800487a:	f7fb febd 	bl	80005f8 <__aeabi_dmul>
 800487e:	9e02      	ldr	r6, [sp, #8]
 8004880:	4682      	mov	sl, r0
 8004882:	468b      	mov	fp, r1
 8004884:	3501      	adds	r5, #1
 8004886:	4628      	mov	r0, r5
 8004888:	f7fb fe4c 	bl	8000524 <__aeabi_i2d>
 800488c:	4652      	mov	r2, sl
 800488e:	465b      	mov	r3, fp
 8004890:	f7fb feb2 	bl	80005f8 <__aeabi_dmul>
 8004894:	4b82      	ldr	r3, [pc, #520]	; (8004aa0 <_dtoa_r+0x628>)
 8004896:	2200      	movs	r2, #0
 8004898:	f7fb fcf8 	bl	800028c <__adddf3>
 800489c:	46d0      	mov	r8, sl
 800489e:	46d9      	mov	r9, fp
 80048a0:	4682      	mov	sl, r0
 80048a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80048a6:	2e00      	cmp	r6, #0
 80048a8:	d158      	bne.n	800495c <_dtoa_r+0x4e4>
 80048aa:	4b7e      	ldr	r3, [pc, #504]	; (8004aa4 <_dtoa_r+0x62c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	4640      	mov	r0, r8
 80048b0:	4649      	mov	r1, r9
 80048b2:	f7fb fce9 	bl	8000288 <__aeabi_dsub>
 80048b6:	4652      	mov	r2, sl
 80048b8:	465b      	mov	r3, fp
 80048ba:	4680      	mov	r8, r0
 80048bc:	4689      	mov	r9, r1
 80048be:	f7fc f92b 	bl	8000b18 <__aeabi_dcmpgt>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	f040 8295 	bne.w	8004df2 <_dtoa_r+0x97a>
 80048c8:	4652      	mov	r2, sl
 80048ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80048ce:	4640      	mov	r0, r8
 80048d0:	4649      	mov	r1, r9
 80048d2:	f7fc f903 	bl	8000adc <__aeabi_dcmplt>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	f040 8289 	bne.w	8004dee <_dtoa_r+0x976>
 80048dc:	ec5b ab19 	vmov	sl, fp, d9
 80048e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f2c0 8148 	blt.w	8004b78 <_dtoa_r+0x700>
 80048e8:	9a00      	ldr	r2, [sp, #0]
 80048ea:	2a0e      	cmp	r2, #14
 80048ec:	f300 8144 	bgt.w	8004b78 <_dtoa_r+0x700>
 80048f0:	4b67      	ldr	r3, [pc, #412]	; (8004a90 <_dtoa_r+0x618>)
 80048f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f280 80d5 	bge.w	8004aac <_dtoa_r+0x634>
 8004902:	9b03      	ldr	r3, [sp, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f300 80d1 	bgt.w	8004aac <_dtoa_r+0x634>
 800490a:	f040 826f 	bne.w	8004dec <_dtoa_r+0x974>
 800490e:	4b65      	ldr	r3, [pc, #404]	; (8004aa4 <_dtoa_r+0x62c>)
 8004910:	2200      	movs	r2, #0
 8004912:	4640      	mov	r0, r8
 8004914:	4649      	mov	r1, r9
 8004916:	f7fb fe6f 	bl	80005f8 <__aeabi_dmul>
 800491a:	4652      	mov	r2, sl
 800491c:	465b      	mov	r3, fp
 800491e:	f7fc f8f1 	bl	8000b04 <__aeabi_dcmpge>
 8004922:	9e03      	ldr	r6, [sp, #12]
 8004924:	4637      	mov	r7, r6
 8004926:	2800      	cmp	r0, #0
 8004928:	f040 8245 	bne.w	8004db6 <_dtoa_r+0x93e>
 800492c:	9d01      	ldr	r5, [sp, #4]
 800492e:	2331      	movs	r3, #49	; 0x31
 8004930:	f805 3b01 	strb.w	r3, [r5], #1
 8004934:	9b00      	ldr	r3, [sp, #0]
 8004936:	3301      	adds	r3, #1
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	e240      	b.n	8004dbe <_dtoa_r+0x946>
 800493c:	07f2      	lsls	r2, r6, #31
 800493e:	d505      	bpl.n	800494c <_dtoa_r+0x4d4>
 8004940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004944:	f7fb fe58 	bl	80005f8 <__aeabi_dmul>
 8004948:	3501      	adds	r5, #1
 800494a:	2301      	movs	r3, #1
 800494c:	1076      	asrs	r6, r6, #1
 800494e:	3708      	adds	r7, #8
 8004950:	e777      	b.n	8004842 <_dtoa_r+0x3ca>
 8004952:	2502      	movs	r5, #2
 8004954:	e779      	b.n	800484a <_dtoa_r+0x3d2>
 8004956:	9f00      	ldr	r7, [sp, #0]
 8004958:	9e03      	ldr	r6, [sp, #12]
 800495a:	e794      	b.n	8004886 <_dtoa_r+0x40e>
 800495c:	9901      	ldr	r1, [sp, #4]
 800495e:	4b4c      	ldr	r3, [pc, #304]	; (8004a90 <_dtoa_r+0x618>)
 8004960:	4431      	add	r1, r6
 8004962:	910d      	str	r1, [sp, #52]	; 0x34
 8004964:	9908      	ldr	r1, [sp, #32]
 8004966:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800496a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800496e:	2900      	cmp	r1, #0
 8004970:	d043      	beq.n	80049fa <_dtoa_r+0x582>
 8004972:	494d      	ldr	r1, [pc, #308]	; (8004aa8 <_dtoa_r+0x630>)
 8004974:	2000      	movs	r0, #0
 8004976:	f7fb ff69 	bl	800084c <__aeabi_ddiv>
 800497a:	4652      	mov	r2, sl
 800497c:	465b      	mov	r3, fp
 800497e:	f7fb fc83 	bl	8000288 <__aeabi_dsub>
 8004982:	9d01      	ldr	r5, [sp, #4]
 8004984:	4682      	mov	sl, r0
 8004986:	468b      	mov	fp, r1
 8004988:	4649      	mov	r1, r9
 800498a:	4640      	mov	r0, r8
 800498c:	f7fc f8e4 	bl	8000b58 <__aeabi_d2iz>
 8004990:	4606      	mov	r6, r0
 8004992:	f7fb fdc7 	bl	8000524 <__aeabi_i2d>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4640      	mov	r0, r8
 800499c:	4649      	mov	r1, r9
 800499e:	f7fb fc73 	bl	8000288 <__aeabi_dsub>
 80049a2:	3630      	adds	r6, #48	; 0x30
 80049a4:	f805 6b01 	strb.w	r6, [r5], #1
 80049a8:	4652      	mov	r2, sl
 80049aa:	465b      	mov	r3, fp
 80049ac:	4680      	mov	r8, r0
 80049ae:	4689      	mov	r9, r1
 80049b0:	f7fc f894 	bl	8000adc <__aeabi_dcmplt>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d163      	bne.n	8004a80 <_dtoa_r+0x608>
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	4936      	ldr	r1, [pc, #216]	; (8004a98 <_dtoa_r+0x620>)
 80049be:	2000      	movs	r0, #0
 80049c0:	f7fb fc62 	bl	8000288 <__aeabi_dsub>
 80049c4:	4652      	mov	r2, sl
 80049c6:	465b      	mov	r3, fp
 80049c8:	f7fc f888 	bl	8000adc <__aeabi_dcmplt>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	f040 80b5 	bne.w	8004b3c <_dtoa_r+0x6c4>
 80049d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049d4:	429d      	cmp	r5, r3
 80049d6:	d081      	beq.n	80048dc <_dtoa_r+0x464>
 80049d8:	4b30      	ldr	r3, [pc, #192]	; (8004a9c <_dtoa_r+0x624>)
 80049da:	2200      	movs	r2, #0
 80049dc:	4650      	mov	r0, sl
 80049de:	4659      	mov	r1, fp
 80049e0:	f7fb fe0a 	bl	80005f8 <__aeabi_dmul>
 80049e4:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <_dtoa_r+0x624>)
 80049e6:	4682      	mov	sl, r0
 80049e8:	468b      	mov	fp, r1
 80049ea:	4640      	mov	r0, r8
 80049ec:	4649      	mov	r1, r9
 80049ee:	2200      	movs	r2, #0
 80049f0:	f7fb fe02 	bl	80005f8 <__aeabi_dmul>
 80049f4:	4680      	mov	r8, r0
 80049f6:	4689      	mov	r9, r1
 80049f8:	e7c6      	b.n	8004988 <_dtoa_r+0x510>
 80049fa:	4650      	mov	r0, sl
 80049fc:	4659      	mov	r1, fp
 80049fe:	f7fb fdfb 	bl	80005f8 <__aeabi_dmul>
 8004a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a04:	9d01      	ldr	r5, [sp, #4]
 8004a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a08:	4682      	mov	sl, r0
 8004a0a:	468b      	mov	fp, r1
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	4640      	mov	r0, r8
 8004a10:	f7fc f8a2 	bl	8000b58 <__aeabi_d2iz>
 8004a14:	4606      	mov	r6, r0
 8004a16:	f7fb fd85 	bl	8000524 <__aeabi_i2d>
 8004a1a:	3630      	adds	r6, #48	; 0x30
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4640      	mov	r0, r8
 8004a22:	4649      	mov	r1, r9
 8004a24:	f7fb fc30 	bl	8000288 <__aeabi_dsub>
 8004a28:	f805 6b01 	strb.w	r6, [r5], #1
 8004a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a2e:	429d      	cmp	r5, r3
 8004a30:	4680      	mov	r8, r0
 8004a32:	4689      	mov	r9, r1
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	d124      	bne.n	8004a84 <_dtoa_r+0x60c>
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <_dtoa_r+0x630>)
 8004a3c:	4650      	mov	r0, sl
 8004a3e:	4659      	mov	r1, fp
 8004a40:	f7fb fc24 	bl	800028c <__adddf3>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4640      	mov	r0, r8
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	f7fc f864 	bl	8000b18 <__aeabi_dcmpgt>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d173      	bne.n	8004b3c <_dtoa_r+0x6c4>
 8004a54:	4652      	mov	r2, sl
 8004a56:	465b      	mov	r3, fp
 8004a58:	4913      	ldr	r1, [pc, #76]	; (8004aa8 <_dtoa_r+0x630>)
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f7fb fc14 	bl	8000288 <__aeabi_dsub>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4640      	mov	r0, r8
 8004a66:	4649      	mov	r1, r9
 8004a68:	f7fc f838 	bl	8000adc <__aeabi_dcmplt>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	f43f af35 	beq.w	80048dc <_dtoa_r+0x464>
 8004a72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004a74:	1e6b      	subs	r3, r5, #1
 8004a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a7c:	2b30      	cmp	r3, #48	; 0x30
 8004a7e:	d0f8      	beq.n	8004a72 <_dtoa_r+0x5fa>
 8004a80:	9700      	str	r7, [sp, #0]
 8004a82:	e049      	b.n	8004b18 <_dtoa_r+0x6a0>
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <_dtoa_r+0x624>)
 8004a86:	f7fb fdb7 	bl	80005f8 <__aeabi_dmul>
 8004a8a:	4680      	mov	r8, r0
 8004a8c:	4689      	mov	r9, r1
 8004a8e:	e7bd      	b.n	8004a0c <_dtoa_r+0x594>
 8004a90:	08006278 	.word	0x08006278
 8004a94:	08006250 	.word	0x08006250
 8004a98:	3ff00000 	.word	0x3ff00000
 8004a9c:	40240000 	.word	0x40240000
 8004aa0:	401c0000 	.word	0x401c0000
 8004aa4:	40140000 	.word	0x40140000
 8004aa8:	3fe00000 	.word	0x3fe00000
 8004aac:	9d01      	ldr	r5, [sp, #4]
 8004aae:	4656      	mov	r6, sl
 8004ab0:	465f      	mov	r7, fp
 8004ab2:	4642      	mov	r2, r8
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	4639      	mov	r1, r7
 8004aba:	f7fb fec7 	bl	800084c <__aeabi_ddiv>
 8004abe:	f7fc f84b 	bl	8000b58 <__aeabi_d2iz>
 8004ac2:	4682      	mov	sl, r0
 8004ac4:	f7fb fd2e 	bl	8000524 <__aeabi_i2d>
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	f7fb fd94 	bl	80005f8 <__aeabi_dmul>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004adc:	f7fb fbd4 	bl	8000288 <__aeabi_dsub>
 8004ae0:	f805 6b01 	strb.w	r6, [r5], #1
 8004ae4:	9e01      	ldr	r6, [sp, #4]
 8004ae6:	9f03      	ldr	r7, [sp, #12]
 8004ae8:	1bae      	subs	r6, r5, r6
 8004aea:	42b7      	cmp	r7, r6
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	d135      	bne.n	8004b5e <_dtoa_r+0x6e6>
 8004af2:	f7fb fbcb 	bl	800028c <__adddf3>
 8004af6:	4642      	mov	r2, r8
 8004af8:	464b      	mov	r3, r9
 8004afa:	4606      	mov	r6, r0
 8004afc:	460f      	mov	r7, r1
 8004afe:	f7fc f80b 	bl	8000b18 <__aeabi_dcmpgt>
 8004b02:	b9d0      	cbnz	r0, 8004b3a <_dtoa_r+0x6c2>
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	4630      	mov	r0, r6
 8004b0a:	4639      	mov	r1, r7
 8004b0c:	f7fb ffdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b10:	b110      	cbz	r0, 8004b18 <_dtoa_r+0x6a0>
 8004b12:	f01a 0f01 	tst.w	sl, #1
 8004b16:	d110      	bne.n	8004b3a <_dtoa_r+0x6c2>
 8004b18:	4620      	mov	r0, r4
 8004b1a:	ee18 1a10 	vmov	r1, s16
 8004b1e:	f000 fd13 	bl	8005548 <_Bfree>
 8004b22:	2300      	movs	r3, #0
 8004b24:	9800      	ldr	r0, [sp, #0]
 8004b26:	702b      	strb	r3, [r5, #0]
 8004b28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	6018      	str	r0, [r3, #0]
 8004b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f43f acf1 	beq.w	8004518 <_dtoa_r+0xa0>
 8004b36:	601d      	str	r5, [r3, #0]
 8004b38:	e4ee      	b.n	8004518 <_dtoa_r+0xa0>
 8004b3a:	9f00      	ldr	r7, [sp, #0]
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	461d      	mov	r5, r3
 8004b40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b44:	2a39      	cmp	r2, #57	; 0x39
 8004b46:	d106      	bne.n	8004b56 <_dtoa_r+0x6de>
 8004b48:	9a01      	ldr	r2, [sp, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d1f7      	bne.n	8004b3e <_dtoa_r+0x6c6>
 8004b4e:	9901      	ldr	r1, [sp, #4]
 8004b50:	2230      	movs	r2, #48	; 0x30
 8004b52:	3701      	adds	r7, #1
 8004b54:	700a      	strb	r2, [r1, #0]
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	3201      	adds	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	e790      	b.n	8004a80 <_dtoa_r+0x608>
 8004b5e:	4ba6      	ldr	r3, [pc, #664]	; (8004df8 <_dtoa_r+0x980>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	f7fb fd49 	bl	80005f8 <__aeabi_dmul>
 8004b66:	2200      	movs	r2, #0
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	460f      	mov	r7, r1
 8004b6e:	f7fb ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d09d      	beq.n	8004ab2 <_dtoa_r+0x63a>
 8004b76:	e7cf      	b.n	8004b18 <_dtoa_r+0x6a0>
 8004b78:	9a08      	ldr	r2, [sp, #32]
 8004b7a:	2a00      	cmp	r2, #0
 8004b7c:	f000 80d7 	beq.w	8004d2e <_dtoa_r+0x8b6>
 8004b80:	9a06      	ldr	r2, [sp, #24]
 8004b82:	2a01      	cmp	r2, #1
 8004b84:	f300 80ba 	bgt.w	8004cfc <_dtoa_r+0x884>
 8004b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b8a:	2a00      	cmp	r2, #0
 8004b8c:	f000 80b2 	beq.w	8004cf4 <_dtoa_r+0x87c>
 8004b90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004b94:	9e07      	ldr	r6, [sp, #28]
 8004b96:	9d04      	ldr	r5, [sp, #16]
 8004b98:	9a04      	ldr	r2, [sp, #16]
 8004b9a:	441a      	add	r2, r3
 8004b9c:	9204      	str	r2, [sp, #16]
 8004b9e:	9a05      	ldr	r2, [sp, #20]
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	441a      	add	r2, r3
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	9205      	str	r2, [sp, #20]
 8004ba8:	f000 fd86 	bl	80056b8 <__i2b>
 8004bac:	4607      	mov	r7, r0
 8004bae:	2d00      	cmp	r5, #0
 8004bb0:	dd0c      	ble.n	8004bcc <_dtoa_r+0x754>
 8004bb2:	9b05      	ldr	r3, [sp, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	dd09      	ble.n	8004bcc <_dtoa_r+0x754>
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	9a04      	ldr	r2, [sp, #16]
 8004bbc:	bfa8      	it	ge
 8004bbe:	462b      	movge	r3, r5
 8004bc0:	1ad2      	subs	r2, r2, r3
 8004bc2:	9204      	str	r2, [sp, #16]
 8004bc4:	9a05      	ldr	r2, [sp, #20]
 8004bc6:	1aed      	subs	r5, r5, r3
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	9305      	str	r3, [sp, #20]
 8004bcc:	9b07      	ldr	r3, [sp, #28]
 8004bce:	b31b      	cbz	r3, 8004c18 <_dtoa_r+0x7a0>
 8004bd0:	9b08      	ldr	r3, [sp, #32]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80af 	beq.w	8004d36 <_dtoa_r+0x8be>
 8004bd8:	2e00      	cmp	r6, #0
 8004bda:	dd13      	ble.n	8004c04 <_dtoa_r+0x78c>
 8004bdc:	4639      	mov	r1, r7
 8004bde:	4632      	mov	r2, r6
 8004be0:	4620      	mov	r0, r4
 8004be2:	f000 fe29 	bl	8005838 <__pow5mult>
 8004be6:	ee18 2a10 	vmov	r2, s16
 8004bea:	4601      	mov	r1, r0
 8004bec:	4607      	mov	r7, r0
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 fd78 	bl	80056e4 <__multiply>
 8004bf4:	ee18 1a10 	vmov	r1, s16
 8004bf8:	4680      	mov	r8, r0
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 fca4 	bl	8005548 <_Bfree>
 8004c00:	ee08 8a10 	vmov	s16, r8
 8004c04:	9b07      	ldr	r3, [sp, #28]
 8004c06:	1b9a      	subs	r2, r3, r6
 8004c08:	d006      	beq.n	8004c18 <_dtoa_r+0x7a0>
 8004c0a:	ee18 1a10 	vmov	r1, s16
 8004c0e:	4620      	mov	r0, r4
 8004c10:	f000 fe12 	bl	8005838 <__pow5mult>
 8004c14:	ee08 0a10 	vmov	s16, r0
 8004c18:	2101      	movs	r1, #1
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f000 fd4c 	bl	80056b8 <__i2b>
 8004c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	4606      	mov	r6, r0
 8004c26:	f340 8088 	ble.w	8004d3a <_dtoa_r+0x8c2>
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	4601      	mov	r1, r0
 8004c2e:	4620      	mov	r0, r4
 8004c30:	f000 fe02 	bl	8005838 <__pow5mult>
 8004c34:	9b06      	ldr	r3, [sp, #24]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	4606      	mov	r6, r0
 8004c3a:	f340 8081 	ble.w	8004d40 <_dtoa_r+0x8c8>
 8004c3e:	f04f 0800 	mov.w	r8, #0
 8004c42:	6933      	ldr	r3, [r6, #16]
 8004c44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004c48:	6918      	ldr	r0, [r3, #16]
 8004c4a:	f000 fce5 	bl	8005618 <__hi0bits>
 8004c4e:	f1c0 0020 	rsb	r0, r0, #32
 8004c52:	9b05      	ldr	r3, [sp, #20]
 8004c54:	4418      	add	r0, r3
 8004c56:	f010 001f 	ands.w	r0, r0, #31
 8004c5a:	f000 8092 	beq.w	8004d82 <_dtoa_r+0x90a>
 8004c5e:	f1c0 0320 	rsb	r3, r0, #32
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	f340 808a 	ble.w	8004d7c <_dtoa_r+0x904>
 8004c68:	f1c0 001c 	rsb	r0, r0, #28
 8004c6c:	9b04      	ldr	r3, [sp, #16]
 8004c6e:	4403      	add	r3, r0
 8004c70:	9304      	str	r3, [sp, #16]
 8004c72:	9b05      	ldr	r3, [sp, #20]
 8004c74:	4403      	add	r3, r0
 8004c76:	4405      	add	r5, r0
 8004c78:	9305      	str	r3, [sp, #20]
 8004c7a:	9b04      	ldr	r3, [sp, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	dd07      	ble.n	8004c90 <_dtoa_r+0x818>
 8004c80:	ee18 1a10 	vmov	r1, s16
 8004c84:	461a      	mov	r2, r3
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 fe30 	bl	80058ec <__lshift>
 8004c8c:	ee08 0a10 	vmov	s16, r0
 8004c90:	9b05      	ldr	r3, [sp, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	dd05      	ble.n	8004ca2 <_dtoa_r+0x82a>
 8004c96:	4631      	mov	r1, r6
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f000 fe26 	bl	80058ec <__lshift>
 8004ca0:	4606      	mov	r6, r0
 8004ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d06e      	beq.n	8004d86 <_dtoa_r+0x90e>
 8004ca8:	ee18 0a10 	vmov	r0, s16
 8004cac:	4631      	mov	r1, r6
 8004cae:	f000 fe8d 	bl	80059cc <__mcmp>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	da67      	bge.n	8004d86 <_dtoa_r+0x90e>
 8004cb6:	9b00      	ldr	r3, [sp, #0]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	ee18 1a10 	vmov	r1, s16
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	220a      	movs	r2, #10
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f000 fc61 	bl	800558c <__multadd>
 8004cca:	9b08      	ldr	r3, [sp, #32]
 8004ccc:	ee08 0a10 	vmov	s16, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 81b1 	beq.w	8005038 <_dtoa_r+0xbc0>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	4639      	mov	r1, r7
 8004cda:	220a      	movs	r2, #10
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f000 fc55 	bl	800558c <__multadd>
 8004ce2:	9b02      	ldr	r3, [sp, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	4607      	mov	r7, r0
 8004ce8:	f300 808e 	bgt.w	8004e08 <_dtoa_r+0x990>
 8004cec:	9b06      	ldr	r3, [sp, #24]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	dc51      	bgt.n	8004d96 <_dtoa_r+0x91e>
 8004cf2:	e089      	b.n	8004e08 <_dtoa_r+0x990>
 8004cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004cfa:	e74b      	b.n	8004b94 <_dtoa_r+0x71c>
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	1e5e      	subs	r6, r3, #1
 8004d00:	9b07      	ldr	r3, [sp, #28]
 8004d02:	42b3      	cmp	r3, r6
 8004d04:	bfbf      	itttt	lt
 8004d06:	9b07      	ldrlt	r3, [sp, #28]
 8004d08:	9607      	strlt	r6, [sp, #28]
 8004d0a:	1af2      	sublt	r2, r6, r3
 8004d0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004d0e:	bfb6      	itet	lt
 8004d10:	189b      	addlt	r3, r3, r2
 8004d12:	1b9e      	subge	r6, r3, r6
 8004d14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004d16:	9b03      	ldr	r3, [sp, #12]
 8004d18:	bfb8      	it	lt
 8004d1a:	2600      	movlt	r6, #0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bfb7      	itett	lt
 8004d20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004d24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004d28:	1a9d      	sublt	r5, r3, r2
 8004d2a:	2300      	movlt	r3, #0
 8004d2c:	e734      	b.n	8004b98 <_dtoa_r+0x720>
 8004d2e:	9e07      	ldr	r6, [sp, #28]
 8004d30:	9d04      	ldr	r5, [sp, #16]
 8004d32:	9f08      	ldr	r7, [sp, #32]
 8004d34:	e73b      	b.n	8004bae <_dtoa_r+0x736>
 8004d36:	9a07      	ldr	r2, [sp, #28]
 8004d38:	e767      	b.n	8004c0a <_dtoa_r+0x792>
 8004d3a:	9b06      	ldr	r3, [sp, #24]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	dc18      	bgt.n	8004d72 <_dtoa_r+0x8fa>
 8004d40:	f1ba 0f00 	cmp.w	sl, #0
 8004d44:	d115      	bne.n	8004d72 <_dtoa_r+0x8fa>
 8004d46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d4a:	b993      	cbnz	r3, 8004d72 <_dtoa_r+0x8fa>
 8004d4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d50:	0d1b      	lsrs	r3, r3, #20
 8004d52:	051b      	lsls	r3, r3, #20
 8004d54:	b183      	cbz	r3, 8004d78 <_dtoa_r+0x900>
 8004d56:	9b04      	ldr	r3, [sp, #16]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	9304      	str	r3, [sp, #16]
 8004d5c:	9b05      	ldr	r3, [sp, #20]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	9305      	str	r3, [sp, #20]
 8004d62:	f04f 0801 	mov.w	r8, #1
 8004d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f47f af6a 	bne.w	8004c42 <_dtoa_r+0x7ca>
 8004d6e:	2001      	movs	r0, #1
 8004d70:	e76f      	b.n	8004c52 <_dtoa_r+0x7da>
 8004d72:	f04f 0800 	mov.w	r8, #0
 8004d76:	e7f6      	b.n	8004d66 <_dtoa_r+0x8ee>
 8004d78:	4698      	mov	r8, r3
 8004d7a:	e7f4      	b.n	8004d66 <_dtoa_r+0x8ee>
 8004d7c:	f43f af7d 	beq.w	8004c7a <_dtoa_r+0x802>
 8004d80:	4618      	mov	r0, r3
 8004d82:	301c      	adds	r0, #28
 8004d84:	e772      	b.n	8004c6c <_dtoa_r+0x7f4>
 8004d86:	9b03      	ldr	r3, [sp, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	dc37      	bgt.n	8004dfc <_dtoa_r+0x984>
 8004d8c:	9b06      	ldr	r3, [sp, #24]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	dd34      	ble.n	8004dfc <_dtoa_r+0x984>
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	9302      	str	r3, [sp, #8]
 8004d96:	9b02      	ldr	r3, [sp, #8]
 8004d98:	b96b      	cbnz	r3, 8004db6 <_dtoa_r+0x93e>
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	2205      	movs	r2, #5
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f000 fbf4 	bl	800558c <__multadd>
 8004da4:	4601      	mov	r1, r0
 8004da6:	4606      	mov	r6, r0
 8004da8:	ee18 0a10 	vmov	r0, s16
 8004dac:	f000 fe0e 	bl	80059cc <__mcmp>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f73f adbb 	bgt.w	800492c <_dtoa_r+0x4b4>
 8004db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db8:	9d01      	ldr	r5, [sp, #4]
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	f04f 0800 	mov.w	r8, #0
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f000 fbbf 	bl	8005548 <_Bfree>
 8004dca:	2f00      	cmp	r7, #0
 8004dcc:	f43f aea4 	beq.w	8004b18 <_dtoa_r+0x6a0>
 8004dd0:	f1b8 0f00 	cmp.w	r8, #0
 8004dd4:	d005      	beq.n	8004de2 <_dtoa_r+0x96a>
 8004dd6:	45b8      	cmp	r8, r7
 8004dd8:	d003      	beq.n	8004de2 <_dtoa_r+0x96a>
 8004dda:	4641      	mov	r1, r8
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f000 fbb3 	bl	8005548 <_Bfree>
 8004de2:	4639      	mov	r1, r7
 8004de4:	4620      	mov	r0, r4
 8004de6:	f000 fbaf 	bl	8005548 <_Bfree>
 8004dea:	e695      	b.n	8004b18 <_dtoa_r+0x6a0>
 8004dec:	2600      	movs	r6, #0
 8004dee:	4637      	mov	r7, r6
 8004df0:	e7e1      	b.n	8004db6 <_dtoa_r+0x93e>
 8004df2:	9700      	str	r7, [sp, #0]
 8004df4:	4637      	mov	r7, r6
 8004df6:	e599      	b.n	800492c <_dtoa_r+0x4b4>
 8004df8:	40240000 	.word	0x40240000
 8004dfc:	9b08      	ldr	r3, [sp, #32]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80ca 	beq.w	8004f98 <_dtoa_r+0xb20>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	9302      	str	r3, [sp, #8]
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	dd05      	ble.n	8004e18 <_dtoa_r+0x9a0>
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	462a      	mov	r2, r5
 8004e10:	4620      	mov	r0, r4
 8004e12:	f000 fd6b 	bl	80058ec <__lshift>
 8004e16:	4607      	mov	r7, r0
 8004e18:	f1b8 0f00 	cmp.w	r8, #0
 8004e1c:	d05b      	beq.n	8004ed6 <_dtoa_r+0xa5e>
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fb51 	bl	80054c8 <_Balloc>
 8004e26:	4605      	mov	r5, r0
 8004e28:	b928      	cbnz	r0, 8004e36 <_dtoa_r+0x9be>
 8004e2a:	4b87      	ldr	r3, [pc, #540]	; (8005048 <_dtoa_r+0xbd0>)
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004e32:	f7ff bb3b 	b.w	80044ac <_dtoa_r+0x34>
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	3202      	adds	r2, #2
 8004e3a:	0092      	lsls	r2, r2, #2
 8004e3c:	f107 010c 	add.w	r1, r7, #12
 8004e40:	300c      	adds	r0, #12
 8004e42:	f000 fb33 	bl	80054ac <memcpy>
 8004e46:	2201      	movs	r2, #1
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f000 fd4e 	bl	80058ec <__lshift>
 8004e50:	9b01      	ldr	r3, [sp, #4]
 8004e52:	f103 0901 	add.w	r9, r3, #1
 8004e56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	9305      	str	r3, [sp, #20]
 8004e5e:	f00a 0301 	and.w	r3, sl, #1
 8004e62:	46b8      	mov	r8, r7
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	4607      	mov	r7, r0
 8004e68:	4631      	mov	r1, r6
 8004e6a:	ee18 0a10 	vmov	r0, s16
 8004e6e:	f7ff fa78 	bl	8004362 <quorem>
 8004e72:	4641      	mov	r1, r8
 8004e74:	9002      	str	r0, [sp, #8]
 8004e76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004e7a:	ee18 0a10 	vmov	r0, s16
 8004e7e:	f000 fda5 	bl	80059cc <__mcmp>
 8004e82:	463a      	mov	r2, r7
 8004e84:	9003      	str	r0, [sp, #12]
 8004e86:	4631      	mov	r1, r6
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f000 fdbb 	bl	8005a04 <__mdiff>
 8004e8e:	68c2      	ldr	r2, [r0, #12]
 8004e90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8004e94:	4605      	mov	r5, r0
 8004e96:	bb02      	cbnz	r2, 8004eda <_dtoa_r+0xa62>
 8004e98:	4601      	mov	r1, r0
 8004e9a:	ee18 0a10 	vmov	r0, s16
 8004e9e:	f000 fd95 	bl	80059cc <__mcmp>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	9207      	str	r2, [sp, #28]
 8004eaa:	f000 fb4d 	bl	8005548 <_Bfree>
 8004eae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004eb2:	ea43 0102 	orr.w	r1, r3, r2
 8004eb6:	9b04      	ldr	r3, [sp, #16]
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	464d      	mov	r5, r9
 8004ebc:	d10f      	bne.n	8004ede <_dtoa_r+0xa66>
 8004ebe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004ec2:	d02a      	beq.n	8004f1a <_dtoa_r+0xaa2>
 8004ec4:	9b03      	ldr	r3, [sp, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	dd02      	ble.n	8004ed0 <_dtoa_r+0xa58>
 8004eca:	9b02      	ldr	r3, [sp, #8]
 8004ecc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004ed0:	f88b a000 	strb.w	sl, [fp]
 8004ed4:	e775      	b.n	8004dc2 <_dtoa_r+0x94a>
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	e7ba      	b.n	8004e50 <_dtoa_r+0x9d8>
 8004eda:	2201      	movs	r2, #1
 8004edc:	e7e2      	b.n	8004ea4 <_dtoa_r+0xa2c>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	db04      	blt.n	8004eee <_dtoa_r+0xa76>
 8004ee4:	9906      	ldr	r1, [sp, #24]
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	9904      	ldr	r1, [sp, #16]
 8004eea:	430b      	orrs	r3, r1
 8004eec:	d122      	bne.n	8004f34 <_dtoa_r+0xabc>
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	ddee      	ble.n	8004ed0 <_dtoa_r+0xa58>
 8004ef2:	ee18 1a10 	vmov	r1, s16
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f000 fcf7 	bl	80058ec <__lshift>
 8004efe:	4631      	mov	r1, r6
 8004f00:	ee08 0a10 	vmov	s16, r0
 8004f04:	f000 fd62 	bl	80059cc <__mcmp>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	dc03      	bgt.n	8004f14 <_dtoa_r+0xa9c>
 8004f0c:	d1e0      	bne.n	8004ed0 <_dtoa_r+0xa58>
 8004f0e:	f01a 0f01 	tst.w	sl, #1
 8004f12:	d0dd      	beq.n	8004ed0 <_dtoa_r+0xa58>
 8004f14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f18:	d1d7      	bne.n	8004eca <_dtoa_r+0xa52>
 8004f1a:	2339      	movs	r3, #57	; 0x39
 8004f1c:	f88b 3000 	strb.w	r3, [fp]
 8004f20:	462b      	mov	r3, r5
 8004f22:	461d      	mov	r5, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004f2a:	2a39      	cmp	r2, #57	; 0x39
 8004f2c:	d071      	beq.n	8005012 <_dtoa_r+0xb9a>
 8004f2e:	3201      	adds	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
 8004f32:	e746      	b.n	8004dc2 <_dtoa_r+0x94a>
 8004f34:	2a00      	cmp	r2, #0
 8004f36:	dd07      	ble.n	8004f48 <_dtoa_r+0xad0>
 8004f38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004f3c:	d0ed      	beq.n	8004f1a <_dtoa_r+0xaa2>
 8004f3e:	f10a 0301 	add.w	r3, sl, #1
 8004f42:	f88b 3000 	strb.w	r3, [fp]
 8004f46:	e73c      	b.n	8004dc2 <_dtoa_r+0x94a>
 8004f48:	9b05      	ldr	r3, [sp, #20]
 8004f4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004f4e:	4599      	cmp	r9, r3
 8004f50:	d047      	beq.n	8004fe2 <_dtoa_r+0xb6a>
 8004f52:	ee18 1a10 	vmov	r1, s16
 8004f56:	2300      	movs	r3, #0
 8004f58:	220a      	movs	r2, #10
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f000 fb16 	bl	800558c <__multadd>
 8004f60:	45b8      	cmp	r8, r7
 8004f62:	ee08 0a10 	vmov	s16, r0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	f04f 020a 	mov.w	r2, #10
 8004f6e:	4641      	mov	r1, r8
 8004f70:	4620      	mov	r0, r4
 8004f72:	d106      	bne.n	8004f82 <_dtoa_r+0xb0a>
 8004f74:	f000 fb0a 	bl	800558c <__multadd>
 8004f78:	4680      	mov	r8, r0
 8004f7a:	4607      	mov	r7, r0
 8004f7c:	f109 0901 	add.w	r9, r9, #1
 8004f80:	e772      	b.n	8004e68 <_dtoa_r+0x9f0>
 8004f82:	f000 fb03 	bl	800558c <__multadd>
 8004f86:	4639      	mov	r1, r7
 8004f88:	4680      	mov	r8, r0
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	220a      	movs	r2, #10
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 fafc 	bl	800558c <__multadd>
 8004f94:	4607      	mov	r7, r0
 8004f96:	e7f1      	b.n	8004f7c <_dtoa_r+0xb04>
 8004f98:	9b03      	ldr	r3, [sp, #12]
 8004f9a:	9302      	str	r3, [sp, #8]
 8004f9c:	9d01      	ldr	r5, [sp, #4]
 8004f9e:	ee18 0a10 	vmov	r0, s16
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	f7ff f9dd 	bl	8004362 <quorem>
 8004fa8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004fac:	9b01      	ldr	r3, [sp, #4]
 8004fae:	f805 ab01 	strb.w	sl, [r5], #1
 8004fb2:	1aea      	subs	r2, r5, r3
 8004fb4:	9b02      	ldr	r3, [sp, #8]
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	dd09      	ble.n	8004fce <_dtoa_r+0xb56>
 8004fba:	ee18 1a10 	vmov	r1, s16
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	220a      	movs	r2, #10
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 fae2 	bl	800558c <__multadd>
 8004fc8:	ee08 0a10 	vmov	s16, r0
 8004fcc:	e7e7      	b.n	8004f9e <_dtoa_r+0xb26>
 8004fce:	9b02      	ldr	r3, [sp, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bfc8      	it	gt
 8004fd4:	461d      	movgt	r5, r3
 8004fd6:	9b01      	ldr	r3, [sp, #4]
 8004fd8:	bfd8      	it	le
 8004fda:	2501      	movle	r5, #1
 8004fdc:	441d      	add	r5, r3
 8004fde:	f04f 0800 	mov.w	r8, #0
 8004fe2:	ee18 1a10 	vmov	r1, s16
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 fc7f 	bl	80058ec <__lshift>
 8004fee:	4631      	mov	r1, r6
 8004ff0:	ee08 0a10 	vmov	s16, r0
 8004ff4:	f000 fcea 	bl	80059cc <__mcmp>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	dc91      	bgt.n	8004f20 <_dtoa_r+0xaa8>
 8004ffc:	d102      	bne.n	8005004 <_dtoa_r+0xb8c>
 8004ffe:	f01a 0f01 	tst.w	sl, #1
 8005002:	d18d      	bne.n	8004f20 <_dtoa_r+0xaa8>
 8005004:	462b      	mov	r3, r5
 8005006:	461d      	mov	r5, r3
 8005008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800500c:	2a30      	cmp	r2, #48	; 0x30
 800500e:	d0fa      	beq.n	8005006 <_dtoa_r+0xb8e>
 8005010:	e6d7      	b.n	8004dc2 <_dtoa_r+0x94a>
 8005012:	9a01      	ldr	r2, [sp, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d184      	bne.n	8004f22 <_dtoa_r+0xaaa>
 8005018:	9b00      	ldr	r3, [sp, #0]
 800501a:	3301      	adds	r3, #1
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	2331      	movs	r3, #49	; 0x31
 8005020:	7013      	strb	r3, [r2, #0]
 8005022:	e6ce      	b.n	8004dc2 <_dtoa_r+0x94a>
 8005024:	4b09      	ldr	r3, [pc, #36]	; (800504c <_dtoa_r+0xbd4>)
 8005026:	f7ff ba95 	b.w	8004554 <_dtoa_r+0xdc>
 800502a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800502c:	2b00      	cmp	r3, #0
 800502e:	f47f aa6e 	bne.w	800450e <_dtoa_r+0x96>
 8005032:	4b07      	ldr	r3, [pc, #28]	; (8005050 <_dtoa_r+0xbd8>)
 8005034:	f7ff ba8e 	b.w	8004554 <_dtoa_r+0xdc>
 8005038:	9b02      	ldr	r3, [sp, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	dcae      	bgt.n	8004f9c <_dtoa_r+0xb24>
 800503e:	9b06      	ldr	r3, [sp, #24]
 8005040:	2b02      	cmp	r3, #2
 8005042:	f73f aea8 	bgt.w	8004d96 <_dtoa_r+0x91e>
 8005046:	e7a9      	b.n	8004f9c <_dtoa_r+0xb24>
 8005048:	0800617c 	.word	0x0800617c
 800504c:	080060d9 	.word	0x080060d9
 8005050:	080060fd 	.word	0x080060fd

08005054 <__sflush_r>:
 8005054:	898a      	ldrh	r2, [r1, #12]
 8005056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800505a:	4605      	mov	r5, r0
 800505c:	0710      	lsls	r0, r2, #28
 800505e:	460c      	mov	r4, r1
 8005060:	d458      	bmi.n	8005114 <__sflush_r+0xc0>
 8005062:	684b      	ldr	r3, [r1, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	dc05      	bgt.n	8005074 <__sflush_r+0x20>
 8005068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	dc02      	bgt.n	8005074 <__sflush_r+0x20>
 800506e:	2000      	movs	r0, #0
 8005070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005076:	2e00      	cmp	r6, #0
 8005078:	d0f9      	beq.n	800506e <__sflush_r+0x1a>
 800507a:	2300      	movs	r3, #0
 800507c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005080:	682f      	ldr	r7, [r5, #0]
 8005082:	602b      	str	r3, [r5, #0]
 8005084:	d032      	beq.n	80050ec <__sflush_r+0x98>
 8005086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	075a      	lsls	r2, r3, #29
 800508c:	d505      	bpl.n	800509a <__sflush_r+0x46>
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	1ac0      	subs	r0, r0, r3
 8005092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005094:	b10b      	cbz	r3, 800509a <__sflush_r+0x46>
 8005096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005098:	1ac0      	subs	r0, r0, r3
 800509a:	2300      	movs	r3, #0
 800509c:	4602      	mov	r2, r0
 800509e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050a0:	6a21      	ldr	r1, [r4, #32]
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b0      	blx	r6
 80050a6:	1c43      	adds	r3, r0, #1
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	d106      	bne.n	80050ba <__sflush_r+0x66>
 80050ac:	6829      	ldr	r1, [r5, #0]
 80050ae:	291d      	cmp	r1, #29
 80050b0:	d82c      	bhi.n	800510c <__sflush_r+0xb8>
 80050b2:	4a2a      	ldr	r2, [pc, #168]	; (800515c <__sflush_r+0x108>)
 80050b4:	40ca      	lsrs	r2, r1
 80050b6:	07d6      	lsls	r6, r2, #31
 80050b8:	d528      	bpl.n	800510c <__sflush_r+0xb8>
 80050ba:	2200      	movs	r2, #0
 80050bc:	6062      	str	r2, [r4, #4]
 80050be:	04d9      	lsls	r1, r3, #19
 80050c0:	6922      	ldr	r2, [r4, #16]
 80050c2:	6022      	str	r2, [r4, #0]
 80050c4:	d504      	bpl.n	80050d0 <__sflush_r+0x7c>
 80050c6:	1c42      	adds	r2, r0, #1
 80050c8:	d101      	bne.n	80050ce <__sflush_r+0x7a>
 80050ca:	682b      	ldr	r3, [r5, #0]
 80050cc:	b903      	cbnz	r3, 80050d0 <__sflush_r+0x7c>
 80050ce:	6560      	str	r0, [r4, #84]	; 0x54
 80050d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050d2:	602f      	str	r7, [r5, #0]
 80050d4:	2900      	cmp	r1, #0
 80050d6:	d0ca      	beq.n	800506e <__sflush_r+0x1a>
 80050d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050dc:	4299      	cmp	r1, r3
 80050de:	d002      	beq.n	80050e6 <__sflush_r+0x92>
 80050e0:	4628      	mov	r0, r5
 80050e2:	f000 fd8b 	bl	8005bfc <_free_r>
 80050e6:	2000      	movs	r0, #0
 80050e8:	6360      	str	r0, [r4, #52]	; 0x34
 80050ea:	e7c1      	b.n	8005070 <__sflush_r+0x1c>
 80050ec:	6a21      	ldr	r1, [r4, #32]
 80050ee:	2301      	movs	r3, #1
 80050f0:	4628      	mov	r0, r5
 80050f2:	47b0      	blx	r6
 80050f4:	1c41      	adds	r1, r0, #1
 80050f6:	d1c7      	bne.n	8005088 <__sflush_r+0x34>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0c4      	beq.n	8005088 <__sflush_r+0x34>
 80050fe:	2b1d      	cmp	r3, #29
 8005100:	d001      	beq.n	8005106 <__sflush_r+0xb2>
 8005102:	2b16      	cmp	r3, #22
 8005104:	d101      	bne.n	800510a <__sflush_r+0xb6>
 8005106:	602f      	str	r7, [r5, #0]
 8005108:	e7b1      	b.n	800506e <__sflush_r+0x1a>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005110:	81a3      	strh	r3, [r4, #12]
 8005112:	e7ad      	b.n	8005070 <__sflush_r+0x1c>
 8005114:	690f      	ldr	r7, [r1, #16]
 8005116:	2f00      	cmp	r7, #0
 8005118:	d0a9      	beq.n	800506e <__sflush_r+0x1a>
 800511a:	0793      	lsls	r3, r2, #30
 800511c:	680e      	ldr	r6, [r1, #0]
 800511e:	bf08      	it	eq
 8005120:	694b      	ldreq	r3, [r1, #20]
 8005122:	600f      	str	r7, [r1, #0]
 8005124:	bf18      	it	ne
 8005126:	2300      	movne	r3, #0
 8005128:	eba6 0807 	sub.w	r8, r6, r7
 800512c:	608b      	str	r3, [r1, #8]
 800512e:	f1b8 0f00 	cmp.w	r8, #0
 8005132:	dd9c      	ble.n	800506e <__sflush_r+0x1a>
 8005134:	6a21      	ldr	r1, [r4, #32]
 8005136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005138:	4643      	mov	r3, r8
 800513a:	463a      	mov	r2, r7
 800513c:	4628      	mov	r0, r5
 800513e:	47b0      	blx	r6
 8005140:	2800      	cmp	r0, #0
 8005142:	dc06      	bgt.n	8005152 <__sflush_r+0xfe>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005150:	e78e      	b.n	8005070 <__sflush_r+0x1c>
 8005152:	4407      	add	r7, r0
 8005154:	eba8 0800 	sub.w	r8, r8, r0
 8005158:	e7e9      	b.n	800512e <__sflush_r+0xda>
 800515a:	bf00      	nop
 800515c:	20400001 	.word	0x20400001

08005160 <_fflush_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	690b      	ldr	r3, [r1, #16]
 8005164:	4605      	mov	r5, r0
 8005166:	460c      	mov	r4, r1
 8005168:	b913      	cbnz	r3, 8005170 <_fflush_r+0x10>
 800516a:	2500      	movs	r5, #0
 800516c:	4628      	mov	r0, r5
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	b118      	cbz	r0, 800517a <_fflush_r+0x1a>
 8005172:	6983      	ldr	r3, [r0, #24]
 8005174:	b90b      	cbnz	r3, 800517a <_fflush_r+0x1a>
 8005176:	f000 f887 	bl	8005288 <__sinit>
 800517a:	4b14      	ldr	r3, [pc, #80]	; (80051cc <_fflush_r+0x6c>)
 800517c:	429c      	cmp	r4, r3
 800517e:	d11b      	bne.n	80051b8 <_fflush_r+0x58>
 8005180:	686c      	ldr	r4, [r5, #4]
 8005182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ef      	beq.n	800516a <_fflush_r+0xa>
 800518a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800518c:	07d0      	lsls	r0, r2, #31
 800518e:	d404      	bmi.n	800519a <_fflush_r+0x3a>
 8005190:	0599      	lsls	r1, r3, #22
 8005192:	d402      	bmi.n	800519a <_fflush_r+0x3a>
 8005194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005196:	f000 f91a 	bl	80053ce <__retarget_lock_acquire_recursive>
 800519a:	4628      	mov	r0, r5
 800519c:	4621      	mov	r1, r4
 800519e:	f7ff ff59 	bl	8005054 <__sflush_r>
 80051a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a4:	07da      	lsls	r2, r3, #31
 80051a6:	4605      	mov	r5, r0
 80051a8:	d4e0      	bmi.n	800516c <_fflush_r+0xc>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	059b      	lsls	r3, r3, #22
 80051ae:	d4dd      	bmi.n	800516c <_fflush_r+0xc>
 80051b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b2:	f000 f90d 	bl	80053d0 <__retarget_lock_release_recursive>
 80051b6:	e7d9      	b.n	800516c <_fflush_r+0xc>
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <_fflush_r+0x70>)
 80051ba:	429c      	cmp	r4, r3
 80051bc:	d101      	bne.n	80051c2 <_fflush_r+0x62>
 80051be:	68ac      	ldr	r4, [r5, #8]
 80051c0:	e7df      	b.n	8005182 <_fflush_r+0x22>
 80051c2:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <_fflush_r+0x74>)
 80051c4:	429c      	cmp	r4, r3
 80051c6:	bf08      	it	eq
 80051c8:	68ec      	ldreq	r4, [r5, #12]
 80051ca:	e7da      	b.n	8005182 <_fflush_r+0x22>
 80051cc:	080061b0 	.word	0x080061b0
 80051d0:	080061d0 	.word	0x080061d0
 80051d4:	08006190 	.word	0x08006190

080051d8 <std>:
 80051d8:	2300      	movs	r3, #0
 80051da:	b510      	push	{r4, lr}
 80051dc:	4604      	mov	r4, r0
 80051de:	e9c0 3300 	strd	r3, r3, [r0]
 80051e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051e6:	6083      	str	r3, [r0, #8]
 80051e8:	8181      	strh	r1, [r0, #12]
 80051ea:	6643      	str	r3, [r0, #100]	; 0x64
 80051ec:	81c2      	strh	r2, [r0, #14]
 80051ee:	6183      	str	r3, [r0, #24]
 80051f0:	4619      	mov	r1, r3
 80051f2:	2208      	movs	r2, #8
 80051f4:	305c      	adds	r0, #92	; 0x5c
 80051f6:	f7fe fa21 	bl	800363c <memset>
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <std+0x38>)
 80051fc:	6263      	str	r3, [r4, #36]	; 0x24
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <std+0x3c>)
 8005200:	62a3      	str	r3, [r4, #40]	; 0x28
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <std+0x40>)
 8005204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <std+0x44>)
 8005208:	6224      	str	r4, [r4, #32]
 800520a:	6323      	str	r3, [r4, #48]	; 0x30
 800520c:	bd10      	pop	{r4, pc}
 800520e:	bf00      	nop
 8005210:	08005e65 	.word	0x08005e65
 8005214:	08005e87 	.word	0x08005e87
 8005218:	08005ebf 	.word	0x08005ebf
 800521c:	08005ee3 	.word	0x08005ee3

08005220 <_cleanup_r>:
 8005220:	4901      	ldr	r1, [pc, #4]	; (8005228 <_cleanup_r+0x8>)
 8005222:	f000 b8af 	b.w	8005384 <_fwalk_reent>
 8005226:	bf00      	nop
 8005228:	08005161 	.word	0x08005161

0800522c <__sfmoreglue>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	2268      	movs	r2, #104	; 0x68
 8005230:	1e4d      	subs	r5, r1, #1
 8005232:	4355      	muls	r5, r2
 8005234:	460e      	mov	r6, r1
 8005236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800523a:	f000 fd4b 	bl	8005cd4 <_malloc_r>
 800523e:	4604      	mov	r4, r0
 8005240:	b140      	cbz	r0, 8005254 <__sfmoreglue+0x28>
 8005242:	2100      	movs	r1, #0
 8005244:	e9c0 1600 	strd	r1, r6, [r0]
 8005248:	300c      	adds	r0, #12
 800524a:	60a0      	str	r0, [r4, #8]
 800524c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005250:	f7fe f9f4 	bl	800363c <memset>
 8005254:	4620      	mov	r0, r4
 8005256:	bd70      	pop	{r4, r5, r6, pc}

08005258 <__sfp_lock_acquire>:
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <__sfp_lock_acquire+0x8>)
 800525a:	f000 b8b8 	b.w	80053ce <__retarget_lock_acquire_recursive>
 800525e:	bf00      	nop
 8005260:	200002dd 	.word	0x200002dd

08005264 <__sfp_lock_release>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__sfp_lock_release+0x8>)
 8005266:	f000 b8b3 	b.w	80053d0 <__retarget_lock_release_recursive>
 800526a:	bf00      	nop
 800526c:	200002dd 	.word	0x200002dd

08005270 <__sinit_lock_acquire>:
 8005270:	4801      	ldr	r0, [pc, #4]	; (8005278 <__sinit_lock_acquire+0x8>)
 8005272:	f000 b8ac 	b.w	80053ce <__retarget_lock_acquire_recursive>
 8005276:	bf00      	nop
 8005278:	200002de 	.word	0x200002de

0800527c <__sinit_lock_release>:
 800527c:	4801      	ldr	r0, [pc, #4]	; (8005284 <__sinit_lock_release+0x8>)
 800527e:	f000 b8a7 	b.w	80053d0 <__retarget_lock_release_recursive>
 8005282:	bf00      	nop
 8005284:	200002de 	.word	0x200002de

08005288 <__sinit>:
 8005288:	b510      	push	{r4, lr}
 800528a:	4604      	mov	r4, r0
 800528c:	f7ff fff0 	bl	8005270 <__sinit_lock_acquire>
 8005290:	69a3      	ldr	r3, [r4, #24]
 8005292:	b11b      	cbz	r3, 800529c <__sinit+0x14>
 8005294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005298:	f7ff bff0 	b.w	800527c <__sinit_lock_release>
 800529c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052a0:	6523      	str	r3, [r4, #80]	; 0x50
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <__sinit+0x68>)
 80052a4:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <__sinit+0x6c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80052aa:	42a3      	cmp	r3, r4
 80052ac:	bf04      	itt	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	61a3      	streq	r3, [r4, #24]
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 f820 	bl	80052f8 <__sfp>
 80052b8:	6060      	str	r0, [r4, #4]
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 f81c 	bl	80052f8 <__sfp>
 80052c0:	60a0      	str	r0, [r4, #8]
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 f818 	bl	80052f8 <__sfp>
 80052c8:	2200      	movs	r2, #0
 80052ca:	60e0      	str	r0, [r4, #12]
 80052cc:	2104      	movs	r1, #4
 80052ce:	6860      	ldr	r0, [r4, #4]
 80052d0:	f7ff ff82 	bl	80051d8 <std>
 80052d4:	68a0      	ldr	r0, [r4, #8]
 80052d6:	2201      	movs	r2, #1
 80052d8:	2109      	movs	r1, #9
 80052da:	f7ff ff7d 	bl	80051d8 <std>
 80052de:	68e0      	ldr	r0, [r4, #12]
 80052e0:	2202      	movs	r2, #2
 80052e2:	2112      	movs	r1, #18
 80052e4:	f7ff ff78 	bl	80051d8 <std>
 80052e8:	2301      	movs	r3, #1
 80052ea:	61a3      	str	r3, [r4, #24]
 80052ec:	e7d2      	b.n	8005294 <__sinit+0xc>
 80052ee:	bf00      	nop
 80052f0:	080060b4 	.word	0x080060b4
 80052f4:	08005221 	.word	0x08005221

080052f8 <__sfp>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	4607      	mov	r7, r0
 80052fc:	f7ff ffac 	bl	8005258 <__sfp_lock_acquire>
 8005300:	4b1e      	ldr	r3, [pc, #120]	; (800537c <__sfp+0x84>)
 8005302:	681e      	ldr	r6, [r3, #0]
 8005304:	69b3      	ldr	r3, [r6, #24]
 8005306:	b913      	cbnz	r3, 800530e <__sfp+0x16>
 8005308:	4630      	mov	r0, r6
 800530a:	f7ff ffbd 	bl	8005288 <__sinit>
 800530e:	3648      	adds	r6, #72	; 0x48
 8005310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005314:	3b01      	subs	r3, #1
 8005316:	d503      	bpl.n	8005320 <__sfp+0x28>
 8005318:	6833      	ldr	r3, [r6, #0]
 800531a:	b30b      	cbz	r3, 8005360 <__sfp+0x68>
 800531c:	6836      	ldr	r6, [r6, #0]
 800531e:	e7f7      	b.n	8005310 <__sfp+0x18>
 8005320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005324:	b9d5      	cbnz	r5, 800535c <__sfp+0x64>
 8005326:	4b16      	ldr	r3, [pc, #88]	; (8005380 <__sfp+0x88>)
 8005328:	60e3      	str	r3, [r4, #12]
 800532a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800532e:	6665      	str	r5, [r4, #100]	; 0x64
 8005330:	f000 f84c 	bl	80053cc <__retarget_lock_init_recursive>
 8005334:	f7ff ff96 	bl	8005264 <__sfp_lock_release>
 8005338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800533c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005340:	6025      	str	r5, [r4, #0]
 8005342:	61a5      	str	r5, [r4, #24]
 8005344:	2208      	movs	r2, #8
 8005346:	4629      	mov	r1, r5
 8005348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800534c:	f7fe f976 	bl	800363c <memset>
 8005350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005358:	4620      	mov	r0, r4
 800535a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800535c:	3468      	adds	r4, #104	; 0x68
 800535e:	e7d9      	b.n	8005314 <__sfp+0x1c>
 8005360:	2104      	movs	r1, #4
 8005362:	4638      	mov	r0, r7
 8005364:	f7ff ff62 	bl	800522c <__sfmoreglue>
 8005368:	4604      	mov	r4, r0
 800536a:	6030      	str	r0, [r6, #0]
 800536c:	2800      	cmp	r0, #0
 800536e:	d1d5      	bne.n	800531c <__sfp+0x24>
 8005370:	f7ff ff78 	bl	8005264 <__sfp_lock_release>
 8005374:	230c      	movs	r3, #12
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	e7ee      	b.n	8005358 <__sfp+0x60>
 800537a:	bf00      	nop
 800537c:	080060b4 	.word	0x080060b4
 8005380:	ffff0001 	.word	0xffff0001

08005384 <_fwalk_reent>:
 8005384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005388:	4606      	mov	r6, r0
 800538a:	4688      	mov	r8, r1
 800538c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005390:	2700      	movs	r7, #0
 8005392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005396:	f1b9 0901 	subs.w	r9, r9, #1
 800539a:	d505      	bpl.n	80053a8 <_fwalk_reent+0x24>
 800539c:	6824      	ldr	r4, [r4, #0]
 800539e:	2c00      	cmp	r4, #0
 80053a0:	d1f7      	bne.n	8005392 <_fwalk_reent+0xe>
 80053a2:	4638      	mov	r0, r7
 80053a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a8:	89ab      	ldrh	r3, [r5, #12]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d907      	bls.n	80053be <_fwalk_reent+0x3a>
 80053ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053b2:	3301      	adds	r3, #1
 80053b4:	d003      	beq.n	80053be <_fwalk_reent+0x3a>
 80053b6:	4629      	mov	r1, r5
 80053b8:	4630      	mov	r0, r6
 80053ba:	47c0      	blx	r8
 80053bc:	4307      	orrs	r7, r0
 80053be:	3568      	adds	r5, #104	; 0x68
 80053c0:	e7e9      	b.n	8005396 <_fwalk_reent+0x12>
	...

080053c4 <_localeconv_r>:
 80053c4:	4800      	ldr	r0, [pc, #0]	; (80053c8 <_localeconv_r+0x4>)
 80053c6:	4770      	bx	lr
 80053c8:	20000160 	.word	0x20000160

080053cc <__retarget_lock_init_recursive>:
 80053cc:	4770      	bx	lr

080053ce <__retarget_lock_acquire_recursive>:
 80053ce:	4770      	bx	lr

080053d0 <__retarget_lock_release_recursive>:
 80053d0:	4770      	bx	lr

080053d2 <__swhatbuf_r>:
 80053d2:	b570      	push	{r4, r5, r6, lr}
 80053d4:	460e      	mov	r6, r1
 80053d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053da:	2900      	cmp	r1, #0
 80053dc:	b096      	sub	sp, #88	; 0x58
 80053de:	4614      	mov	r4, r2
 80053e0:	461d      	mov	r5, r3
 80053e2:	da08      	bge.n	80053f6 <__swhatbuf_r+0x24>
 80053e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	602a      	str	r2, [r5, #0]
 80053ec:	061a      	lsls	r2, r3, #24
 80053ee:	d410      	bmi.n	8005412 <__swhatbuf_r+0x40>
 80053f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053f4:	e00e      	b.n	8005414 <__swhatbuf_r+0x42>
 80053f6:	466a      	mov	r2, sp
 80053f8:	f000 fd9a 	bl	8005f30 <_fstat_r>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	dbf1      	blt.n	80053e4 <__swhatbuf_r+0x12>
 8005400:	9a01      	ldr	r2, [sp, #4]
 8005402:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005406:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800540a:	425a      	negs	r2, r3
 800540c:	415a      	adcs	r2, r3
 800540e:	602a      	str	r2, [r5, #0]
 8005410:	e7ee      	b.n	80053f0 <__swhatbuf_r+0x1e>
 8005412:	2340      	movs	r3, #64	; 0x40
 8005414:	2000      	movs	r0, #0
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	b016      	add	sp, #88	; 0x58
 800541a:	bd70      	pop	{r4, r5, r6, pc}

0800541c <__smakebuf_r>:
 800541c:	898b      	ldrh	r3, [r1, #12]
 800541e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005420:	079d      	lsls	r5, r3, #30
 8005422:	4606      	mov	r6, r0
 8005424:	460c      	mov	r4, r1
 8005426:	d507      	bpl.n	8005438 <__smakebuf_r+0x1c>
 8005428:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	2301      	movs	r3, #1
 8005432:	6163      	str	r3, [r4, #20]
 8005434:	b002      	add	sp, #8
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	ab01      	add	r3, sp, #4
 800543a:	466a      	mov	r2, sp
 800543c:	f7ff ffc9 	bl	80053d2 <__swhatbuf_r>
 8005440:	9900      	ldr	r1, [sp, #0]
 8005442:	4605      	mov	r5, r0
 8005444:	4630      	mov	r0, r6
 8005446:	f000 fc45 	bl	8005cd4 <_malloc_r>
 800544a:	b948      	cbnz	r0, 8005460 <__smakebuf_r+0x44>
 800544c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005450:	059a      	lsls	r2, r3, #22
 8005452:	d4ef      	bmi.n	8005434 <__smakebuf_r+0x18>
 8005454:	f023 0303 	bic.w	r3, r3, #3
 8005458:	f043 0302 	orr.w	r3, r3, #2
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	e7e3      	b.n	8005428 <__smakebuf_r+0xc>
 8005460:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <__smakebuf_r+0x7c>)
 8005462:	62b3      	str	r3, [r6, #40]	; 0x28
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	6020      	str	r0, [r4, #0]
 8005468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546c:	81a3      	strh	r3, [r4, #12]
 800546e:	9b00      	ldr	r3, [sp, #0]
 8005470:	6163      	str	r3, [r4, #20]
 8005472:	9b01      	ldr	r3, [sp, #4]
 8005474:	6120      	str	r0, [r4, #16]
 8005476:	b15b      	cbz	r3, 8005490 <__smakebuf_r+0x74>
 8005478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800547c:	4630      	mov	r0, r6
 800547e:	f000 fd69 	bl	8005f54 <_isatty_r>
 8005482:	b128      	cbz	r0, 8005490 <__smakebuf_r+0x74>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	81a3      	strh	r3, [r4, #12]
 8005490:	89a0      	ldrh	r0, [r4, #12]
 8005492:	4305      	orrs	r5, r0
 8005494:	81a5      	strh	r5, [r4, #12]
 8005496:	e7cd      	b.n	8005434 <__smakebuf_r+0x18>
 8005498:	08005221 	.word	0x08005221

0800549c <malloc>:
 800549c:	4b02      	ldr	r3, [pc, #8]	; (80054a8 <malloc+0xc>)
 800549e:	4601      	mov	r1, r0
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	f000 bc17 	b.w	8005cd4 <_malloc_r>
 80054a6:	bf00      	nop
 80054a8:	2000000c 	.word	0x2000000c

080054ac <memcpy>:
 80054ac:	440a      	add	r2, r1
 80054ae:	4291      	cmp	r1, r2
 80054b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054b4:	d100      	bne.n	80054b8 <memcpy+0xc>
 80054b6:	4770      	bx	lr
 80054b8:	b510      	push	{r4, lr}
 80054ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c2:	4291      	cmp	r1, r2
 80054c4:	d1f9      	bne.n	80054ba <memcpy+0xe>
 80054c6:	bd10      	pop	{r4, pc}

080054c8 <_Balloc>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054cc:	4604      	mov	r4, r0
 80054ce:	460d      	mov	r5, r1
 80054d0:	b976      	cbnz	r6, 80054f0 <_Balloc+0x28>
 80054d2:	2010      	movs	r0, #16
 80054d4:	f7ff ffe2 	bl	800549c <malloc>
 80054d8:	4602      	mov	r2, r0
 80054da:	6260      	str	r0, [r4, #36]	; 0x24
 80054dc:	b920      	cbnz	r0, 80054e8 <_Balloc+0x20>
 80054de:	4b18      	ldr	r3, [pc, #96]	; (8005540 <_Balloc+0x78>)
 80054e0:	4818      	ldr	r0, [pc, #96]	; (8005544 <_Balloc+0x7c>)
 80054e2:	2166      	movs	r1, #102	; 0x66
 80054e4:	f7fe f850 	bl	8003588 <__assert_func>
 80054e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054ec:	6006      	str	r6, [r0, #0]
 80054ee:	60c6      	str	r6, [r0, #12]
 80054f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054f2:	68f3      	ldr	r3, [r6, #12]
 80054f4:	b183      	cbz	r3, 8005518 <_Balloc+0x50>
 80054f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054fe:	b9b8      	cbnz	r0, 8005530 <_Balloc+0x68>
 8005500:	2101      	movs	r1, #1
 8005502:	fa01 f605 	lsl.w	r6, r1, r5
 8005506:	1d72      	adds	r2, r6, #5
 8005508:	0092      	lsls	r2, r2, #2
 800550a:	4620      	mov	r0, r4
 800550c:	f000 fb60 	bl	8005bd0 <_calloc_r>
 8005510:	b160      	cbz	r0, 800552c <_Balloc+0x64>
 8005512:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005516:	e00e      	b.n	8005536 <_Balloc+0x6e>
 8005518:	2221      	movs	r2, #33	; 0x21
 800551a:	2104      	movs	r1, #4
 800551c:	4620      	mov	r0, r4
 800551e:	f000 fb57 	bl	8005bd0 <_calloc_r>
 8005522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005524:	60f0      	str	r0, [r6, #12]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e4      	bne.n	80054f6 <_Balloc+0x2e>
 800552c:	2000      	movs	r0, #0
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	6802      	ldr	r2, [r0, #0]
 8005532:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005536:	2300      	movs	r3, #0
 8005538:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800553c:	e7f7      	b.n	800552e <_Balloc+0x66>
 800553e:	bf00      	nop
 8005540:	0800610a 	.word	0x0800610a
 8005544:	080061f0 	.word	0x080061f0

08005548 <_Bfree>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800554c:	4605      	mov	r5, r0
 800554e:	460c      	mov	r4, r1
 8005550:	b976      	cbnz	r6, 8005570 <_Bfree+0x28>
 8005552:	2010      	movs	r0, #16
 8005554:	f7ff ffa2 	bl	800549c <malloc>
 8005558:	4602      	mov	r2, r0
 800555a:	6268      	str	r0, [r5, #36]	; 0x24
 800555c:	b920      	cbnz	r0, 8005568 <_Bfree+0x20>
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <_Bfree+0x3c>)
 8005560:	4809      	ldr	r0, [pc, #36]	; (8005588 <_Bfree+0x40>)
 8005562:	218a      	movs	r1, #138	; 0x8a
 8005564:	f7fe f810 	bl	8003588 <__assert_func>
 8005568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800556c:	6006      	str	r6, [r0, #0]
 800556e:	60c6      	str	r6, [r0, #12]
 8005570:	b13c      	cbz	r4, 8005582 <_Bfree+0x3a>
 8005572:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005574:	6862      	ldr	r2, [r4, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800557c:	6021      	str	r1, [r4, #0]
 800557e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	0800610a 	.word	0x0800610a
 8005588:	080061f0 	.word	0x080061f0

0800558c <__multadd>:
 800558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005590:	690d      	ldr	r5, [r1, #16]
 8005592:	4607      	mov	r7, r0
 8005594:	460c      	mov	r4, r1
 8005596:	461e      	mov	r6, r3
 8005598:	f101 0c14 	add.w	ip, r1, #20
 800559c:	2000      	movs	r0, #0
 800559e:	f8dc 3000 	ldr.w	r3, [ip]
 80055a2:	b299      	uxth	r1, r3
 80055a4:	fb02 6101 	mla	r1, r2, r1, r6
 80055a8:	0c1e      	lsrs	r6, r3, #16
 80055aa:	0c0b      	lsrs	r3, r1, #16
 80055ac:	fb02 3306 	mla	r3, r2, r6, r3
 80055b0:	b289      	uxth	r1, r1
 80055b2:	3001      	adds	r0, #1
 80055b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80055b8:	4285      	cmp	r5, r0
 80055ba:	f84c 1b04 	str.w	r1, [ip], #4
 80055be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80055c2:	dcec      	bgt.n	800559e <__multadd+0x12>
 80055c4:	b30e      	cbz	r6, 800560a <__multadd+0x7e>
 80055c6:	68a3      	ldr	r3, [r4, #8]
 80055c8:	42ab      	cmp	r3, r5
 80055ca:	dc19      	bgt.n	8005600 <__multadd+0x74>
 80055cc:	6861      	ldr	r1, [r4, #4]
 80055ce:	4638      	mov	r0, r7
 80055d0:	3101      	adds	r1, #1
 80055d2:	f7ff ff79 	bl	80054c8 <_Balloc>
 80055d6:	4680      	mov	r8, r0
 80055d8:	b928      	cbnz	r0, 80055e6 <__multadd+0x5a>
 80055da:	4602      	mov	r2, r0
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <__multadd+0x84>)
 80055de:	480d      	ldr	r0, [pc, #52]	; (8005614 <__multadd+0x88>)
 80055e0:	21b5      	movs	r1, #181	; 0xb5
 80055e2:	f7fd ffd1 	bl	8003588 <__assert_func>
 80055e6:	6922      	ldr	r2, [r4, #16]
 80055e8:	3202      	adds	r2, #2
 80055ea:	f104 010c 	add.w	r1, r4, #12
 80055ee:	0092      	lsls	r2, r2, #2
 80055f0:	300c      	adds	r0, #12
 80055f2:	f7ff ff5b 	bl	80054ac <memcpy>
 80055f6:	4621      	mov	r1, r4
 80055f8:	4638      	mov	r0, r7
 80055fa:	f7ff ffa5 	bl	8005548 <_Bfree>
 80055fe:	4644      	mov	r4, r8
 8005600:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005604:	3501      	adds	r5, #1
 8005606:	615e      	str	r6, [r3, #20]
 8005608:	6125      	str	r5, [r4, #16]
 800560a:	4620      	mov	r0, r4
 800560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005610:	0800617c 	.word	0x0800617c
 8005614:	080061f0 	.word	0x080061f0

08005618 <__hi0bits>:
 8005618:	0c03      	lsrs	r3, r0, #16
 800561a:	041b      	lsls	r3, r3, #16
 800561c:	b9d3      	cbnz	r3, 8005654 <__hi0bits+0x3c>
 800561e:	0400      	lsls	r0, r0, #16
 8005620:	2310      	movs	r3, #16
 8005622:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005626:	bf04      	itt	eq
 8005628:	0200      	lsleq	r0, r0, #8
 800562a:	3308      	addeq	r3, #8
 800562c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005630:	bf04      	itt	eq
 8005632:	0100      	lsleq	r0, r0, #4
 8005634:	3304      	addeq	r3, #4
 8005636:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800563a:	bf04      	itt	eq
 800563c:	0080      	lsleq	r0, r0, #2
 800563e:	3302      	addeq	r3, #2
 8005640:	2800      	cmp	r0, #0
 8005642:	db05      	blt.n	8005650 <__hi0bits+0x38>
 8005644:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005648:	f103 0301 	add.w	r3, r3, #1
 800564c:	bf08      	it	eq
 800564e:	2320      	moveq	r3, #32
 8005650:	4618      	mov	r0, r3
 8005652:	4770      	bx	lr
 8005654:	2300      	movs	r3, #0
 8005656:	e7e4      	b.n	8005622 <__hi0bits+0xa>

08005658 <__lo0bits>:
 8005658:	6803      	ldr	r3, [r0, #0]
 800565a:	f013 0207 	ands.w	r2, r3, #7
 800565e:	4601      	mov	r1, r0
 8005660:	d00b      	beq.n	800567a <__lo0bits+0x22>
 8005662:	07da      	lsls	r2, r3, #31
 8005664:	d423      	bmi.n	80056ae <__lo0bits+0x56>
 8005666:	0798      	lsls	r0, r3, #30
 8005668:	bf49      	itett	mi
 800566a:	085b      	lsrmi	r3, r3, #1
 800566c:	089b      	lsrpl	r3, r3, #2
 800566e:	2001      	movmi	r0, #1
 8005670:	600b      	strmi	r3, [r1, #0]
 8005672:	bf5c      	itt	pl
 8005674:	600b      	strpl	r3, [r1, #0]
 8005676:	2002      	movpl	r0, #2
 8005678:	4770      	bx	lr
 800567a:	b298      	uxth	r0, r3
 800567c:	b9a8      	cbnz	r0, 80056aa <__lo0bits+0x52>
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	2010      	movs	r0, #16
 8005682:	b2da      	uxtb	r2, r3
 8005684:	b90a      	cbnz	r2, 800568a <__lo0bits+0x32>
 8005686:	3008      	adds	r0, #8
 8005688:	0a1b      	lsrs	r3, r3, #8
 800568a:	071a      	lsls	r2, r3, #28
 800568c:	bf04      	itt	eq
 800568e:	091b      	lsreq	r3, r3, #4
 8005690:	3004      	addeq	r0, #4
 8005692:	079a      	lsls	r2, r3, #30
 8005694:	bf04      	itt	eq
 8005696:	089b      	lsreq	r3, r3, #2
 8005698:	3002      	addeq	r0, #2
 800569a:	07da      	lsls	r2, r3, #31
 800569c:	d403      	bmi.n	80056a6 <__lo0bits+0x4e>
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	f100 0001 	add.w	r0, r0, #1
 80056a4:	d005      	beq.n	80056b2 <__lo0bits+0x5a>
 80056a6:	600b      	str	r3, [r1, #0]
 80056a8:	4770      	bx	lr
 80056aa:	4610      	mov	r0, r2
 80056ac:	e7e9      	b.n	8005682 <__lo0bits+0x2a>
 80056ae:	2000      	movs	r0, #0
 80056b0:	4770      	bx	lr
 80056b2:	2020      	movs	r0, #32
 80056b4:	4770      	bx	lr
	...

080056b8 <__i2b>:
 80056b8:	b510      	push	{r4, lr}
 80056ba:	460c      	mov	r4, r1
 80056bc:	2101      	movs	r1, #1
 80056be:	f7ff ff03 	bl	80054c8 <_Balloc>
 80056c2:	4602      	mov	r2, r0
 80056c4:	b928      	cbnz	r0, 80056d2 <__i2b+0x1a>
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <__i2b+0x24>)
 80056c8:	4805      	ldr	r0, [pc, #20]	; (80056e0 <__i2b+0x28>)
 80056ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80056ce:	f7fd ff5b 	bl	8003588 <__assert_func>
 80056d2:	2301      	movs	r3, #1
 80056d4:	6144      	str	r4, [r0, #20]
 80056d6:	6103      	str	r3, [r0, #16]
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	bf00      	nop
 80056dc:	0800617c 	.word	0x0800617c
 80056e0:	080061f0 	.word	0x080061f0

080056e4 <__multiply>:
 80056e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e8:	4691      	mov	r9, r2
 80056ea:	690a      	ldr	r2, [r1, #16]
 80056ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	bfb8      	it	lt
 80056f4:	460b      	movlt	r3, r1
 80056f6:	460c      	mov	r4, r1
 80056f8:	bfbc      	itt	lt
 80056fa:	464c      	movlt	r4, r9
 80056fc:	4699      	movlt	r9, r3
 80056fe:	6927      	ldr	r7, [r4, #16]
 8005700:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005704:	68a3      	ldr	r3, [r4, #8]
 8005706:	6861      	ldr	r1, [r4, #4]
 8005708:	eb07 060a 	add.w	r6, r7, sl
 800570c:	42b3      	cmp	r3, r6
 800570e:	b085      	sub	sp, #20
 8005710:	bfb8      	it	lt
 8005712:	3101      	addlt	r1, #1
 8005714:	f7ff fed8 	bl	80054c8 <_Balloc>
 8005718:	b930      	cbnz	r0, 8005728 <__multiply+0x44>
 800571a:	4602      	mov	r2, r0
 800571c:	4b44      	ldr	r3, [pc, #272]	; (8005830 <__multiply+0x14c>)
 800571e:	4845      	ldr	r0, [pc, #276]	; (8005834 <__multiply+0x150>)
 8005720:	f240 115d 	movw	r1, #349	; 0x15d
 8005724:	f7fd ff30 	bl	8003588 <__assert_func>
 8005728:	f100 0514 	add.w	r5, r0, #20
 800572c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005730:	462b      	mov	r3, r5
 8005732:	2200      	movs	r2, #0
 8005734:	4543      	cmp	r3, r8
 8005736:	d321      	bcc.n	800577c <__multiply+0x98>
 8005738:	f104 0314 	add.w	r3, r4, #20
 800573c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005740:	f109 0314 	add.w	r3, r9, #20
 8005744:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005748:	9202      	str	r2, [sp, #8]
 800574a:	1b3a      	subs	r2, r7, r4
 800574c:	3a15      	subs	r2, #21
 800574e:	f022 0203 	bic.w	r2, r2, #3
 8005752:	3204      	adds	r2, #4
 8005754:	f104 0115 	add.w	r1, r4, #21
 8005758:	428f      	cmp	r7, r1
 800575a:	bf38      	it	cc
 800575c:	2204      	movcc	r2, #4
 800575e:	9201      	str	r2, [sp, #4]
 8005760:	9a02      	ldr	r2, [sp, #8]
 8005762:	9303      	str	r3, [sp, #12]
 8005764:	429a      	cmp	r2, r3
 8005766:	d80c      	bhi.n	8005782 <__multiply+0x9e>
 8005768:	2e00      	cmp	r6, #0
 800576a:	dd03      	ble.n	8005774 <__multiply+0x90>
 800576c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005770:	2b00      	cmp	r3, #0
 8005772:	d05a      	beq.n	800582a <__multiply+0x146>
 8005774:	6106      	str	r6, [r0, #16]
 8005776:	b005      	add	sp, #20
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577c:	f843 2b04 	str.w	r2, [r3], #4
 8005780:	e7d8      	b.n	8005734 <__multiply+0x50>
 8005782:	f8b3 a000 	ldrh.w	sl, [r3]
 8005786:	f1ba 0f00 	cmp.w	sl, #0
 800578a:	d024      	beq.n	80057d6 <__multiply+0xf2>
 800578c:	f104 0e14 	add.w	lr, r4, #20
 8005790:	46a9      	mov	r9, r5
 8005792:	f04f 0c00 	mov.w	ip, #0
 8005796:	f85e 2b04 	ldr.w	r2, [lr], #4
 800579a:	f8d9 1000 	ldr.w	r1, [r9]
 800579e:	fa1f fb82 	uxth.w	fp, r2
 80057a2:	b289      	uxth	r1, r1
 80057a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80057a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80057ac:	f8d9 2000 	ldr.w	r2, [r9]
 80057b0:	4461      	add	r1, ip
 80057b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80057ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80057be:	b289      	uxth	r1, r1
 80057c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80057c4:	4577      	cmp	r7, lr
 80057c6:	f849 1b04 	str.w	r1, [r9], #4
 80057ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057ce:	d8e2      	bhi.n	8005796 <__multiply+0xb2>
 80057d0:	9a01      	ldr	r2, [sp, #4]
 80057d2:	f845 c002 	str.w	ip, [r5, r2]
 80057d6:	9a03      	ldr	r2, [sp, #12]
 80057d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057dc:	3304      	adds	r3, #4
 80057de:	f1b9 0f00 	cmp.w	r9, #0
 80057e2:	d020      	beq.n	8005826 <__multiply+0x142>
 80057e4:	6829      	ldr	r1, [r5, #0]
 80057e6:	f104 0c14 	add.w	ip, r4, #20
 80057ea:	46ae      	mov	lr, r5
 80057ec:	f04f 0a00 	mov.w	sl, #0
 80057f0:	f8bc b000 	ldrh.w	fp, [ip]
 80057f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80057f8:	fb09 220b 	mla	r2, r9, fp, r2
 80057fc:	4492      	add	sl, r2
 80057fe:	b289      	uxth	r1, r1
 8005800:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005804:	f84e 1b04 	str.w	r1, [lr], #4
 8005808:	f85c 2b04 	ldr.w	r2, [ip], #4
 800580c:	f8be 1000 	ldrh.w	r1, [lr]
 8005810:	0c12      	lsrs	r2, r2, #16
 8005812:	fb09 1102 	mla	r1, r9, r2, r1
 8005816:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800581a:	4567      	cmp	r7, ip
 800581c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005820:	d8e6      	bhi.n	80057f0 <__multiply+0x10c>
 8005822:	9a01      	ldr	r2, [sp, #4]
 8005824:	50a9      	str	r1, [r5, r2]
 8005826:	3504      	adds	r5, #4
 8005828:	e79a      	b.n	8005760 <__multiply+0x7c>
 800582a:	3e01      	subs	r6, #1
 800582c:	e79c      	b.n	8005768 <__multiply+0x84>
 800582e:	bf00      	nop
 8005830:	0800617c 	.word	0x0800617c
 8005834:	080061f0 	.word	0x080061f0

08005838 <__pow5mult>:
 8005838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800583c:	4615      	mov	r5, r2
 800583e:	f012 0203 	ands.w	r2, r2, #3
 8005842:	4606      	mov	r6, r0
 8005844:	460f      	mov	r7, r1
 8005846:	d007      	beq.n	8005858 <__pow5mult+0x20>
 8005848:	4c25      	ldr	r4, [pc, #148]	; (80058e0 <__pow5mult+0xa8>)
 800584a:	3a01      	subs	r2, #1
 800584c:	2300      	movs	r3, #0
 800584e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005852:	f7ff fe9b 	bl	800558c <__multadd>
 8005856:	4607      	mov	r7, r0
 8005858:	10ad      	asrs	r5, r5, #2
 800585a:	d03d      	beq.n	80058d8 <__pow5mult+0xa0>
 800585c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800585e:	b97c      	cbnz	r4, 8005880 <__pow5mult+0x48>
 8005860:	2010      	movs	r0, #16
 8005862:	f7ff fe1b 	bl	800549c <malloc>
 8005866:	4602      	mov	r2, r0
 8005868:	6270      	str	r0, [r6, #36]	; 0x24
 800586a:	b928      	cbnz	r0, 8005878 <__pow5mult+0x40>
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <__pow5mult+0xac>)
 800586e:	481e      	ldr	r0, [pc, #120]	; (80058e8 <__pow5mult+0xb0>)
 8005870:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005874:	f7fd fe88 	bl	8003588 <__assert_func>
 8005878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800587c:	6004      	str	r4, [r0, #0]
 800587e:	60c4      	str	r4, [r0, #12]
 8005880:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005888:	b94c      	cbnz	r4, 800589e <__pow5mult+0x66>
 800588a:	f240 2171 	movw	r1, #625	; 0x271
 800588e:	4630      	mov	r0, r6
 8005890:	f7ff ff12 	bl	80056b8 <__i2b>
 8005894:	2300      	movs	r3, #0
 8005896:	f8c8 0008 	str.w	r0, [r8, #8]
 800589a:	4604      	mov	r4, r0
 800589c:	6003      	str	r3, [r0, #0]
 800589e:	f04f 0900 	mov.w	r9, #0
 80058a2:	07eb      	lsls	r3, r5, #31
 80058a4:	d50a      	bpl.n	80058bc <__pow5mult+0x84>
 80058a6:	4639      	mov	r1, r7
 80058a8:	4622      	mov	r2, r4
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7ff ff1a 	bl	80056e4 <__multiply>
 80058b0:	4639      	mov	r1, r7
 80058b2:	4680      	mov	r8, r0
 80058b4:	4630      	mov	r0, r6
 80058b6:	f7ff fe47 	bl	8005548 <_Bfree>
 80058ba:	4647      	mov	r7, r8
 80058bc:	106d      	asrs	r5, r5, #1
 80058be:	d00b      	beq.n	80058d8 <__pow5mult+0xa0>
 80058c0:	6820      	ldr	r0, [r4, #0]
 80058c2:	b938      	cbnz	r0, 80058d4 <__pow5mult+0x9c>
 80058c4:	4622      	mov	r2, r4
 80058c6:	4621      	mov	r1, r4
 80058c8:	4630      	mov	r0, r6
 80058ca:	f7ff ff0b 	bl	80056e4 <__multiply>
 80058ce:	6020      	str	r0, [r4, #0]
 80058d0:	f8c0 9000 	str.w	r9, [r0]
 80058d4:	4604      	mov	r4, r0
 80058d6:	e7e4      	b.n	80058a2 <__pow5mult+0x6a>
 80058d8:	4638      	mov	r0, r7
 80058da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058de:	bf00      	nop
 80058e0:	08006340 	.word	0x08006340
 80058e4:	0800610a 	.word	0x0800610a
 80058e8:	080061f0 	.word	0x080061f0

080058ec <__lshift>:
 80058ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	460c      	mov	r4, r1
 80058f2:	6849      	ldr	r1, [r1, #4]
 80058f4:	6923      	ldr	r3, [r4, #16]
 80058f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058fa:	68a3      	ldr	r3, [r4, #8]
 80058fc:	4607      	mov	r7, r0
 80058fe:	4691      	mov	r9, r2
 8005900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005904:	f108 0601 	add.w	r6, r8, #1
 8005908:	42b3      	cmp	r3, r6
 800590a:	db0b      	blt.n	8005924 <__lshift+0x38>
 800590c:	4638      	mov	r0, r7
 800590e:	f7ff fddb 	bl	80054c8 <_Balloc>
 8005912:	4605      	mov	r5, r0
 8005914:	b948      	cbnz	r0, 800592a <__lshift+0x3e>
 8005916:	4602      	mov	r2, r0
 8005918:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <__lshift+0xd8>)
 800591a:	482b      	ldr	r0, [pc, #172]	; (80059c8 <__lshift+0xdc>)
 800591c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005920:	f7fd fe32 	bl	8003588 <__assert_func>
 8005924:	3101      	adds	r1, #1
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	e7ee      	b.n	8005908 <__lshift+0x1c>
 800592a:	2300      	movs	r3, #0
 800592c:	f100 0114 	add.w	r1, r0, #20
 8005930:	f100 0210 	add.w	r2, r0, #16
 8005934:	4618      	mov	r0, r3
 8005936:	4553      	cmp	r3, sl
 8005938:	db37      	blt.n	80059aa <__lshift+0xbe>
 800593a:	6920      	ldr	r0, [r4, #16]
 800593c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005940:	f104 0314 	add.w	r3, r4, #20
 8005944:	f019 091f 	ands.w	r9, r9, #31
 8005948:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800594c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005950:	d02f      	beq.n	80059b2 <__lshift+0xc6>
 8005952:	f1c9 0e20 	rsb	lr, r9, #32
 8005956:	468a      	mov	sl, r1
 8005958:	f04f 0c00 	mov.w	ip, #0
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	fa02 f209 	lsl.w	r2, r2, r9
 8005962:	ea42 020c 	orr.w	r2, r2, ip
 8005966:	f84a 2b04 	str.w	r2, [sl], #4
 800596a:	f853 2b04 	ldr.w	r2, [r3], #4
 800596e:	4298      	cmp	r0, r3
 8005970:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005974:	d8f2      	bhi.n	800595c <__lshift+0x70>
 8005976:	1b03      	subs	r3, r0, r4
 8005978:	3b15      	subs	r3, #21
 800597a:	f023 0303 	bic.w	r3, r3, #3
 800597e:	3304      	adds	r3, #4
 8005980:	f104 0215 	add.w	r2, r4, #21
 8005984:	4290      	cmp	r0, r2
 8005986:	bf38      	it	cc
 8005988:	2304      	movcc	r3, #4
 800598a:	f841 c003 	str.w	ip, [r1, r3]
 800598e:	f1bc 0f00 	cmp.w	ip, #0
 8005992:	d001      	beq.n	8005998 <__lshift+0xac>
 8005994:	f108 0602 	add.w	r6, r8, #2
 8005998:	3e01      	subs	r6, #1
 800599a:	4638      	mov	r0, r7
 800599c:	612e      	str	r6, [r5, #16]
 800599e:	4621      	mov	r1, r4
 80059a0:	f7ff fdd2 	bl	8005548 <_Bfree>
 80059a4:	4628      	mov	r0, r5
 80059a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80059ae:	3301      	adds	r3, #1
 80059b0:	e7c1      	b.n	8005936 <__lshift+0x4a>
 80059b2:	3904      	subs	r1, #4
 80059b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80059bc:	4298      	cmp	r0, r3
 80059be:	d8f9      	bhi.n	80059b4 <__lshift+0xc8>
 80059c0:	e7ea      	b.n	8005998 <__lshift+0xac>
 80059c2:	bf00      	nop
 80059c4:	0800617c 	.word	0x0800617c
 80059c8:	080061f0 	.word	0x080061f0

080059cc <__mcmp>:
 80059cc:	b530      	push	{r4, r5, lr}
 80059ce:	6902      	ldr	r2, [r0, #16]
 80059d0:	690c      	ldr	r4, [r1, #16]
 80059d2:	1b12      	subs	r2, r2, r4
 80059d4:	d10e      	bne.n	80059f4 <__mcmp+0x28>
 80059d6:	f100 0314 	add.w	r3, r0, #20
 80059da:	3114      	adds	r1, #20
 80059dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80059e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80059e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80059e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80059ec:	42a5      	cmp	r5, r4
 80059ee:	d003      	beq.n	80059f8 <__mcmp+0x2c>
 80059f0:	d305      	bcc.n	80059fe <__mcmp+0x32>
 80059f2:	2201      	movs	r2, #1
 80059f4:	4610      	mov	r0, r2
 80059f6:	bd30      	pop	{r4, r5, pc}
 80059f8:	4283      	cmp	r3, r0
 80059fa:	d3f3      	bcc.n	80059e4 <__mcmp+0x18>
 80059fc:	e7fa      	b.n	80059f4 <__mcmp+0x28>
 80059fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a02:	e7f7      	b.n	80059f4 <__mcmp+0x28>

08005a04 <__mdiff>:
 8005a04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a08:	460c      	mov	r4, r1
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	4620      	mov	r0, r4
 8005a10:	4690      	mov	r8, r2
 8005a12:	f7ff ffdb 	bl	80059cc <__mcmp>
 8005a16:	1e05      	subs	r5, r0, #0
 8005a18:	d110      	bne.n	8005a3c <__mdiff+0x38>
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f7ff fd53 	bl	80054c8 <_Balloc>
 8005a22:	b930      	cbnz	r0, 8005a32 <__mdiff+0x2e>
 8005a24:	4b3a      	ldr	r3, [pc, #232]	; (8005b10 <__mdiff+0x10c>)
 8005a26:	4602      	mov	r2, r0
 8005a28:	f240 2132 	movw	r1, #562	; 0x232
 8005a2c:	4839      	ldr	r0, [pc, #228]	; (8005b14 <__mdiff+0x110>)
 8005a2e:	f7fd fdab 	bl	8003588 <__assert_func>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a3c:	bfa4      	itt	ge
 8005a3e:	4643      	movge	r3, r8
 8005a40:	46a0      	movge	r8, r4
 8005a42:	4630      	mov	r0, r6
 8005a44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a48:	bfa6      	itte	ge
 8005a4a:	461c      	movge	r4, r3
 8005a4c:	2500      	movge	r5, #0
 8005a4e:	2501      	movlt	r5, #1
 8005a50:	f7ff fd3a 	bl	80054c8 <_Balloc>
 8005a54:	b920      	cbnz	r0, 8005a60 <__mdiff+0x5c>
 8005a56:	4b2e      	ldr	r3, [pc, #184]	; (8005b10 <__mdiff+0x10c>)
 8005a58:	4602      	mov	r2, r0
 8005a5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a5e:	e7e5      	b.n	8005a2c <__mdiff+0x28>
 8005a60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a64:	6926      	ldr	r6, [r4, #16]
 8005a66:	60c5      	str	r5, [r0, #12]
 8005a68:	f104 0914 	add.w	r9, r4, #20
 8005a6c:	f108 0514 	add.w	r5, r8, #20
 8005a70:	f100 0e14 	add.w	lr, r0, #20
 8005a74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005a78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a7c:	f108 0210 	add.w	r2, r8, #16
 8005a80:	46f2      	mov	sl, lr
 8005a82:	2100      	movs	r1, #0
 8005a84:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005a8c:	fa1f f883 	uxth.w	r8, r3
 8005a90:	fa11 f18b 	uxtah	r1, r1, fp
 8005a94:	0c1b      	lsrs	r3, r3, #16
 8005a96:	eba1 0808 	sub.w	r8, r1, r8
 8005a9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005aa2:	fa1f f888 	uxth.w	r8, r8
 8005aa6:	1419      	asrs	r1, r3, #16
 8005aa8:	454e      	cmp	r6, r9
 8005aaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005aae:	f84a 3b04 	str.w	r3, [sl], #4
 8005ab2:	d8e7      	bhi.n	8005a84 <__mdiff+0x80>
 8005ab4:	1b33      	subs	r3, r6, r4
 8005ab6:	3b15      	subs	r3, #21
 8005ab8:	f023 0303 	bic.w	r3, r3, #3
 8005abc:	3304      	adds	r3, #4
 8005abe:	3415      	adds	r4, #21
 8005ac0:	42a6      	cmp	r6, r4
 8005ac2:	bf38      	it	cc
 8005ac4:	2304      	movcc	r3, #4
 8005ac6:	441d      	add	r5, r3
 8005ac8:	4473      	add	r3, lr
 8005aca:	469e      	mov	lr, r3
 8005acc:	462e      	mov	r6, r5
 8005ace:	4566      	cmp	r6, ip
 8005ad0:	d30e      	bcc.n	8005af0 <__mdiff+0xec>
 8005ad2:	f10c 0203 	add.w	r2, ip, #3
 8005ad6:	1b52      	subs	r2, r2, r5
 8005ad8:	f022 0203 	bic.w	r2, r2, #3
 8005adc:	3d03      	subs	r5, #3
 8005ade:	45ac      	cmp	ip, r5
 8005ae0:	bf38      	it	cc
 8005ae2:	2200      	movcc	r2, #0
 8005ae4:	441a      	add	r2, r3
 8005ae6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005aea:	b17b      	cbz	r3, 8005b0c <__mdiff+0x108>
 8005aec:	6107      	str	r7, [r0, #16]
 8005aee:	e7a3      	b.n	8005a38 <__mdiff+0x34>
 8005af0:	f856 8b04 	ldr.w	r8, [r6], #4
 8005af4:	fa11 f288 	uxtah	r2, r1, r8
 8005af8:	1414      	asrs	r4, r2, #16
 8005afa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005afe:	b292      	uxth	r2, r2
 8005b00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005b04:	f84e 2b04 	str.w	r2, [lr], #4
 8005b08:	1421      	asrs	r1, r4, #16
 8005b0a:	e7e0      	b.n	8005ace <__mdiff+0xca>
 8005b0c:	3f01      	subs	r7, #1
 8005b0e:	e7ea      	b.n	8005ae6 <__mdiff+0xe2>
 8005b10:	0800617c 	.word	0x0800617c
 8005b14:	080061f0 	.word	0x080061f0

08005b18 <__d2b>:
 8005b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b1c:	4689      	mov	r9, r1
 8005b1e:	2101      	movs	r1, #1
 8005b20:	ec57 6b10 	vmov	r6, r7, d0
 8005b24:	4690      	mov	r8, r2
 8005b26:	f7ff fccf 	bl	80054c8 <_Balloc>
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	b930      	cbnz	r0, 8005b3c <__d2b+0x24>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <__d2b+0xb0>)
 8005b32:	4826      	ldr	r0, [pc, #152]	; (8005bcc <__d2b+0xb4>)
 8005b34:	f240 310a 	movw	r1, #778	; 0x30a
 8005b38:	f7fd fd26 	bl	8003588 <__assert_func>
 8005b3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005b40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005b44:	bb35      	cbnz	r5, 8005b94 <__d2b+0x7c>
 8005b46:	2e00      	cmp	r6, #0
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	d028      	beq.n	8005b9e <__d2b+0x86>
 8005b4c:	4668      	mov	r0, sp
 8005b4e:	9600      	str	r6, [sp, #0]
 8005b50:	f7ff fd82 	bl	8005658 <__lo0bits>
 8005b54:	9900      	ldr	r1, [sp, #0]
 8005b56:	b300      	cbz	r0, 8005b9a <__d2b+0x82>
 8005b58:	9a01      	ldr	r2, [sp, #4]
 8005b5a:	f1c0 0320 	rsb	r3, r0, #32
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	430b      	orrs	r3, r1
 8005b64:	40c2      	lsrs	r2, r0
 8005b66:	6163      	str	r3, [r4, #20]
 8005b68:	9201      	str	r2, [sp, #4]
 8005b6a:	9b01      	ldr	r3, [sp, #4]
 8005b6c:	61a3      	str	r3, [r4, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bf14      	ite	ne
 8005b72:	2202      	movne	r2, #2
 8005b74:	2201      	moveq	r2, #1
 8005b76:	6122      	str	r2, [r4, #16]
 8005b78:	b1d5      	cbz	r5, 8005bb0 <__d2b+0x98>
 8005b7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b7e:	4405      	add	r5, r0
 8005b80:	f8c9 5000 	str.w	r5, [r9]
 8005b84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b88:	f8c8 0000 	str.w	r0, [r8]
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	b003      	add	sp, #12
 8005b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b98:	e7d5      	b.n	8005b46 <__d2b+0x2e>
 8005b9a:	6161      	str	r1, [r4, #20]
 8005b9c:	e7e5      	b.n	8005b6a <__d2b+0x52>
 8005b9e:	a801      	add	r0, sp, #4
 8005ba0:	f7ff fd5a 	bl	8005658 <__lo0bits>
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	6163      	str	r3, [r4, #20]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	6122      	str	r2, [r4, #16]
 8005bac:	3020      	adds	r0, #32
 8005bae:	e7e3      	b.n	8005b78 <__d2b+0x60>
 8005bb0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005bb4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005bb8:	f8c9 0000 	str.w	r0, [r9]
 8005bbc:	6918      	ldr	r0, [r3, #16]
 8005bbe:	f7ff fd2b 	bl	8005618 <__hi0bits>
 8005bc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005bc6:	e7df      	b.n	8005b88 <__d2b+0x70>
 8005bc8:	0800617c 	.word	0x0800617c
 8005bcc:	080061f0 	.word	0x080061f0

08005bd0 <_calloc_r>:
 8005bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bd2:	fba1 2402 	umull	r2, r4, r1, r2
 8005bd6:	b94c      	cbnz	r4, 8005bec <_calloc_r+0x1c>
 8005bd8:	4611      	mov	r1, r2
 8005bda:	9201      	str	r2, [sp, #4]
 8005bdc:	f000 f87a 	bl	8005cd4 <_malloc_r>
 8005be0:	9a01      	ldr	r2, [sp, #4]
 8005be2:	4605      	mov	r5, r0
 8005be4:	b930      	cbnz	r0, 8005bf4 <_calloc_r+0x24>
 8005be6:	4628      	mov	r0, r5
 8005be8:	b003      	add	sp, #12
 8005bea:	bd30      	pop	{r4, r5, pc}
 8005bec:	220c      	movs	r2, #12
 8005bee:	6002      	str	r2, [r0, #0]
 8005bf0:	2500      	movs	r5, #0
 8005bf2:	e7f8      	b.n	8005be6 <_calloc_r+0x16>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	f7fd fd21 	bl	800363c <memset>
 8005bfa:	e7f4      	b.n	8005be6 <_calloc_r+0x16>

08005bfc <_free_r>:
 8005bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bfe:	2900      	cmp	r1, #0
 8005c00:	d044      	beq.n	8005c8c <_free_r+0x90>
 8005c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c06:	9001      	str	r0, [sp, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c0e:	bfb8      	it	lt
 8005c10:	18e4      	addlt	r4, r4, r3
 8005c12:	f000 f9d3 	bl	8005fbc <__malloc_lock>
 8005c16:	4a1e      	ldr	r2, [pc, #120]	; (8005c90 <_free_r+0x94>)
 8005c18:	9801      	ldr	r0, [sp, #4]
 8005c1a:	6813      	ldr	r3, [r2, #0]
 8005c1c:	b933      	cbnz	r3, 8005c2c <_free_r+0x30>
 8005c1e:	6063      	str	r3, [r4, #4]
 8005c20:	6014      	str	r4, [r2, #0]
 8005c22:	b003      	add	sp, #12
 8005c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c28:	f000 b9ce 	b.w	8005fc8 <__malloc_unlock>
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	d908      	bls.n	8005c42 <_free_r+0x46>
 8005c30:	6825      	ldr	r5, [r4, #0]
 8005c32:	1961      	adds	r1, r4, r5
 8005c34:	428b      	cmp	r3, r1
 8005c36:	bf01      	itttt	eq
 8005c38:	6819      	ldreq	r1, [r3, #0]
 8005c3a:	685b      	ldreq	r3, [r3, #4]
 8005c3c:	1949      	addeq	r1, r1, r5
 8005c3e:	6021      	streq	r1, [r4, #0]
 8005c40:	e7ed      	b.n	8005c1e <_free_r+0x22>
 8005c42:	461a      	mov	r2, r3
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	b10b      	cbz	r3, 8005c4c <_free_r+0x50>
 8005c48:	42a3      	cmp	r3, r4
 8005c4a:	d9fa      	bls.n	8005c42 <_free_r+0x46>
 8005c4c:	6811      	ldr	r1, [r2, #0]
 8005c4e:	1855      	adds	r5, r2, r1
 8005c50:	42a5      	cmp	r5, r4
 8005c52:	d10b      	bne.n	8005c6c <_free_r+0x70>
 8005c54:	6824      	ldr	r4, [r4, #0]
 8005c56:	4421      	add	r1, r4
 8005c58:	1854      	adds	r4, r2, r1
 8005c5a:	42a3      	cmp	r3, r4
 8005c5c:	6011      	str	r1, [r2, #0]
 8005c5e:	d1e0      	bne.n	8005c22 <_free_r+0x26>
 8005c60:	681c      	ldr	r4, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	6053      	str	r3, [r2, #4]
 8005c66:	4421      	add	r1, r4
 8005c68:	6011      	str	r1, [r2, #0]
 8005c6a:	e7da      	b.n	8005c22 <_free_r+0x26>
 8005c6c:	d902      	bls.n	8005c74 <_free_r+0x78>
 8005c6e:	230c      	movs	r3, #12
 8005c70:	6003      	str	r3, [r0, #0]
 8005c72:	e7d6      	b.n	8005c22 <_free_r+0x26>
 8005c74:	6825      	ldr	r5, [r4, #0]
 8005c76:	1961      	adds	r1, r4, r5
 8005c78:	428b      	cmp	r3, r1
 8005c7a:	bf04      	itt	eq
 8005c7c:	6819      	ldreq	r1, [r3, #0]
 8005c7e:	685b      	ldreq	r3, [r3, #4]
 8005c80:	6063      	str	r3, [r4, #4]
 8005c82:	bf04      	itt	eq
 8005c84:	1949      	addeq	r1, r1, r5
 8005c86:	6021      	streq	r1, [r4, #0]
 8005c88:	6054      	str	r4, [r2, #4]
 8005c8a:	e7ca      	b.n	8005c22 <_free_r+0x26>
 8005c8c:	b003      	add	sp, #12
 8005c8e:	bd30      	pop	{r4, r5, pc}
 8005c90:	200002e0 	.word	0x200002e0

08005c94 <sbrk_aligned>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	4e0e      	ldr	r6, [pc, #56]	; (8005cd0 <sbrk_aligned+0x3c>)
 8005c98:	460c      	mov	r4, r1
 8005c9a:	6831      	ldr	r1, [r6, #0]
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	b911      	cbnz	r1, 8005ca6 <sbrk_aligned+0x12>
 8005ca0:	f000 f88c 	bl	8005dbc <_sbrk_r>
 8005ca4:	6030      	str	r0, [r6, #0]
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 f887 	bl	8005dbc <_sbrk_r>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d00a      	beq.n	8005cc8 <sbrk_aligned+0x34>
 8005cb2:	1cc4      	adds	r4, r0, #3
 8005cb4:	f024 0403 	bic.w	r4, r4, #3
 8005cb8:	42a0      	cmp	r0, r4
 8005cba:	d007      	beq.n	8005ccc <sbrk_aligned+0x38>
 8005cbc:	1a21      	subs	r1, r4, r0
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 f87c 	bl	8005dbc <_sbrk_r>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d101      	bne.n	8005ccc <sbrk_aligned+0x38>
 8005cc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005ccc:	4620      	mov	r0, r4
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	200002e4 	.word	0x200002e4

08005cd4 <_malloc_r>:
 8005cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd8:	1ccd      	adds	r5, r1, #3
 8005cda:	f025 0503 	bic.w	r5, r5, #3
 8005cde:	3508      	adds	r5, #8
 8005ce0:	2d0c      	cmp	r5, #12
 8005ce2:	bf38      	it	cc
 8005ce4:	250c      	movcc	r5, #12
 8005ce6:	2d00      	cmp	r5, #0
 8005ce8:	4607      	mov	r7, r0
 8005cea:	db01      	blt.n	8005cf0 <_malloc_r+0x1c>
 8005cec:	42a9      	cmp	r1, r5
 8005cee:	d905      	bls.n	8005cfc <_malloc_r+0x28>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	2600      	movs	r6, #0
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cfc:	4e2e      	ldr	r6, [pc, #184]	; (8005db8 <_malloc_r+0xe4>)
 8005cfe:	f000 f95d 	bl	8005fbc <__malloc_lock>
 8005d02:	6833      	ldr	r3, [r6, #0]
 8005d04:	461c      	mov	r4, r3
 8005d06:	bb34      	cbnz	r4, 8005d56 <_malloc_r+0x82>
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	f7ff ffc2 	bl	8005c94 <sbrk_aligned>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	4604      	mov	r4, r0
 8005d14:	d14d      	bne.n	8005db2 <_malloc_r+0xde>
 8005d16:	6834      	ldr	r4, [r6, #0]
 8005d18:	4626      	mov	r6, r4
 8005d1a:	2e00      	cmp	r6, #0
 8005d1c:	d140      	bne.n	8005da0 <_malloc_r+0xcc>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	4631      	mov	r1, r6
 8005d22:	4638      	mov	r0, r7
 8005d24:	eb04 0803 	add.w	r8, r4, r3
 8005d28:	f000 f848 	bl	8005dbc <_sbrk_r>
 8005d2c:	4580      	cmp	r8, r0
 8005d2e:	d13a      	bne.n	8005da6 <_malloc_r+0xd2>
 8005d30:	6821      	ldr	r1, [r4, #0]
 8005d32:	3503      	adds	r5, #3
 8005d34:	1a6d      	subs	r5, r5, r1
 8005d36:	f025 0503 	bic.w	r5, r5, #3
 8005d3a:	3508      	adds	r5, #8
 8005d3c:	2d0c      	cmp	r5, #12
 8005d3e:	bf38      	it	cc
 8005d40:	250c      	movcc	r5, #12
 8005d42:	4629      	mov	r1, r5
 8005d44:	4638      	mov	r0, r7
 8005d46:	f7ff ffa5 	bl	8005c94 <sbrk_aligned>
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d02b      	beq.n	8005da6 <_malloc_r+0xd2>
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	442b      	add	r3, r5
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	e00e      	b.n	8005d74 <_malloc_r+0xa0>
 8005d56:	6822      	ldr	r2, [r4, #0]
 8005d58:	1b52      	subs	r2, r2, r5
 8005d5a:	d41e      	bmi.n	8005d9a <_malloc_r+0xc6>
 8005d5c:	2a0b      	cmp	r2, #11
 8005d5e:	d916      	bls.n	8005d8e <_malloc_r+0xba>
 8005d60:	1961      	adds	r1, r4, r5
 8005d62:	42a3      	cmp	r3, r4
 8005d64:	6025      	str	r5, [r4, #0]
 8005d66:	bf18      	it	ne
 8005d68:	6059      	strne	r1, [r3, #4]
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	bf08      	it	eq
 8005d6e:	6031      	streq	r1, [r6, #0]
 8005d70:	5162      	str	r2, [r4, r5]
 8005d72:	604b      	str	r3, [r1, #4]
 8005d74:	4638      	mov	r0, r7
 8005d76:	f104 060b 	add.w	r6, r4, #11
 8005d7a:	f000 f925 	bl	8005fc8 <__malloc_unlock>
 8005d7e:	f026 0607 	bic.w	r6, r6, #7
 8005d82:	1d23      	adds	r3, r4, #4
 8005d84:	1af2      	subs	r2, r6, r3
 8005d86:	d0b6      	beq.n	8005cf6 <_malloc_r+0x22>
 8005d88:	1b9b      	subs	r3, r3, r6
 8005d8a:	50a3      	str	r3, [r4, r2]
 8005d8c:	e7b3      	b.n	8005cf6 <_malloc_r+0x22>
 8005d8e:	6862      	ldr	r2, [r4, #4]
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	bf0c      	ite	eq
 8005d94:	6032      	streq	r2, [r6, #0]
 8005d96:	605a      	strne	r2, [r3, #4]
 8005d98:	e7ec      	b.n	8005d74 <_malloc_r+0xa0>
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	6864      	ldr	r4, [r4, #4]
 8005d9e:	e7b2      	b.n	8005d06 <_malloc_r+0x32>
 8005da0:	4634      	mov	r4, r6
 8005da2:	6876      	ldr	r6, [r6, #4]
 8005da4:	e7b9      	b.n	8005d1a <_malloc_r+0x46>
 8005da6:	230c      	movs	r3, #12
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	4638      	mov	r0, r7
 8005dac:	f000 f90c 	bl	8005fc8 <__malloc_unlock>
 8005db0:	e7a1      	b.n	8005cf6 <_malloc_r+0x22>
 8005db2:	6025      	str	r5, [r4, #0]
 8005db4:	e7de      	b.n	8005d74 <_malloc_r+0xa0>
 8005db6:	bf00      	nop
 8005db8:	200002e0 	.word	0x200002e0

08005dbc <_sbrk_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4d06      	ldr	r5, [pc, #24]	; (8005dd8 <_sbrk_r+0x1c>)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	602b      	str	r3, [r5, #0]
 8005dc8:	f7fb fdbc 	bl	8001944 <_sbrk>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_sbrk_r+0x1a>
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_sbrk_r+0x1a>
 8005dd4:	6023      	str	r3, [r4, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	200002e8 	.word	0x200002e8

08005ddc <_raise_r>:
 8005ddc:	291f      	cmp	r1, #31
 8005dde:	b538      	push	{r3, r4, r5, lr}
 8005de0:	4604      	mov	r4, r0
 8005de2:	460d      	mov	r5, r1
 8005de4:	d904      	bls.n	8005df0 <_raise_r+0x14>
 8005de6:	2316      	movs	r3, #22
 8005de8:	6003      	str	r3, [r0, #0]
 8005dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005df2:	b112      	cbz	r2, 8005dfa <_raise_r+0x1e>
 8005df4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005df8:	b94b      	cbnz	r3, 8005e0e <_raise_r+0x32>
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 f830 	bl	8005e60 <_getpid_r>
 8005e00:	462a      	mov	r2, r5
 8005e02:	4601      	mov	r1, r0
 8005e04:	4620      	mov	r0, r4
 8005e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e0a:	f000 b817 	b.w	8005e3c <_kill_r>
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d00a      	beq.n	8005e28 <_raise_r+0x4c>
 8005e12:	1c59      	adds	r1, r3, #1
 8005e14:	d103      	bne.n	8005e1e <_raise_r+0x42>
 8005e16:	2316      	movs	r3, #22
 8005e18:	6003      	str	r3, [r0, #0]
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	e7e7      	b.n	8005dee <_raise_r+0x12>
 8005e1e:	2400      	movs	r4, #0
 8005e20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e24:	4628      	mov	r0, r5
 8005e26:	4798      	blx	r3
 8005e28:	2000      	movs	r0, #0
 8005e2a:	e7e0      	b.n	8005dee <_raise_r+0x12>

08005e2c <raise>:
 8005e2c:	4b02      	ldr	r3, [pc, #8]	; (8005e38 <raise+0xc>)
 8005e2e:	4601      	mov	r1, r0
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	f7ff bfd3 	b.w	8005ddc <_raise_r>
 8005e36:	bf00      	nop
 8005e38:	2000000c 	.word	0x2000000c

08005e3c <_kill_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4d07      	ldr	r5, [pc, #28]	; (8005e5c <_kill_r+0x20>)
 8005e40:	2300      	movs	r3, #0
 8005e42:	4604      	mov	r4, r0
 8005e44:	4608      	mov	r0, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	602b      	str	r3, [r5, #0]
 8005e4a:	f7fb fd0f 	bl	800186c <_kill>
 8005e4e:	1c43      	adds	r3, r0, #1
 8005e50:	d102      	bne.n	8005e58 <_kill_r+0x1c>
 8005e52:	682b      	ldr	r3, [r5, #0]
 8005e54:	b103      	cbz	r3, 8005e58 <_kill_r+0x1c>
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	bd38      	pop	{r3, r4, r5, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200002e8 	.word	0x200002e8

08005e60 <_getpid_r>:
 8005e60:	f7fb bcfc 	b.w	800185c <_getpid>

08005e64 <__sread>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	460c      	mov	r4, r1
 8005e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e6c:	f000 f8b2 	bl	8005fd4 <_read_r>
 8005e70:	2800      	cmp	r0, #0
 8005e72:	bfab      	itete	ge
 8005e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e76:	89a3      	ldrhlt	r3, [r4, #12]
 8005e78:	181b      	addge	r3, r3, r0
 8005e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e7e:	bfac      	ite	ge
 8005e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e82:	81a3      	strhlt	r3, [r4, #12]
 8005e84:	bd10      	pop	{r4, pc}

08005e86 <__swrite>:
 8005e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8a:	461f      	mov	r7, r3
 8005e8c:	898b      	ldrh	r3, [r1, #12]
 8005e8e:	05db      	lsls	r3, r3, #23
 8005e90:	4605      	mov	r5, r0
 8005e92:	460c      	mov	r4, r1
 8005e94:	4616      	mov	r6, r2
 8005e96:	d505      	bpl.n	8005ea4 <__swrite+0x1e>
 8005e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f000 f868 	bl	8005f74 <_lseek_r>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eae:	81a3      	strh	r3, [r4, #12]
 8005eb0:	4632      	mov	r2, r6
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eba:	f000 b817 	b.w	8005eec <_write_r>

08005ebe <__sseek>:
 8005ebe:	b510      	push	{r4, lr}
 8005ec0:	460c      	mov	r4, r1
 8005ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec6:	f000 f855 	bl	8005f74 <_lseek_r>
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	bf15      	itete	ne
 8005ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eda:	81a3      	strheq	r3, [r4, #12]
 8005edc:	bf18      	it	ne
 8005ede:	81a3      	strhne	r3, [r4, #12]
 8005ee0:	bd10      	pop	{r4, pc}

08005ee2 <__sclose>:
 8005ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee6:	f000 b813 	b.w	8005f10 <_close_r>
	...

08005eec <_write_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4d07      	ldr	r5, [pc, #28]	; (8005f0c <_write_r+0x20>)
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	4608      	mov	r0, r1
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	602a      	str	r2, [r5, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	f7fb fa65 	bl	80013ca <_write>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_write_r+0x1e>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_write_r+0x1e>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	200002e8 	.word	0x200002e8

08005f10 <_close_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d06      	ldr	r5, [pc, #24]	; (8005f2c <_close_r+0x1c>)
 8005f14:	2300      	movs	r3, #0
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	f7fb fcdd 	bl	80018da <_close>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_close_r+0x1a>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_close_r+0x1a>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	200002e8 	.word	0x200002e8

08005f30 <_fstat_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4d07      	ldr	r5, [pc, #28]	; (8005f50 <_fstat_r+0x20>)
 8005f34:	2300      	movs	r3, #0
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	602b      	str	r3, [r5, #0]
 8005f3e:	f7fb fcd8 	bl	80018f2 <_fstat>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	d102      	bne.n	8005f4c <_fstat_r+0x1c>
 8005f46:	682b      	ldr	r3, [r5, #0]
 8005f48:	b103      	cbz	r3, 8005f4c <_fstat_r+0x1c>
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	bd38      	pop	{r3, r4, r5, pc}
 8005f4e:	bf00      	nop
 8005f50:	200002e8 	.word	0x200002e8

08005f54 <_isatty_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4d06      	ldr	r5, [pc, #24]	; (8005f70 <_isatty_r+0x1c>)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	602b      	str	r3, [r5, #0]
 8005f60:	f7fb fcd7 	bl	8001912 <_isatty>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_isatty_r+0x1a>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_isatty_r+0x1a>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	200002e8 	.word	0x200002e8

08005f74 <_lseek_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d07      	ldr	r5, [pc, #28]	; (8005f94 <_lseek_r+0x20>)
 8005f78:	4604      	mov	r4, r0
 8005f7a:	4608      	mov	r0, r1
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	602a      	str	r2, [r5, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f7fb fcd0 	bl	8001928 <_lseek>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d102      	bne.n	8005f92 <_lseek_r+0x1e>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	b103      	cbz	r3, 8005f92 <_lseek_r+0x1e>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	200002e8 	.word	0x200002e8

08005f98 <__ascii_mbtowc>:
 8005f98:	b082      	sub	sp, #8
 8005f9a:	b901      	cbnz	r1, 8005f9e <__ascii_mbtowc+0x6>
 8005f9c:	a901      	add	r1, sp, #4
 8005f9e:	b142      	cbz	r2, 8005fb2 <__ascii_mbtowc+0x1a>
 8005fa0:	b14b      	cbz	r3, 8005fb6 <__ascii_mbtowc+0x1e>
 8005fa2:	7813      	ldrb	r3, [r2, #0]
 8005fa4:	600b      	str	r3, [r1, #0]
 8005fa6:	7812      	ldrb	r2, [r2, #0]
 8005fa8:	1e10      	subs	r0, r2, #0
 8005faa:	bf18      	it	ne
 8005fac:	2001      	movne	r0, #1
 8005fae:	b002      	add	sp, #8
 8005fb0:	4770      	bx	lr
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	e7fb      	b.n	8005fae <__ascii_mbtowc+0x16>
 8005fb6:	f06f 0001 	mvn.w	r0, #1
 8005fba:	e7f8      	b.n	8005fae <__ascii_mbtowc+0x16>

08005fbc <__malloc_lock>:
 8005fbc:	4801      	ldr	r0, [pc, #4]	; (8005fc4 <__malloc_lock+0x8>)
 8005fbe:	f7ff ba06 	b.w	80053ce <__retarget_lock_acquire_recursive>
 8005fc2:	bf00      	nop
 8005fc4:	200002dc 	.word	0x200002dc

08005fc8 <__malloc_unlock>:
 8005fc8:	4801      	ldr	r0, [pc, #4]	; (8005fd0 <__malloc_unlock+0x8>)
 8005fca:	f7ff ba01 	b.w	80053d0 <__retarget_lock_release_recursive>
 8005fce:	bf00      	nop
 8005fd0:	200002dc 	.word	0x200002dc

08005fd4 <_read_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d07      	ldr	r5, [pc, #28]	; (8005ff4 <_read_r+0x20>)
 8005fd8:	4604      	mov	r4, r0
 8005fda:	4608      	mov	r0, r1
 8005fdc:	4611      	mov	r1, r2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	602a      	str	r2, [r5, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f7fb fc5c 	bl	80018a0 <_read>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_read_r+0x1e>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_read_r+0x1e>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	200002e8 	.word	0x200002e8

08005ff8 <__ascii_wctomb>:
 8005ff8:	b149      	cbz	r1, 800600e <__ascii_wctomb+0x16>
 8005ffa:	2aff      	cmp	r2, #255	; 0xff
 8005ffc:	bf85      	ittet	hi
 8005ffe:	238a      	movhi	r3, #138	; 0x8a
 8006000:	6003      	strhi	r3, [r0, #0]
 8006002:	700a      	strbls	r2, [r1, #0]
 8006004:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006008:	bf98      	it	ls
 800600a:	2001      	movls	r0, #1
 800600c:	4770      	bx	lr
 800600e:	4608      	mov	r0, r1
 8006010:	4770      	bx	lr
	...

08006014 <_init>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr

08006020 <_fini>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr
