
ess_skeleton2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08005458  08005458  00015458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005874  08005874  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005874  08005874  00015874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800587c  0800587c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800587c  0800587c  0001587c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001dc  08005a60  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005a60  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f51f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002674  00000000  00000000  0002f72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000089f6  00000000  00000000  00031d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000938  00000000  00000000  0003a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001018  00000000  00000000  0003b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022732  00000000  00000000  0003c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f86a  00000000  00000000  0005e81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cecf0  00000000  00000000  0006e084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013cd74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d00  00000000  00000000  0013cdc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800543c 	.word	0x0800543c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800543c 	.word	0x0800543c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <AccInit>:
const uint8_t x_reg = 0x28;
const uint8_t y_reg = 0x2A;
const uint8_t z_reg = 0x2C;


uint8_t AccInit(){
 8000ea0:	b500      	push	{lr}
 8000ea2:	b083      	sub	sp, #12
	uint8_t tmp_buf;
	SPIAcc_Init();
 8000ea4:	f000 fbc2 	bl	800162c <SPIAcc_Init>
	SPIAcc_Get(who_am_i, &tmp_buf, 1);
 8000ea8:	f10d 0107 	add.w	r1, sp, #7
 8000eac:	2201      	movs	r2, #1
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f000 fc4c 	bl	800174c <SPIAcc_Get>
	//printf("0x%02x\n", tmp_buf);

	SPIAcc_Send(ctrl_reg, &ctrl_reg_val, 1);
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <AccInit+0x34>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2020      	movs	r0, #32
 8000eba:	f000 fc21 	bl	8001700 <SPIAcc_Send>
	if (tmp_buf == who_am_i_val){
 8000ebe:	f89d 0007 	ldrb.w	r0, [sp, #7]
		return 1;
	}
	else{
		return 0;
	}
}
 8000ec2:	f1a0 003f 	sub.w	r0, r0, #63	; 0x3f
 8000ec6:	fab0 f080 	clz	r0, r0
 8000eca:	0940      	lsrs	r0, r0, #5
 8000ecc:	b003      	add	sp, #12
 8000ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ed2:	bf00      	nop
 8000ed4:	08005458 	.word	0x08005458

08000ed8 <AccRead>:

void AccRead(acc3_t * reading){
 8000ed8:	b570      	push	{r4, r5, r6, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	4604      	mov	r4, r0
	uint8_t buffer[6];
	SPIAcc_Get(x_reg, buffer, 2);
 8000ede:	4669      	mov	r1, sp
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	2028      	movs	r0, #40	; 0x28
 8000ee4:	f000 fc32 	bl	800174c <SPIAcc_Get>
	SPIAcc_Get(y_reg, &buffer[2], 2);
 8000ee8:	2202      	movs	r2, #2
 8000eea:	eb0d 0102 	add.w	r1, sp, r2
 8000eee:	202a      	movs	r0, #42	; 0x2a
 8000ef0:	f000 fc2c 	bl	800174c <SPIAcc_Get>
	SPIAcc_Get(z_reg, &buffer[4], 2);
 8000ef4:	a901      	add	r1, sp, #4
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	202c      	movs	r0, #44	; 0x2c
 8000efa:	f000 fc27 	bl	800174c <SPIAcc_Get>

	reading->x = (buffer[1]<<8) + buffer[0];
 8000efe:	f89d 6001 	ldrb.w	r6, [sp, #1]
 8000f02:	f89d 1000 	ldrb.w	r1, [sp]
	reading->y = (buffer[3]<<8) + buffer[2];
 8000f06:	f89d 5003 	ldrb.w	r5, [sp, #3]
 8000f0a:	f89d 2002 	ldrb.w	r2, [sp, #2]
	reading->z = (buffer[5]<<8) + buffer[4];
 8000f0e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8000f12:	f89d 3004 	ldrb.w	r3, [sp, #4]
	reading->x = (buffer[1]<<8) + buffer[0];
 8000f16:	eb01 2106 	add.w	r1, r1, r6, lsl #8
	reading->y = (buffer[3]<<8) + buffer[2];
 8000f1a:	eb02 2205 	add.w	r2, r2, r5, lsl #8
	reading->z = (buffer[5]<<8) + buffer[4];
 8000f1e:	eb03 2300 	add.w	r3, r3, r0, lsl #8
	reading->x = (buffer[1]<<8) + buffer[0];
 8000f22:	8021      	strh	r1, [r4, #0]
	reading->y = (buffer[3]<<8) + buffer[2];
 8000f24:	8062      	strh	r2, [r4, #2]
	reading->z = (buffer[5]<<8) + buffer[4];
 8000f26:	80a3      	strh	r3, [r4, #4]
}
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	2400      	movs	r4, #0
{
 8000f30:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000f36:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000f3e:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <SystemClock_Config+0x8c>)
 8000f44:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000f52:	6411      	str	r1, [r2, #64]	; 0x40
 8000f54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f56:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000f5a:	9201      	str	r2, [sp, #4]
 8000f5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5e:	9402      	str	r4, [sp, #8]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6a:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f70:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f72:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f74:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f76:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f7c:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f7e:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000f82:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f84:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f86:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f88:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f8a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f90:	9512      	str	r5, [sp, #72]	; 0x48
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	260f      	movs	r6, #15
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000f94:	f000 feac 	bl	8001cf0 <HAL_RCC_OscConfig>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f98:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000fa0:	a803      	add	r0, sp, #12
 8000fa2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa8:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fac:	9603      	str	r6, [sp, #12]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000fae:	f001 f8b5 	bl	800211c <HAL_RCC_ClockConfig>
}
 8000fb2:	b014      	add	sp, #80	; 0x50
 8000fb4:	bd70      	pop	{r4, r5, r6, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40007000 	.word	0x40007000

08000fc0 <_init_leds>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void _init_leds(void)
{
 8000fc0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	2400      	movs	r4, #0
{
 8000fc4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000fca:	e9cd 4403 	strd	r4, r4, [sp, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <_init_leds+0x4c>)
 8000fd0:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	9405      	str	r4, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fd6:	480e      	ldr	r0, [pc, #56]	; (8001010 <_init_leds+0x50>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd8:	f042 0208 	orr.w	r2, r2, #8
 8000fdc:	631a      	str	r2, [r3, #48]	; 0x30
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fe6:	4622      	mov	r2, r4
 8000fe8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fec:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fee:	f000 fe7b 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ff2:	f44f 4270 	mov.w	r2, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <_init_leds+0x50>)
 8000ffa:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	e9cd 4403 	strd	r4, r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	e9cd 2301 	strd	r2, r3, [sp, #4]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001004:	f000 fd4c 	bl	8001aa0 <HAL_GPIO_Init>

}
 8001008:	b006      	add	sp, #24
 800100a:	bd10      	pop	{r4, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40020c00 	.word	0x40020c00

08001014 <_init_button>:


void _init_button() {
 8001014:	b510      	push	{r4, lr}
 8001016:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct;
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <_init_button+0x34>)
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	6b11      	ldr	r1, [r2, #48]	; 0x30
	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	/* Initialize pin */
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	480a      	ldr	r0, [pc, #40]	; (800104c <_init_button+0x38>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	f041 0101 	orr.w	r1, r1, #1
 8001026:	6311      	str	r1, [r2, #48]	; 0x30
 8001028:	6b12      	ldr	r2, [r2, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	9302      	str	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	f002 0201 	and.w	r2, r2, #1
 8001030:	9200      	str	r2, [sp, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001034:	2201      	movs	r2, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	e9cd 3303 	strd	r3, r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	9c00      	ldr	r4, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800103c:	9201      	str	r2, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f000 fd2f 	bl	8001aa0 <HAL_GPIO_Init>
}
 8001042:	b006      	add	sp, #24
 8001044:	bd10      	pop	{r4, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000

08001050 <ess_helper_init>:



void ess_helper_init() {
 8001050:	b508      	push	{r3, lr}
	  SystemClock_Config();
 8001052:	f7ff ff6b 	bl	8000f2c <SystemClock_Config>
	  _init_leds();
 8001056:	f7ff ffb3 	bl	8000fc0 <_init_leds>
	  _init_button();
}
 800105a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  _init_button();
 800105e:	f7ff bfd9 	b.w	8001014 <_init_button>
 8001062:	bf00      	nop

08001064 <led_init>:
#include "main.h"
#include "led_driver.h"

void led_init(LED_t * led, volatile uint32_t * port, uint32_t pin){
	led->port = port;
	led->pin = pin;
 8001064:	6042      	str	r2, [r0, #4]
	led_off(led);
}

void led_off(LED_t* led){
	*led->port &= ~(0x01 << led->pin);
 8001066:	680b      	ldr	r3, [r1, #0]
	led->port = port;
 8001068:	6001      	str	r1, [r0, #0]
void led_init(LED_t * led, volatile uint32_t * port, uint32_t pin){
 800106a:	b410      	push	{r4}
	*led->port &= ~(0x01 << led->pin);
 800106c:	2401      	movs	r4, #1
 800106e:	fa04 f202 	lsl.w	r2, r4, r2
 8001072:	ea23 0202 	bic.w	r2, r3, r2
}
 8001076:	f85d 4b04 	ldr.w	r4, [sp], #4
	*led->port &= ~(0x01 << led->pin);
 800107a:	600a      	str	r2, [r1, #0]
}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <led_off>:
	*led->port &= ~(0x01 << led->pin);
 8001080:	e9d0 1000 	ldrd	r1, r0, [r0]
 8001084:	2201      	movs	r2, #1
 8001086:	680b      	ldr	r3, [r1, #0]
 8001088:	4082      	lsls	r2, r0
 800108a:	ea23 0302 	bic.w	r3, r3, r2
 800108e:	600b      	str	r3, [r1, #0]
}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <led_on>:

void led_on(LED_t* led){
	*led->port |= 0x01 << led->pin;
 8001094:	e9d0 2000 	ldrd	r2, r0, [r0]
 8001098:	2301      	movs	r3, #1
 800109a:	6811      	ldr	r1, [r2, #0]
 800109c:	4083      	lsls	r3, r0
 800109e:	430b      	orrs	r3, r1
 80010a0:	6013      	str	r3, [r2, #0]
}
 80010a2:	4770      	bx	lr

080010a4 <_write>:
#include "tmp_driver.h"


int _write(int file, char *ptr, int len){
	int i = 0;
	for (i=0;i<len;i++){
 80010a4:	1e10      	subs	r0, r2, #0
 80010a6:	dd1a      	ble.n	80010de <_write+0x3a>
int _write(int file, char *ptr, int len){
 80010a8:	b430      	push	{r4, r5}
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010ae:	180d      	adds	r5, r1, r0
 80010b0:	f8d3 4e80 	ldr.w	r4, [r3, #3712]	; 0xe80
 80010b4:	07e4      	lsls	r4, r4, #31
		ITM_SendChar((*ptr++));
 80010b6:	f101 0101 	add.w	r1, r1, #1
 80010ba:	d50c      	bpl.n	80010d6 <_write+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010bc:	f8d3 4e00 	ldr.w	r4, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010c0:	07e2      	lsls	r2, r4, #31
 80010c2:	d508      	bpl.n	80010d6 <_write+0x32>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010c4:	681c      	ldr	r4, [r3, #0]
 80010c6:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80010ca:	b91c      	cbnz	r4, 80010d4 <_write+0x30>
    {
      __NOP();
 80010cc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010ce:	681c      	ldr	r4, [r3, #0]
 80010d0:	2c00      	cmp	r4, #0
 80010d2:	d0fb      	beq.n	80010cc <_write+0x28>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010d4:	701a      	strb	r2, [r3, #0]
	for (i=0;i<len;i++){
 80010d6:	42a9      	cmp	r1, r5
 80010d8:	d1ea      	bne.n	80010b0 <_write+0xc>
	}
	return  len;
}
 80010da:	bc30      	pop	{r4, r5}
 80010dc:	4770      	bx	lr
 80010de:	4770      	bx	lr

080010e0 <TMR4_Init_ISR>:
TIM_HandleTypeDef TIM_Handle4;
volatile uint8_t tmr3_flag = 0;
volatile uint8_t tmr4_flag = 0;

// Initialize Timer 4 for interrupts
void TMR4_Init_ISR(void) {
 80010e0:	b530      	push	{r4, r5, lr}
 80010e2:	b083      	sub	sp, #12
	/* Enable clock for TIM4 */
	__TIM4_CLK_ENABLE();
 80010e4:	2500      	movs	r5, #0
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <TMR4_Init_ISR+0x54>)
 80010e8:	9501      	str	r5, [sp, #4]
 80010ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	TIM_Handle4.Instance = TIM4;
 80010ec:	4c12      	ldr	r4, [pc, #72]	; (8001138 <TMR4_Init_ISR+0x58>)
 80010ee:	4913      	ldr	r1, [pc, #76]	; (800113c <TMR4_Init_ISR+0x5c>)
	//Same timer whose clocks we enable
	// timer_tick_frequency = 84000000 / (0 + 1) = 84000000
	TIM_Handle4.Init.Prescaler = 0;
 80010f0:	6065      	str	r5, [r4, #4]
	__TIM4_CLK_ENABLE();
 80010f2:	f042 0204 	orr.w	r2, r2, #4
 80010f6:	641a      	str	r2, [r3, #64]	; 0x40
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	TIM_Handle4.Instance = TIM4;
 80010fa:	6021      	str	r1, [r4, #0]
	__TIM4_CLK_ENABLE();
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	9301      	str	r3, [sp, #4]
	TIM_Handle4.Init.Period = 8399;// <your value here> 32Hz
	TIM_Handle4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	TIM_Handle4.Init.RepetitionCounter = 0;
	TIM_Handle4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	/* Initialize TIM4 */
	HAL_TIM_Base_Init(&TIM_Handle4);
 8001102:	4620      	mov	r0, r4
	TIM_Handle4.Init.Period = 8399;// <your value here> 32Hz
 8001104:	f242 03cf 	movw	r3, #8399	; 0x20cf
	__TIM4_CLK_ENABLE();
 8001108:	9a01      	ldr	r2, [sp, #4]
	TIM_Handle4.Init.Period = 8399;// <your value here> 32Hz
 800110a:	60e3      	str	r3, [r4, #12]
	TIM_Handle4.Init.RepetitionCounter = 0;
 800110c:	e9c4 5504 	strd	r5, r5, [r4, #16]
	TIM_Handle4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	60a5      	str	r5, [r4, #8]
	TIM_Handle4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&TIM_Handle4);
 8001114:	f001 fc5c 	bl	80029d0 <HAL_TIM_Base_Init>
	/* Start count on TIM4 */
	HAL_TIM_Base_Start_IT(&TIM_Handle4);
 8001118:	4620      	mov	r0, r4
 800111a:	f001 fbe7 	bl	80028ec <HAL_TIM_Base_Start_IT>
	/* Enable the TIM4 gloabal Interrupt */
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 800111e:	4629      	mov	r1, r5
 8001120:	2201      	movs	r2, #1
 8001122:	201e      	movs	r0, #30
 8001124:	f000 fc5c 	bl	80019e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001128:	201e      	movs	r0, #30
}
 800112a:	b003      	add	sp, #12
 800112c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001130:	f000 bc8e 	b.w	8001a50 <HAL_NVIC_EnableIRQ>
 8001134:	40023800 	.word	0x40023800
 8001138:	2000022c 	.word	0x2000022c
 800113c:	40000800 	.word	0x40000800

08001140 <TIM4_IRQHandler>:

// This is triggered when the counter overflows
void TIM4_IRQHandler(void)
{
	//In case other interrupts are also running
	if (__HAL_TIM_GET_FLAG(&TIM_Handle4, TIM_FLAG_UPDATE) != RESET)
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <TIM4_IRQHandler+0x20>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	07d1      	lsls	r1, r2, #31
 8001148:	d508      	bpl.n	800115c <TIM4_IRQHandler+0x1c>
	{
		if (__HAL_TIM_GET_ITSTATUS(&TIM_Handle4, TIM_IT_UPDATE) != RESET)
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	07d2      	lsls	r2, r2, #31
 800114e:	d505      	bpl.n	800115c <TIM4_IRQHandler+0x1c>
		{
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle4, TIM_FLAG_UPDATE);
			/*put your code here */
			tmr4_flag = 1;
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <TIM4_IRQHandler+0x24>)
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle4, TIM_FLAG_UPDATE);
 8001152:	f06f 0001 	mvn.w	r0, #1
			tmr4_flag = 1;
 8001156:	2101      	movs	r1, #1
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle4, TIM_FLAG_UPDATE);
 8001158:	6118      	str	r0, [r3, #16]
			tmr4_flag = 1;
 800115a:	7011      	strb	r1, [r2, #0]
		}
	}
}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000022c 	.word	0x2000022c
 8001164:	200001fa 	.word	0x200001fa

08001168 <TMR3_Init_ISR>:

// Initialize Timer 3 for interrupts
void TMR3_Init_ISR(void) {
 8001168:	b530      	push	{r4, r5, lr}
 800116a:	b083      	sub	sp, #12
	/* Enable clock for TIM3 */
	__TIM3_CLK_ENABLE();
 800116c:	2500      	movs	r5, #0
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <TMR3_Init_ISR+0x54>)
 8001170:	9501      	str	r5, [sp, #4]
 8001172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	TIM_Handle3.Instance = TIM3;
 8001174:	4c12      	ldr	r4, [pc, #72]	; (80011c0 <TMR3_Init_ISR+0x58>)
 8001176:	4913      	ldr	r1, [pc, #76]	; (80011c4 <TMR3_Init_ISR+0x5c>)
	//Same timer whose clocks we enable
	// timer_tick_frequency = 84000000 / (0 + 1) = 84000000
	TIM_Handle3.Init.Prescaler = 0;
 8001178:	6065      	str	r5, [r4, #4]
	__TIM3_CLK_ENABLE();
 800117a:	f042 0202 	orr.w	r2, r2, #2
 800117e:	641a      	str	r2, [r3, #64]	; 0x40
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
In our case it is 16bit = 65535
Frequency = timer_tick_frequency / (TIM_Period + 1)
If you get Period larger than max timer value (in our case 65535),
you have to choose larger prescaler and slow down timer tick frequency
	 */
	TIM_Handle3.Init.Period = 2624999;// <your value here> 10kHz
 8001182:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <TMR3_Init_ISR+0x60>)
	TIM_Handle3.Instance = TIM3;
 8001184:	6021      	str	r1, [r4, #0]
	__TIM3_CLK_ENABLE();
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	9301      	str	r3, [sp, #4]
	TIM_Handle3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	TIM_Handle3.Init.RepetitionCounter = 0;
	TIM_Handle3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	/* Initialize TIM4 */
	HAL_TIM_Base_Init(&TIM_Handle3);
 800118c:	4620      	mov	r0, r4
	__TIM3_CLK_ENABLE();
 800118e:	9b01      	ldr	r3, [sp, #4]
	TIM_Handle3.Init.Period = 2624999;// <your value here> 10kHz
 8001190:	60e2      	str	r2, [r4, #12]
	TIM_Handle3.Init.RepetitionCounter = 0;
 8001192:	e9c4 5504 	strd	r5, r5, [r4, #16]
	TIM_Handle3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	60a5      	str	r5, [r4, #8]
	TIM_Handle3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	61a5      	str	r5, [r4, #24]
	HAL_TIM_Base_Init(&TIM_Handle3);
 800119a:	f001 fc19 	bl	80029d0 <HAL_TIM_Base_Init>
	/* Start count on TIM4 */
	HAL_TIM_Base_Start_IT(&TIM_Handle3);
 800119e:	4620      	mov	r0, r4
 80011a0:	f001 fba4 	bl	80028ec <HAL_TIM_Base_Start_IT>
	/* Enable the TIM4 gloabal Interrupt */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 80011a4:	4629      	mov	r1, r5
 80011a6:	2201      	movs	r2, #1
 80011a8:	201d      	movs	r0, #29
 80011aa:	f000 fc19 	bl	80019e0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011ae:	201d      	movs	r0, #29
}
 80011b0:	b003      	add	sp, #12
 80011b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011b6:	f000 bc4b 	b.w	8001a50 <HAL_NVIC_EnableIRQ>
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800
 80011c0:	2000026c 	.word	0x2000026c
 80011c4:	40000400 	.word	0x40000400
 80011c8:	00280de7 	.word	0x00280de7

080011cc <TIM3_IRQHandler>:
// This is triggered when the counter overflows
void TIM3_IRQHandler(void)
{
	//In case other interrupts are also running
	if (__HAL_TIM_GET_FLAG(&TIM_Handle3, TIM_FLAG_UPDATE) != RESET)
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <TIM3_IRQHandler+0x20>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	07d1      	lsls	r1, r2, #31
 80011d4:	d508      	bpl.n	80011e8 <TIM3_IRQHandler+0x1c>
	{
		if (__HAL_TIM_GET_ITSTATUS(&TIM_Handle3, TIM_IT_UPDATE) != RESET)
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	07d2      	lsls	r2, r2, #31
 80011da:	d505      	bpl.n	80011e8 <TIM3_IRQHandler+0x1c>
		{
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle3, TIM_FLAG_UPDATE);
			/*put your code here */
			tmr3_flag = 1;
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <TIM3_IRQHandler+0x24>)
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle3, TIM_FLAG_UPDATE);
 80011de:	f06f 0001 	mvn.w	r0, #1
			tmr3_flag = 1;
 80011e2:	2101      	movs	r1, #1
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle3, TIM_FLAG_UPDATE);
 80011e4:	6118      	str	r0, [r3, #16]
			tmr3_flag = 1;
 80011e6:	7011      	strb	r1, [r2, #0]
		}
	}
}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000026c 	.word	0x2000026c
 80011f0:	200001f9 	.word	0x200001f9

080011f4 <main>:
	DISPLAY_VIBRATION,
	DISPLAY_IMPACT,
	IMPACT_STATE} display_state_t;

int main(void)
{
 80011f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011f8:	b0a7      	sub	sp, #156	; 0x9c
	/* Initialize system */
	HAL_Init();
 80011fa:	f000 fbb1 	bl	8001960 <HAL_Init>
	/* Initialize peripherals on board */
	ess_helper_init();
 80011fe:	f7ff ff27 	bl	8001050 <ess_helper_init>
	LED_t led_green;
	LED_t led_orange;
	LED_t led_red;
	LED_t led_blue;

	led_init(&led_green, PORTD, GREEN);
 8001202:	49cd      	ldr	r1, [pc, #820]	; (8001538 <main+0x344>)
 8001204:	a806      	add	r0, sp, #24
 8001206:	220c      	movs	r2, #12
 8001208:	f7ff ff2c 	bl	8001064 <led_init>
	led_init(&led_orange, PORTD, ORANGE);
 800120c:	49ca      	ldr	r1, [pc, #808]	; (8001538 <main+0x344>)
 800120e:	a808      	add	r0, sp, #32
 8001210:	220d      	movs	r2, #13
 8001212:	f7ff ff27 	bl	8001064 <led_init>
	led_init(&led_red, PORTD, RED);
 8001216:	49c8      	ldr	r1, [pc, #800]	; (8001538 <main+0x344>)
 8001218:	a80a      	add	r0, sp, #40	; 0x28
 800121a:	220e      	movs	r2, #14
 800121c:	f7ff ff22 	bl	8001064 <led_init>
	led_init(&led_blue, PORTD, BLUE);
 8001220:	49c5      	ldr	r1, [pc, #788]	; (8001538 <main+0x344>)
 8001222:	a80c      	add	r0, sp, #48	; 0x30
 8001224:	220f      	movs	r2, #15
 8001226:	f7ff ff1d 	bl	8001064 <led_init>
	//*ptr = 0xF000;
	//*(uint32_t*)0x40020C14 = 0x1000;

	// Button press
	uint8_t button_press = 0;
	volatile uint16_t shadow = 0;
 800122a:	2400      	movs	r4, #0

	// PWM Init
	pwm_driver_init(&led_green, &led_orange, &led_red, &led_blue);
 800122c:	ab0c      	add	r3, sp, #48	; 0x30
 800122e:	aa0a      	add	r2, sp, #40	; 0x28
 8001230:	a908      	add	r1, sp, #32
 8001232:	a806      	add	r0, sp, #24
	volatile uint16_t shadow = 0;
 8001234:	f8ad 400e 	strh.w	r4, [sp, #14]
	pwm_driver_init(&led_green, &led_orange, &led_red, &led_blue);
 8001238:	f000 f98e 	bl	8001558 <pwm_driver_init>
	pwm_driver_set(GREEN, 0);
 800123c:	4621      	mov	r1, r4
 800123e:	200c      	movs	r0, #12
 8001240:	f000 f99a 	bl	8001578 <pwm_driver_set>
	pwm_driver_set(ORANGE, 0);
 8001244:	4621      	mov	r1, r4
 8001246:	200d      	movs	r0, #13
 8001248:	f000 f996 	bl	8001578 <pwm_driver_set>
	pwm_driver_set(RED, 0);
 800124c:	4621      	mov	r1, r4
 800124e:	200e      	movs	r0, #14
 8001250:	f000 f992 	bl	8001578 <pwm_driver_set>
	pwm_driver_set(BLUE, 0);
 8001254:	4621      	mov	r1, r4
 8001256:	200f      	movs	r0, #15
 8001258:	f000 f98e 	bl	8001578 <pwm_driver_set>
	// PWM loop counter
	uint32_t loop_counter = 0;
	uint32_t brightness_counter = 0;

	// Init ISRs
	TMR3_Init_ISR();
 800125c:	f7ff ff84 	bl	8001168 <TMR3_Init_ISR>
	TMR4_Init_ISR();
 8001260:	f7ff ff3e 	bl	80010e0 <TMR4_Init_ISR>
	int32_t sum_y = 0;
	int32_t sum_z = 0;
	uint32_t impact = 0;
	uint8_t impact_flag = 0;

	if (AccInit()){
 8001264:	f7ff fe1c 	bl	8000ea0 <AccInit>
 8001268:	2800      	cmp	r0, #0
 800126a:	f040 8160 	bne.w	800152e <main+0x33a>
{
 800126e:	f04f 0900 	mov.w	r9, #0
 8001272:	4fb2      	ldr	r7, [pc, #712]	; (800153c <main+0x348>)
 8001274:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8001554 <main+0x360>
 8001278:	4eb1      	ldr	r6, [pc, #708]	; (8001540 <main+0x34c>)
		printf("AccInit Successful!");
	}

    while(1){
    	// Catch rising edge
    	if ((GPIOA->IDR & 0x0001) && ((shadow & 0x0001) == 0)){
 800127a:	4cb2      	ldr	r4, [pc, #712]	; (8001544 <main+0x350>)
{
 800127c:	f8cd 9004 	str.w	r9, [sp, #4]
 8001280:	464d      	mov	r5, r9
 8001282:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    	if ((GPIOA->IDR & 0x0001) && ((shadow & 0x0001) == 0)){
 8001286:	6923      	ldr	r3, [r4, #16]
 8001288:	07db      	lsls	r3, r3, #31
 800128a:	d505      	bpl.n	8001298 <main+0xa4>
 800128c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    		button_press = 1;
 8001290:	f013 0f01 	tst.w	r3, #1
 8001294:	bf08      	it	eq
 8001296:	2501      	moveq	r5, #1
    	}
    	shadow = GPIOA->IDR;
 8001298:	6923      	ldr	r3, [r4, #16]
 800129a:	b29b      	uxth	r3, r3
 800129c:	f8ad 300e 	strh.w	r3, [sp, #14]
    	// ON-OFF Action
    	delay_usec(100);
    	pwm_driver_update();
    	*/

    	if (tmr3_flag){
 80012a0:	783b      	ldrb	r3, [r7, #0]
 80012a2:	b93b      	cbnz	r3, 80012b4 <main+0xc0>
    			break;
    		}
    	}

    	// PWM refresh
    	if (tmr4_flag){
 80012a4:	7833      	ldrb	r3, [r6, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0ed      	beq.n	8001286 <main+0x92>
    		tmr4_flag = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	7033      	strb	r3, [r6, #0]
    		pwm_driver_update();
 80012ae:	f000 f97d 	bl	80015ac <pwm_driver_update>
 80012b2:	e7e8      	b.n	8001286 <main+0x92>
    		tmr3_flag = 0;
 80012b4:	f04f 0a00 	mov.w	sl, #0
    		AccRead(&acc_readings);
 80012b8:	a804      	add	r0, sp, #16
    		tmr3_flag = 0;
 80012ba:	f887 a000 	strb.w	sl, [r7]
    		AccRead(&acc_readings);
 80012be:	f7ff fe0b 	bl	8000ed8 <AccRead>
    		if (state == DISPLAY_TILT){
 80012c2:	f898 3000 	ldrb.w	r3, [r8]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d036      	beq.n	8001338 <main+0x144>
    		*ptr_buff = acc_readings;
 80012ca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80012ce:	f8ab 3004 	strh.w	r3, [fp, #4]
    		if (full_flag){
 80012d2:	9b01      	ldr	r3, [sp, #4]
    		*ptr_buff = acc_readings;
 80012d4:	9804      	ldr	r0, [sp, #16]
 80012d6:	f8cb 0000 	str.w	r0, [fp]
    		if (full_flag){
 80012da:	bb43      	cbnz	r3, 800132e <main+0x13a>
 80012dc:	f10d 0392 	add.w	r3, sp, #146	; 0x92
 80012e0:	ebab 0303 	sub.w	r3, fp, r3
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	9301      	str	r3, [sp, #4]
    		impact = ptr_buff->x * ptr_buff->x + ptr_buff->y * ptr_buff->y + ptr_buff->z * ptr_buff->z;
 80012ec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80012f0:	f9bb 2000 	ldrsh.w	r2, [fp]
 80012f4:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
 80012f8:	fb01 f101 	mul.w	r1, r1, r1
 80012fc:	fb02 1202 	mla	r2, r2, r2, r1
 8001300:	fb03 2303 	mla	r3, r3, r3, r2
    		if (impact > ((uint32_t)0x01 << 30)){
 8001304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001308:	d869      	bhi.n	80013de <main+0x1ea>
    		switch(state)
 800130a:	f898 3000 	ldrb.w	r3, [r8]
 800130e:	2b01      	cmp	r3, #1
    		if (ptr_buff++ == &cir_buff[15]){
 8001310:	f10b 0b06 	add.w	fp, fp, #6
    		switch(state)
 8001314:	d076      	beq.n	8001404 <main+0x210>
 8001316:	2b03      	cmp	r3, #3
 8001318:	f000 808c 	beq.w	8001434 <main+0x240>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1c1      	bne.n	80012a4 <main+0xb0>
    			if (button_press)
 8001320:	2d00      	cmp	r5, #0
 8001322:	d0bf      	beq.n	80012a4 <main+0xb0>
    				state = DISPLAY_TILT;
 8001324:	2301      	movs	r3, #1
 8001326:	f888 3000 	strb.w	r3, [r8]
    				button_press = 0;
 800132a:	2500      	movs	r5, #0
 800132c:	e7ba      	b.n	80012a4 <main+0xb0>
 800132e:	2300      	movs	r3, #0
 8001330:	9301      	str	r3, [sp, #4]
    			ptr_buff = cir_buff;
 8001332:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8001336:	e7d9      	b.n	80012ec <main+0xf8>
    			if (acc_readings.x > 11584){
 8001338:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800133c:	f5b3 5f35 	cmp.w	r3, #11584	; 0x2d40
 8001340:	f300 8087 	bgt.w	8001452 <main+0x25e>
    			else if (acc_readings.x < -11584){
 8001344:	f513 5f35 	cmn.w	r3, #11584	; 0x2d40
 8001348:	f2c0 80be 	blt.w	80014c8 <main+0x2d4>
    			else if ((acc_readings.x > -1000) && (acc_readings.x < 1000)) {
 800134c:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 8001350:	f240 71ce 	movw	r1, #1998	; 0x7ce
 8001354:	b292      	uxth	r2, r2
 8001356:	428a      	cmp	r2, r1
    				pwm_driver_set(RED, 0);
 8001358:	4651      	mov	r1, sl
    			else if ((acc_readings.x > -1000) && (acc_readings.x < 1000)) {
 800135a:	d97b      	bls.n	8001454 <main+0x260>
    			else if (acc_readings.x > 0){
 800135c:	2b00      	cmp	r3, #0
 800135e:	f340 80d1 	ble.w	8001504 <main+0x310>
    				pwm_driver_set(GREEN, 0);
 8001362:	200c      	movs	r0, #12
 8001364:	f000 f908 	bl	8001578 <pwm_driver_set>
    				brightness = (int16_t)acc_readings.x * 100 / (uint16_t)11586;
 8001368:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800136c:	4a76      	ldr	r2, [pc, #472]	; (8001548 <main+0x354>)
 800136e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001372:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fb82 2103 	smull	r2, r1, r2, r3
 800137c:	17db      	asrs	r3, r3, #31
 800137e:	ebc3 3121 	rsb	r1, r3, r1, asr #12
    				pwm_driver_set(RED, brightness);
 8001382:	b2c9      	uxtb	r1, r1
 8001384:	200e      	movs	r0, #14
 8001386:	f000 f8f7 	bl	8001578 <pwm_driver_set>
    			if (acc_readings.y > 11584){
 800138a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800138e:	f5b3 5f35 	cmp.w	r3, #11584	; 0x2d40
 8001392:	dc55      	bgt.n	8001440 <main+0x24c>
    			else if (acc_readings.y < -11584){
 8001394:	f513 5f35 	cmn.w	r3, #11584	; 0x2d40
 8001398:	f2c0 808d 	blt.w	80014b6 <main+0x2c2>
    			else if ((acc_readings.y > -1000) && (acc_readings.y < 1000)) {
 800139c:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 80013a0:	f240 71ce 	movw	r1, #1998	; 0x7ce
 80013a4:	b292      	uxth	r2, r2
 80013a6:	428a      	cmp	r2, r1
    				pwm_driver_set(ORANGE, 0);
 80013a8:	f04f 0100 	mov.w	r1, #0
    			else if ((acc_readings.y > -1000) && (acc_readings.y < 1000)) {
 80013ac:	d949      	bls.n	8001442 <main+0x24e>
    			else if (acc_readings.y > 0){
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f340 8093 	ble.w	80014da <main+0x2e6>
    				pwm_driver_set(BLUE, 0);
 80013b4:	200f      	movs	r0, #15
 80013b6:	f000 f8df 	bl	8001578 <pwm_driver_set>
    				brightness = (int16_t)acc_readings.y * 100 / (uint16_t)11586;
 80013ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80013be:	4a62      	ldr	r2, [pc, #392]	; (8001548 <main+0x354>)
 80013c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	fb82 2103 	smull	r2, r1, r2, r3
 80013ce:	17db      	asrs	r3, r3, #31
 80013d0:	ebc3 3121 	rsb	r1, r3, r1, asr #12
    				pwm_driver_set(ORANGE, brightness);
 80013d4:	b2c9      	uxtb	r1, r1
 80013d6:	200d      	movs	r0, #13
 80013d8:	f000 f8ce 	bl	8001578 <pwm_driver_set>
 80013dc:	e775      	b.n	80012ca <main+0xd6>
    			printf("Shaking your board");
 80013de:	485b      	ldr	r0, [pc, #364]	; (800154c <main+0x358>)
 80013e0:	f001 ffae 	bl	8003340 <iprintf>
    		switch(state)
 80013e4:	f898 9000 	ldrb.w	r9, [r8]
 80013e8:	f1b9 0f01 	cmp.w	r9, #1
    		if (ptr_buff++ == &cir_buff[15]){
 80013ec:	f10b 0b06 	add.w	fp, fp, #6
    		switch(state)
 80013f0:	d008      	beq.n	8001404 <main+0x210>
 80013f2:	f1b9 0f03 	cmp.w	r9, #3
 80013f6:	d04d      	beq.n	8001494 <main+0x2a0>
 80013f8:	f1b9 0f00 	cmp.w	r9, #0
 80013fc:	d032      	beq.n	8001464 <main+0x270>
 80013fe:	f04f 0901 	mov.w	r9, #1
 8001402:	e74f      	b.n	80012a4 <main+0xb0>
    			if (button_press)
 8001404:	2d00      	cmp	r5, #0
 8001406:	f43f af4d 	beq.w	80012a4 <main+0xb0>
    				state = DISPLAY_IMPACT;
 800140a:	2303      	movs	r3, #3
    				pwm_driver_set(GREEN, 0);
 800140c:	2100      	movs	r1, #0
 800140e:	200c      	movs	r0, #12
    				state = DISPLAY_IMPACT;
 8001410:	f888 3000 	strb.w	r3, [r8]
    				pwm_driver_set(GREEN, 0);
 8001414:	f000 f8b0 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(ORANGE, 0);
 8001418:	2100      	movs	r1, #0
 800141a:	200d      	movs	r0, #13
 800141c:	f000 f8ac 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(RED, 0);
 8001420:	2100      	movs	r1, #0
 8001422:	200e      	movs	r0, #14
 8001424:	f000 f8a8 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(BLUE, 0);
 8001428:	2100      	movs	r1, #0
 800142a:	200f      	movs	r0, #15
 800142c:	f000 f8a4 	bl	8001578 <pwm_driver_set>
    				button_press = 0;
 8001430:	2500      	movs	r5, #0
 8001432:	e737      	b.n	80012a4 <main+0xb0>
    			if (impact_flag){
 8001434:	f1b9 0f00 	cmp.w	r9, #0
 8001438:	d12c      	bne.n	8001494 <main+0x2a0>
    			if (button_press)
 800143a:	b9b5      	cbnz	r5, 800146a <main+0x276>
 800143c:	46a9      	mov	r9, r5
 800143e:	e731      	b.n	80012a4 <main+0xb0>
    				pwm_driver_set(ORANGE, 100);
 8001440:	2164      	movs	r1, #100	; 0x64
    				pwm_driver_set(ORANGE, 0);
 8001442:	200d      	movs	r0, #13
 8001444:	f000 f898 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(BLUE, 0);
 8001448:	2100      	movs	r1, #0
 800144a:	200f      	movs	r0, #15
 800144c:	f000 f894 	bl	8001578 <pwm_driver_set>
 8001450:	e73b      	b.n	80012ca <main+0xd6>
    				pwm_driver_set(RED, 100);
 8001452:	2164      	movs	r1, #100	; 0x64
    				pwm_driver_set(RED, 0);
 8001454:	200e      	movs	r0, #14
 8001456:	f000 f88f 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(GREEN, 0);
 800145a:	4651      	mov	r1, sl
 800145c:	200c      	movs	r0, #12
 800145e:	f000 f88b 	bl	8001578 <pwm_driver_set>
 8001462:	e792      	b.n	800138a <main+0x196>
    		switch(state)
 8001464:	f04f 0901 	mov.w	r9, #1
 8001468:	e75a      	b.n	8001320 <main+0x12c>
    				state = DISPLAY_OFF;
 800146a:	2500      	movs	r5, #0
    				pwm_driver_set(GREEN, 0);
 800146c:	4629      	mov	r1, r5
 800146e:	200c      	movs	r0, #12
    				state = DISPLAY_OFF;
 8001470:	f888 5000 	strb.w	r5, [r8]
    				pwm_driver_set(GREEN, 0);
 8001474:	f000 f880 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(ORANGE, 0);
 8001478:	4629      	mov	r1, r5
 800147a:	200d      	movs	r0, #13
 800147c:	f000 f87c 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(RED, 0);
 8001480:	4629      	mov	r1, r5
 8001482:	200e      	movs	r0, #14
 8001484:	f000 f878 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(BLUE, 0);
 8001488:	4629      	mov	r1, r5
 800148a:	200f      	movs	r0, #15
 800148c:	f000 f874 	bl	8001578 <pwm_driver_set>
    				button_press = 0;
 8001490:	46a9      	mov	r9, r5
 8001492:	e707      	b.n	80012a4 <main+0xb0>
    				pwm_driver_set(GREEN, 100);
 8001494:	2164      	movs	r1, #100	; 0x64
 8001496:	200c      	movs	r0, #12
 8001498:	f000 f86e 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(ORANGE, 100);
 800149c:	2164      	movs	r1, #100	; 0x64
 800149e:	200d      	movs	r0, #13
 80014a0:	f000 f86a 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(RED, 100);
 80014a4:	2164      	movs	r1, #100	; 0x64
 80014a6:	200e      	movs	r0, #14
 80014a8:	f000 f866 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(BLUE, 100);
 80014ac:	2164      	movs	r1, #100	; 0x64
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 f862 	bl	8001578 <pwm_driver_set>
 80014b4:	e7c1      	b.n	800143a <main+0x246>
    				pwm_driver_set(ORANGE, 0);
 80014b6:	2100      	movs	r1, #0
 80014b8:	200d      	movs	r0, #13
 80014ba:	f000 f85d 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(BLUE, 100);
 80014be:	2164      	movs	r1, #100	; 0x64
 80014c0:	200f      	movs	r0, #15
 80014c2:	f000 f859 	bl	8001578 <pwm_driver_set>
 80014c6:	e700      	b.n	80012ca <main+0xd6>
    				pwm_driver_set(RED, 0);
 80014c8:	4651      	mov	r1, sl
 80014ca:	200e      	movs	r0, #14
 80014cc:	f000 f854 	bl	8001578 <pwm_driver_set>
    				pwm_driver_set(GREEN, 100);
 80014d0:	2164      	movs	r1, #100	; 0x64
 80014d2:	200c      	movs	r0, #12
 80014d4:	f000 f850 	bl	8001578 <pwm_driver_set>
 80014d8:	e757      	b.n	800138a <main+0x196>
    				pwm_driver_set(ORANGE, 0);
 80014da:	200d      	movs	r0, #13
 80014dc:	f000 f84c 	bl	8001578 <pwm_driver_set>
    				brightness = (int16_t)acc_readings.y * 100 / (uint16_t)11586;
 80014e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80014e4:	4a18      	ldr	r2, [pc, #96]	; (8001548 <main+0x354>)
 80014e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	fb82 2103 	smull	r2, r1, r2, r3
 80014f4:	17db      	asrs	r3, r3, #31
 80014f6:	ebc3 3121 	rsb	r1, r3, r1, asr #12
    				pwm_driver_set(BLUE, brightness);
 80014fa:	b2c9      	uxtb	r1, r1
 80014fc:	200f      	movs	r0, #15
 80014fe:	f000 f83b 	bl	8001578 <pwm_driver_set>
 8001502:	e6e2      	b.n	80012ca <main+0xd6>
    				pwm_driver_set(RED, 0);
 8001504:	200e      	movs	r0, #14
 8001506:	f000 f837 	bl	8001578 <pwm_driver_set>
    				brightness = (int16_t)acc_readings.x * 100 / (uint16_t)11586;
 800150a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <main+0x354>)
 8001510:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001514:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	fb82 2103 	smull	r2, r1, r2, r3
 800151e:	17db      	asrs	r3, r3, #31
 8001520:	ebc3 3121 	rsb	r1, r3, r1, asr #12
    				pwm_driver_set(GREEN, brightness);
 8001524:	b2c9      	uxtb	r1, r1
 8001526:	200c      	movs	r0, #12
 8001528:	f000 f826 	bl	8001578 <pwm_driver_set>
 800152c:	e72d      	b.n	800138a <main+0x196>
		printf("AccInit Successful!");
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <main+0x35c>)
 8001530:	f001 ff06 	bl	8003340 <iprintf>
 8001534:	e69b      	b.n	800126e <main+0x7a>
 8001536:	bf00      	nop
 8001538:	40020c14 	.word	0x40020c14
 800153c:	200001f9 	.word	0x200001f9
 8001540:	200001fa 	.word	0x200001fa
 8001544:	40020000 	.word	0x40020000
 8001548:	5a80f33b 	.word	0x5a80f33b
 800154c:	08005470 	.word	0x08005470
 8001550:	0800545c 	.word	0x0800545c
 8001554:	200001f8 	.word	0x200001f8

08001558 <pwm_driver_init>:
};

static struct pwm_state state;

void pwm_driver_init(LED_t * ch0, LED_t * ch1, LED_t * ch2, LED_t * ch3)
{
 8001558:	b430      	push	{r4, r5}
	state.counter = 0;
 800155a:	4c06      	ldr	r4, [pc, #24]	; (8001574 <pwm_driver_init+0x1c>)
 800155c:	2500      	movs	r5, #0
	state.ch0_compare = 0;
	state.ch1_compare = 0;
	state.ch2_compare = 0;
	state.ch3_compare = 0;
	state.ch0 = ch0;
	state.ch1 = ch1;
 800155e:	e9c4 0105 	strd	r0, r1, [r4, #20]
	state.ch2 = ch2;
	state.ch3 = ch3;
 8001562:	e9c4 2307 	strd	r2, r3, [r4, #28]
	state.ch0_compare = 0;
 8001566:	e9c4 5500 	strd	r5, r5, [r4]
	state.ch2_compare = 0;
 800156a:	e9c4 5502 	strd	r5, r5, [r4, #8]
	state.ch3_compare = 0;
 800156e:	6125      	str	r5, [r4, #16]
}
 8001570:	bc30      	pop	{r4, r5}
 8001572:	4770      	bx	lr
 8001574:	200001fc 	.word	0x200001fc

08001578 <pwm_driver_set>:

void pwm_driver_set(uint8_t channel, uint8_t value)
{
	if (value > PWM_MAX){
 8001578:	2964      	cmp	r1, #100	; 0x64
 800157a:	f1a0 000c 	sub.w	r0, r0, #12
 800157e:	bf28      	it	cs
 8001580:	2164      	movcs	r1, #100	; 0x64
		value = PWM_MAX;
	}
	switch (channel)
 8001582:	2803      	cmp	r0, #3
 8001584:	d805      	bhi.n	8001592 <pwm_driver_set+0x1a>
 8001586:	e8df f000 	tbb	[pc, r0]
 800158a:	0805      	.short	0x0805
 800158c:	020b      	.short	0x020b
	break;
	case(RED):
			state.ch2_compare = value;
	break;
	case(BLUE):
			state.ch3_compare = value;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <pwm_driver_set+0x30>)
 8001590:	6119      	str	r1, [r3, #16]
	break;
	}
}
 8001592:	4770      	bx	lr
			state.ch0_compare = value;
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <pwm_driver_set+0x30>)
 8001596:	6059      	str	r1, [r3, #4]
	break;
 8001598:	4770      	bx	lr
			state.ch1_compare = value;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <pwm_driver_set+0x30>)
 800159c:	6099      	str	r1, [r3, #8]
	break;
 800159e:	4770      	bx	lr
			state.ch2_compare = value;
 80015a0:	4b01      	ldr	r3, [pc, #4]	; (80015a8 <pwm_driver_set+0x30>)
 80015a2:	60d9      	str	r1, [r3, #12]
	break;
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200001fc 	.word	0x200001fc

080015ac <pwm_driver_update>:

void pwm_driver_update(void)
{
 80015ac:	b510      	push	{r4, lr}
	if (state.ch0_compare > state.counter)
 80015ae:	4c1e      	ldr	r4, [pc, #120]	; (8001628 <pwm_driver_update+0x7c>)
 80015b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80015b4:	429a      	cmp	r2, r3
	{
		led_on(state.ch0);
 80015b6:	6960      	ldr	r0, [r4, #20]
	if (state.ch0_compare > state.counter)
 80015b8:	d91d      	bls.n	80015f6 <pwm_driver_update+0x4a>
		led_on(state.ch0);
 80015ba:	f7ff fd6b 	bl	8001094 <led_on>
	}
	else{
		led_off(state.ch0);
	}
	if (state.ch1_compare > state.counter)
 80015be:	68a2      	ldr	r2, [r4, #8]
 80015c0:	6823      	ldr	r3, [r4, #0]
	{
		led_on(state.ch1);
 80015c2:	69a0      	ldr	r0, [r4, #24]
	if (state.ch1_compare > state.counter)
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d91d      	bls.n	8001604 <pwm_driver_update+0x58>
		led_on(state.ch1);
 80015c8:	f7ff fd64 	bl	8001094 <led_on>
	}
	else{
		led_off(state.ch1);
	}
	if (state.ch2_compare > state.counter)
 80015cc:	68e2      	ldr	r2, [r4, #12]
 80015ce:	6823      	ldr	r3, [r4, #0]
	{
		led_on(state.ch2);
 80015d0:	69e0      	ldr	r0, [r4, #28]
	if (state.ch2_compare > state.counter)
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d91d      	bls.n	8001612 <pwm_driver_update+0x66>
		led_on(state.ch2);
 80015d6:	f7ff fd5d 	bl	8001094 <led_on>
	}
	else{
		led_off(state.ch2);
	}
	if (state.ch3_compare > state.counter)
 80015da:	6922      	ldr	r2, [r4, #16]
 80015dc:	6823      	ldr	r3, [r4, #0]
	{
		led_on(state.ch3);
 80015de:	6a20      	ldr	r0, [r4, #32]
	if (state.ch3_compare > state.counter)
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d91d      	bls.n	8001620 <pwm_driver_update+0x74>
		led_on(state.ch3);
 80015e4:	f7ff fd56 	bl	8001094 <led_on>
	}
	else{
		led_off(state.ch3);
	}

	if ((state.counter++) > PWM_MAX)
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	bf94      	ite	ls
 80015ee:	3301      	addls	r3, #1
	{
		state.counter = 0;
 80015f0:	2300      	movhi	r3, #0
 80015f2:	6023      	str	r3, [r4, #0]
	}
}
 80015f4:	bd10      	pop	{r4, pc}
		led_off(state.ch0);
 80015f6:	f7ff fd43 	bl	8001080 <led_off>
	if (state.ch1_compare > state.counter)
 80015fa:	68a2      	ldr	r2, [r4, #8]
 80015fc:	6823      	ldr	r3, [r4, #0]
		led_on(state.ch1);
 80015fe:	69a0      	ldr	r0, [r4, #24]
	if (state.ch1_compare > state.counter)
 8001600:	429a      	cmp	r2, r3
 8001602:	d8e1      	bhi.n	80015c8 <pwm_driver_update+0x1c>
		led_off(state.ch1);
 8001604:	f7ff fd3c 	bl	8001080 <led_off>
	if (state.ch2_compare > state.counter)
 8001608:	68e2      	ldr	r2, [r4, #12]
 800160a:	6823      	ldr	r3, [r4, #0]
		led_on(state.ch2);
 800160c:	69e0      	ldr	r0, [r4, #28]
	if (state.ch2_compare > state.counter)
 800160e:	429a      	cmp	r2, r3
 8001610:	d8e1      	bhi.n	80015d6 <pwm_driver_update+0x2a>
		led_off(state.ch2);
 8001612:	f7ff fd35 	bl	8001080 <led_off>
	if (state.ch3_compare > state.counter)
 8001616:	6922      	ldr	r2, [r4, #16]
 8001618:	6823      	ldr	r3, [r4, #0]
		led_on(state.ch3);
 800161a:	6a20      	ldr	r0, [r4, #32]
	if (state.ch3_compare > state.counter)
 800161c:	429a      	cmp	r2, r3
 800161e:	d8e1      	bhi.n	80015e4 <pwm_driver_update+0x38>
		led_off(state.ch3);
 8001620:	f7ff fd2e 	bl	8001080 <led_off>
 8001624:	e7e0      	b.n	80015e8 <pwm_driver_update+0x3c>
 8001626:	bf00      	nop
 8001628:	200001fc 	.word	0x200001fc

0800162c <SPIAcc_Init>:
#include "stm32f4xx_it.h"
#include "stm32f4xx_hal_adc.h"
SPI_HandleTypeDef hspi1;


void SPIAcc_Init(void){
 800162c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001630:	b088      	sub	sp, #32
            GPIO_InitTypeDef GPIO_InitTypeDefStruct;
            // Enable clock to SPI1
            hspi1.Instance = SPI1;
 8001632:	4c2e      	ldr	r4, [pc, #184]	; (80016ec <SPIAcc_Init+0xc0>)
            __HAL_RCC_SPI1_CLK_ENABLE();
 8001634:	4e2e      	ldr	r6, [pc, #184]	; (80016f0 <SPIAcc_Init+0xc4>)
            hspi1.Instance = SPI1;
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <SPIAcc_Init+0xc8>)
 8001638:	6023      	str	r3, [r4, #0]
            __HAL_RCC_SPI1_CLK_ENABLE();
 800163a:	2500      	movs	r5, #0
 800163c:	9500      	str	r5, [sp, #0]
 800163e:	6c73      	ldr	r3, [r6, #68]	; 0x44
            // Setup SPI to be master
            hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001640:	60a5      	str	r5, [r4, #8]
            __HAL_RCC_SPI1_CLK_ENABLE();
 8001642:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001646:	6473      	str	r3, [r6, #68]	; 0x44
 8001648:	6c73      	ldr	r3, [r6, #68]	; 0x44
            hspi1.Init.Mode = SPI_MODE_MASTER;
            hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800164a:	60e5      	str	r5, [r4, #12]
            __HAL_RCC_SPI1_CLK_ENABLE();
 800164c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
            hspi1.Init.Mode = SPI_MODE_MASTER;
 8001650:	f44f 7082 	mov.w	r0, #260	; 0x104
            __HAL_RCC_SPI1_CLK_ENABLE();
 8001654:	9300      	str	r3, [sp, #0]
            hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
            hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
            hspi1.Init.NSS = SPI_NSS_SOFT;
 8001656:	f44f 7100 	mov.w	r1, #512	; 0x200
            hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800165a:	2238      	movs	r2, #56	; 0x38
            hspi1.Init.Mode = SPI_MODE_MASTER;
 800165c:	6060      	str	r0, [r4, #4]
            hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
            hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
            hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
            hspi1.Init.CRCPolynomial = 10;
 800165e:	230a      	movs	r3, #10
            HAL_SPI_Init(&hspi1);
 8001660:	4620      	mov	r0, r4
            hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001662:	e9c4 1206 	strd	r1, r2, [r4, #24]
            hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001666:	e9c4 5504 	strd	r5, r5, [r4, #16]
            hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800166a:	e9c4 5508 	strd	r5, r5, [r4, #32]
            hspi1.Init.CRCPolynomial = 10;
 800166e:	62e3      	str	r3, [r4, #44]	; 0x2c
            hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001670:	62a5      	str	r5, [r4, #40]	; 0x28
            __HAL_RCC_SPI1_CLK_ENABLE();
 8001672:	9b00      	ldr	r3, [sp, #0]
            // Pin E3 is SPI_CS (chip select) 
            GPIO_InitTypeDefStruct.Pin = GPIO_PIN_3;
            GPIO_InitTypeDefStruct.Mode = GPIO_MODE_OUTPUT_PP;
            GPIO_InitTypeDefStruct.Speed = GPIO_SPEED_FREQ_HIGH;
            GPIO_InitTypeDefStruct.Pull = GPIO_PULLUP;
            HAL_GPIO_Init(GPIOE, &GPIO_InitTypeDefStruct);
 8001674:	4f20      	ldr	r7, [pc, #128]	; (80016f8 <SPIAcc_Init+0xcc>)
            HAL_SPI_Init(&hspi1);
 8001676:	f000 fe97 	bl	80023a8 <HAL_SPI_Init>
            __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	9501      	str	r5, [sp, #4]
 800167c:	6b33      	ldr	r3, [r6, #48]	; 0x30
            HAL_GPIO_Init(GPIOA, &GPIO_InitTypeDefStruct);
 800167e:	481f      	ldr	r0, [pc, #124]	; (80016fc <SPIAcc_Init+0xd0>)
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6333      	str	r3, [r6, #48]	; 0x30
 8001686:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	9b01      	ldr	r3, [sp, #4]
            __HAL_RCC_GPIOE_CLK_ENABLE();
 8001690:	9502      	str	r5, [sp, #8]
 8001692:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	6333      	str	r3, [r6, #48]	; 0x30
 800169a:	6b33      	ldr	r3, [r6, #48]	; 0x30
            GPIO_InitTypeDefStruct.Pull = GPIO_NOPULL;
 800169c:	9505      	str	r5, [sp, #20]
            __HAL_RCC_GPIOE_CLK_ENABLE();
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	9302      	str	r3, [sp, #8]
            GPIO_InitTypeDefStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_6;
 80016a4:	23e0      	movs	r3, #224	; 0xe0
            GPIO_InitTypeDefStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2602      	movs	r6, #2
            HAL_GPIO_Init(GPIOA, &GPIO_InitTypeDefStruct);
 80016a8:	a903      	add	r1, sp, #12
            GPIO_InitTypeDefStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_6;
 80016aa:	9303      	str	r3, [sp, #12]
            GPIO_InitTypeDefStruct.Alternate = GPIO_AF5_SPI1;
 80016ac:	2305      	movs	r3, #5
 80016ae:	e9cd 6306 	strd	r6, r3, [sp, #24]
            __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b2:	9a02      	ldr	r2, [sp, #8]
            GPIO_InitTypeDefStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	9604      	str	r6, [sp, #16]
            GPIO_InitTypeDefStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	2501      	movs	r5, #1
            HAL_GPIO_Init(GPIOA, &GPIO_InitTypeDefStruct);
 80016b8:	f000 f9f2 	bl	8001aa0 <HAL_GPIO_Init>
            GPIO_InitTypeDefStruct.Pin = GPIO_PIN_3;
 80016bc:	f04f 0808 	mov.w	r8, #8
            HAL_GPIO_Init(GPIOE, &GPIO_InitTypeDefStruct);
 80016c0:	a903      	add	r1, sp, #12
 80016c2:	4638      	mov	r0, r7
            GPIO_InitTypeDefStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	e9cd 8503 	strd	r8, r5, [sp, #12]
            GPIO_InitTypeDefStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	9606      	str	r6, [sp, #24]
            GPIO_InitTypeDefStruct.Pull = GPIO_PULLUP;
 80016ca:	9505      	str	r5, [sp, #20]
            HAL_GPIO_Init(GPIOE, &GPIO_InitTypeDefStruct);
 80016cc:	f000 f9e8 	bl	8001aa0 <HAL_GPIO_Init>
            // Hold CS high 
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80016d0:	462a      	mov	r2, r5
 80016d2:	4641      	mov	r1, r8
 80016d4:	4638      	mov	r0, r7
 80016d6:	f000 fb07 	bl	8001ce8 <HAL_GPIO_WritePin>
            // Enable the SPI module
            __HAL_SPI_ENABLE(&hspi1);
 80016da:	6822      	ldr	r2, [r4, #0]
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	b008      	add	sp, #32
 80016e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ea:	bf00      	nop
 80016ec:	200002ac 	.word	0x200002ac
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40013000 	.word	0x40013000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40020000 	.word	0x40020000

08001700 <SPIAcc_Send>:
 

void SPIAcc_Send(uint8_t address, uint8_t* data, uint8_t size){
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t spiReg = address;
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001702:	4e10      	ldr	r6, [pc, #64]	; (8001744 <SPIAcc_Send+0x44>)

    HAL_SPI_Transmit(&hspi1, &spiReg, 1, 10);
 8001704:	4f10      	ldr	r7, [pc, #64]	; (8001748 <SPIAcc_Send+0x48>)
void SPIAcc_Send(uint8_t address, uint8_t* data, uint8_t size){
 8001706:	b083      	sub	sp, #12
 8001708:	4603      	mov	r3, r0
 800170a:	460c      	mov	r4, r1
 800170c:	4615      	mov	r5, r2
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800170e:	4630      	mov	r0, r6
 8001710:	2200      	movs	r2, #0
 8001712:	2108      	movs	r1, #8
	uint8_t spiReg = address;
 8001714:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001718:	f000 fae6 	bl	8001ce8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &spiReg, 1, 10);
 800171c:	f10d 0107 	add.w	r1, sp, #7
 8001720:	4638      	mov	r0, r7
 8001722:	230a      	movs	r3, #10
 8001724:	2201      	movs	r2, #1
 8001726:	f000 fe7f 	bl	8002428 <HAL_SPI_Transmit>

    HAL_SPI_Transmit(&hspi1, data, size, 10);
 800172a:	462a      	mov	r2, r5
 800172c:	4621      	mov	r1, r4
 800172e:	230a      	movs	r3, #10
 8001730:	4638      	mov	r0, r7
 8001732:	f000 fe79 	bl	8002428 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8001736:	4630      	mov	r0, r6
 8001738:	2201      	movs	r2, #1
 800173a:	2108      	movs	r1, #8
 800173c:	f000 fad4 	bl	8001ce8 <HAL_GPIO_WritePin>
}
 8001740:	b003      	add	sp, #12
 8001742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	200002ac 	.word	0x200002ac

0800174c <SPIAcc_Get>:
 

void SPIAcc_Get(uint8_t address, uint8_t* data, uint8_t size){
 800174c:	b530      	push	{r4, r5, lr}
 800174e:	b083      	sub	sp, #12

	uint8_t spiBuf[4];
	spiBuf[0] = address | 0x80;
 8001750:	f060 037f 	orn	r3, r0, #127	; 0x7f
void SPIAcc_Get(uint8_t address, uint8_t* data, uint8_t size){
 8001754:	4615      	mov	r5, r2
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <SPIAcc_Get+0x5c>)
	spiBuf[0] = address | 0x80;
 8001758:	f88d 3004 	strb.w	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
void SPIAcc_Get(uint8_t address, uint8_t* data, uint8_t size){
 800175e:	460c      	mov	r4, r1
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001760:	2108      	movs	r1, #8
 8001762:	f000 fac1 	bl	8001ce8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, spiBuf, 1, 100);
 8001766:	a901      	add	r1, sp, #4
 8001768:	2364      	movs	r3, #100	; 0x64
 800176a:	2201      	movs	r2, #1
 800176c:	480f      	ldr	r0, [pc, #60]	; (80017ac <SPIAcc_Get+0x60>)
 800176e:	f000 fe5b 	bl	8002428 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, spiBuf, size, 100);
 8001772:	462a      	mov	r2, r5
 8001774:	a901      	add	r1, sp, #4
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <SPIAcc_Get+0x60>)
 800177a:	f001 f80d 	bl	8002798 <HAL_SPI_Receive>


    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800177e:	480a      	ldr	r0, [pc, #40]	; (80017a8 <SPIAcc_Get+0x5c>)
 8001780:	2201      	movs	r2, #1
 8001782:	2108      	movs	r1, #8
 8001784:	f000 fab0 	bl	8001ce8 <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8001788:	f015 0503 	ands.w	r5, r5, #3
 800178c:	d00a      	beq.n	80017a4 <SPIAcc_Get+0x58>
 800178e:	3d01      	subs	r5, #1
 8001790:	fa54 f385 	uxtab	r3, r4, r5
 8001794:	aa01      	add	r2, sp, #4
 8001796:	1e61      	subs	r1, r4, #1
	{
		data[i] = spiBuf[i];
 8001798:	f812 0b01 	ldrb.w	r0, [r2], #1
 800179c:	f801 0f01 	strb.w	r0, [r1, #1]!
	for(uint8_t i=0; i<(size&0x3); i++)
 80017a0:	4299      	cmp	r1, r3
 80017a2:	d1f9      	bne.n	8001798 <SPIAcc_Get+0x4c>
	}

}
 80017a4:	b003      	add	sp, #12
 80017a6:	bd30      	pop	{r4, r5, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	200002ac 	.word	0x200002ac

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_MspInit+0x34>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	9100      	str	r1, [sp, #0]
 80017b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
 80017c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	9101      	str	r1, [sp, #4]
 80017cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	b002      	add	sp, #8
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler>
 80017ea:	bf00      	nop

080017ec <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <HardFault_Handler>
 80017ee:	bf00      	nop

080017f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler>
 80017f2:	bf00      	nop

080017f4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <BusFault_Handler>
 80017f6:	bf00      	nop

080017f8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler>
 80017fa:	bf00      	nop

080017fc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <DebugMon_Handler>:
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <PendSV_Handler>:
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001808:	f000 b8c4 	b.w	8001994 <HAL_IncTick>

0800180c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800180c:	2001      	movs	r0, #1
 800180e:	4770      	bx	lr

08001810 <_kill>:

int _kill(int pid, int sig)
{
 8001810:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001812:	f001 f8f9 	bl	8002a08 <__errno>
 8001816:	2316      	movs	r3, #22
 8001818:	6003      	str	r3, [r0, #0]
	return -1;
}
 800181a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800181e:	bd08      	pop	{r3, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001822:	f001 f8f1 	bl	8002a08 <__errno>
 8001826:	2316      	movs	r3, #22
 8001828:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800182a:	e7fe      	b.n	800182a <_exit+0xa>

0800182c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	1e16      	subs	r6, r2, #0
 8001830:	dd07      	ble.n	8001842 <_read+0x16>
 8001832:	460c      	mov	r4, r1
 8001834:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001836:	f3af 8000 	nop.w
 800183a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	42a5      	cmp	r5, r4
 8001840:	d1f9      	bne.n	8001836 <_read+0xa>
	}

return len;
}
 8001842:	4630      	mov	r0, r6
 8001844:	bd70      	pop	{r4, r5, r6, pc}
 8001846:	bf00      	nop

08001848 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001854:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001856:	2000      	movs	r0, #0
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop

0800185c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800185c:	2001      	movs	r0, #1
 800185e:	4770      	bx	lr

08001860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001860:	2000      	movs	r0, #0
 8001862:	4770      	bx	lr

08001864 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001866:	4a0d      	ldr	r2, [pc, #52]	; (800189c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001868:	680b      	ldr	r3, [r1, #0]
{
 800186a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4c0c      	ldr	r4, [pc, #48]	; (80018a0 <_sbrk+0x3c>)
 800186e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001870:	b12b      	cbz	r3, 800187e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4418      	add	r0, r3
 8001874:	4290      	cmp	r0, r2
 8001876:	d807      	bhi.n	8001888 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001878:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <_sbrk+0x40>)
 8001880:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4418      	add	r0, r3
 8001884:	4290      	cmp	r0, r2
 8001886:	d9f7      	bls.n	8001878 <_sbrk+0x14>
    errno = ENOMEM;
 8001888:	f001 f8be 	bl	8002a08 <__errno>
 800188c:	230c      	movs	r3, #12
 800188e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd10      	pop	{r4, pc}
 8001898:	20000220 	.word	0x20000220
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000318 	.word	0x20000318

080018a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <SystemInit+0x18>)
 80018aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80018b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018ba:	6099      	str	r1, [r3, #8]
#endif
}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ca:	e003      	b.n	80018d4 <LoopCopyDataInit>

080018cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018d2:	3104      	adds	r1, #4

080018d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018dc:	d3f6      	bcc.n	80018cc <CopyDataInit>
  ldr  r2, =_sbss
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018e0:	e002      	b.n	80018e8 <LoopFillZerobss>

080018e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018e4:	f842 3b04 	str.w	r3, [r2], #4

080018e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018ec:	d3f9      	bcc.n	80018e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ee:	f7ff ffdb 	bl	80018a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f2:	f001 f88f 	bl	8002a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f6:	f7ff fc7d 	bl	80011f4 <main>
  bx  lr    
 80018fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001900:	08005884 	.word	0x08005884
  ldr  r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001908:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800190c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001910:	20000318 	.word	0x20000318

08001914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC_IRQHandler>
	...

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_InitTick+0x3c>)
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_InitTick+0x40>)
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
{
 8001922:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001928:	fbb0 f0f2 	udiv	r0, r0, r2
 800192c:	fbb3 f0f0 	udiv	r0, r3, r0
 8001930:	f000 f89c 	bl	8001a6c <HAL_SYSTICK_Config>
 8001934:	b908      	cbnz	r0, 800193a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	2d0f      	cmp	r5, #15
 8001938:	d901      	bls.n	800193e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800193a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800193c:	bd38      	pop	{r3, r4, r5, pc}
 800193e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	4602      	mov	r2, r0
 8001942:	4629      	mov	r1, r5
 8001944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001948:	f000 f84a 	bl	80019e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_InitTick+0x44>)
 800194e:	4620      	mov	r0, r4
 8001950:	601d      	str	r5, [r3, #0]
}
 8001952:	bd38      	pop	{r3, r4, r5, pc}
 8001954:	20000004 	.word	0x20000004
 8001958:	20000000 	.word	0x20000000
 800195c:	20000008 	.word	0x20000008

08001960 <HAL_Init>:
{
 8001960:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_Init+0x30>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800196a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001972:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800197a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f81b 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff ffc8 	bl	8001918 <HAL_InitTick>
  HAL_MspInit();
 8001988:	f7ff ff12 	bl	80017b0 <HAL_MspInit>
}
 800198c:	2000      	movs	r0, #0
 800198e:	bd08      	pop	{r3, pc}
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_IncTick+0x10>)
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_IncTick+0x14>)
 8001998:	6811      	ldr	r1, [r2, #0]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	440b      	add	r3, r1
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000304 	.word	0x20000304
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019ac:	4b01      	ldr	r3, [pc, #4]	; (80019b4 <HAL_GetTick+0x8>)
 80019ae:	6818      	ldr	r0, [r3, #0]
}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000304 	.word	0x20000304

080019b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4908      	ldr	r1, [pc, #32]	; (80019dc <HAL_NVIC_SetPriorityGrouping+0x24>)
 80019ba:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019be:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c0:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80019c4:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c6:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80019d8:	60cb      	str	r3, [r1, #12]
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_NVIC_SetPriority+0x68>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ea:	f1c3 0507 	rsb	r5, r3, #7
 80019ee:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	bf28      	it	cs
 80019f6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f8:	2c06      	cmp	r4, #6
 80019fa:	d919      	bls.n	8001a30 <HAL_NVIC_SetPriority+0x50>
 80019fc:	3b03      	subs	r3, #3
 80019fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a02:	409c      	lsls	r4, r3
 8001a04:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001a0c:	40ac      	lsls	r4, r5
 8001a0e:	ea21 0104 	bic.w	r1, r1, r4
 8001a12:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001a14:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a16:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001a1a:	db0c      	blt.n	8001a36 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001a20:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a24:	0109      	lsls	r1, r1, #4
 8001a26:	b2c9      	uxtb	r1, r1
 8001a28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a2c:	bc30      	pop	{r4, r5}
 8001a2e:	4770      	bx	lr
 8001a30:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	4613      	mov	r3, r2
 8001a34:	e7e8      	b.n	8001a08 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_NVIC_SetPriority+0x6c>)
 8001a38:	f000 000f 	and.w	r0, r0, #15
 8001a3c:	0109      	lsls	r1, r1, #4
 8001a3e:	4403      	add	r3, r0
 8001a40:	b2c9      	uxtb	r1, r1
 8001a42:	7619      	strb	r1, [r3, #24]
 8001a44:	bc30      	pop	{r4, r5}
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00
 8001a4c:	e000ecfc 	.word	0xe000ecfc

08001a50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a50:	2800      	cmp	r0, #0
 8001a52:	db07      	blt.n	8001a64 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a54:	f000 011f 	and.w	r1, r0, #31
 8001a58:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <HAL_NVIC_EnableIRQ+0x18>)
 8001a5a:	0940      	lsrs	r0, r0, #5
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	408b      	lsls	r3, r1
 8001a60:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	3801      	subs	r0, #1
 8001a6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a72:	d20e      	bcs.n	8001a92 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	4c08      	ldr	r4, [pc, #32]	; (8001a9c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	20f0      	movs	r0, #240	; 0xf0
 8001a7e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a82:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a84:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a86:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8001a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	6019      	str	r1, [r3, #0]
 8001a90:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2001      	movs	r0, #1
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa4:	f8df c234 	ldr.w	ip, [pc, #564]	; 8001cdc <HAL_GPIO_Init+0x23c>
 8001aa8:	680d      	ldr	r5, [r1, #0]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	f8df b234 	ldr.w	fp, [pc, #564]	; 8001ce0 <HAL_GPIO_Init+0x240>
{
 8001aae:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e003      	b.n	8001abc <HAL_GPIO_Init+0x1c>
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	f000 809c 	beq.w	8001bf4 <HAL_GPIO_Init+0x154>
    ioposition = 0x01U << position;
 8001abc:	2201      	movs	r2, #1
 8001abe:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac0:	ea02 0a05 	and.w	sl, r2, r5
    if(iocurrent == ioposition)
 8001ac4:	43aa      	bics	r2, r5
 8001ac6:	d1f5      	bne.n	8001ab4 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac8:	684c      	ldr	r4, [r1, #4]
 8001aca:	f024 0e10 	bic.w	lr, r4, #16
 8001ace:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 8001ad2:	2a01      	cmp	r2, #1
 8001ad4:	ea4f 0643 	mov.w	r6, r3, lsl #1
 8001ad8:	f240 808f 	bls.w	8001bfa <HAL_GPIO_Init+0x15a>
      temp = GPIOx->PUPDR;
 8001adc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ade:	2203      	movs	r2, #3
 8001ae0:	40b2      	lsls	r2, r6
 8001ae2:	ea27 0e02 	bic.w	lr, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae6:	688f      	ldr	r7, [r1, #8]
 8001ae8:	40b7      	lsls	r7, r6
 8001aea:	ea47 070e 	orr.w	r7, r7, lr
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	43d2      	mvns	r2, r2
 8001af0:	9201      	str	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8001af2:	60c7      	str	r7, [r0, #12]
      temp = GPIOx->MODER;
 8001af4:	f8d0 e000 	ldr.w	lr, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af8:	9a01      	ldr	r2, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001afa:	f004 0703 	and.w	r7, r4, #3
 8001afe:	fa07 f606 	lsl.w	r6, r7, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b02:	ea0e 0e02 	and.w	lr, lr, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b06:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b0a:	00e7      	lsls	r7, r4, #3
      GPIOx->MODER = temp;
 8001b0c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b0e:	d5d1      	bpl.n	8001ab4 <HAL_GPIO_Init+0x14>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b10:	2200      	movs	r2, #0
 8001b12:	9203      	str	r2, [sp, #12]
 8001b14:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8001b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b1c:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8001b20:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
 8001b24:	f023 0603 	bic.w	r6, r3, #3
 8001b28:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001b2c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b30:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8001b34:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b36:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3c:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b40:	00bf      	lsls	r7, r7, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	40ba      	lsls	r2, r7
 8001b46:	ea2e 0802 	bic.w	r8, lr, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4a:	4a5e      	ldr	r2, [pc, #376]	; (8001cc4 <HAL_GPIO_Init+0x224>)
 8001b4c:	4290      	cmp	r0, r2
 8001b4e:	d024      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001b50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b54:	4290      	cmp	r0, r2
 8001b56:	f000 808a 	beq.w	8001c6e <HAL_GPIO_Init+0x1ce>
 8001b5a:	4a5b      	ldr	r2, [pc, #364]	; (8001cc8 <HAL_GPIO_Init+0x228>)
 8001b5c:	4290      	cmp	r0, r2
 8001b5e:	f000 808d 	beq.w	8001c7c <HAL_GPIO_Init+0x1dc>
 8001b62:	4a5a      	ldr	r2, [pc, #360]	; (8001ccc <HAL_GPIO_Init+0x22c>)
 8001b64:	4290      	cmp	r0, r2
 8001b66:	f000 8090 	beq.w	8001c8a <HAL_GPIO_Init+0x1ea>
 8001b6a:	4a59      	ldr	r2, [pc, #356]	; (8001cd0 <HAL_GPIO_Init+0x230>)
 8001b6c:	4290      	cmp	r0, r2
 8001b6e:	f000 8093 	beq.w	8001c98 <HAL_GPIO_Init+0x1f8>
 8001b72:	4a58      	ldr	r2, [pc, #352]	; (8001cd4 <HAL_GPIO_Init+0x234>)
 8001b74:	4290      	cmp	r0, r2
 8001b76:	f000 8096 	beq.w	8001ca6 <HAL_GPIO_Init+0x206>
 8001b7a:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_GPIO_Init+0x238>)
 8001b7c:	4290      	cmp	r0, r2
 8001b7e:	f000 8099 	beq.w	8001cb4 <HAL_GPIO_Init+0x214>
 8001b82:	f8df e160 	ldr.w	lr, [pc, #352]	; 8001ce4 <HAL_GPIO_Init+0x244>
 8001b86:	4570      	cmp	r0, lr
 8001b88:	bf0c      	ite	eq
 8001b8a:	f04f 0e07 	moveq.w	lr, #7
 8001b8e:	f04f 0e08 	movne.w	lr, #8
 8001b92:	fa0e f707 	lsl.w	r7, lr, r7
 8001b96:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9a:	f8c6 8008 	str.w	r8, [r6, #8]
        temp = EXTI->IMR;
 8001b9e:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ba2:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	ea6f 070a 	mvn.w	r7, sl
 8001ba8:	bf54      	ite	pl
 8001baa:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8001bac:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8001bb0:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8001bb4:	f8dc 6004 	ldr.w	r6, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb8:	03a2      	lsls	r2, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8001bba:	bf54      	ite	pl
 8001bbc:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001bbe:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->EMR = temp;
 8001bc2:	f8cc 6004 	str.w	r6, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc6:	f8dc 6008 	ldr.w	r6, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bca:	02e2      	lsls	r2, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	bf54      	ite	pl
 8001bce:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8001bd0:	ea4a 0606 	orrmi.w	r6, sl, r6
        }
        EXTI->RTSR = temp;
 8001bd4:	f8cc 6008 	str.w	r6, [ip, #8]

        temp = EXTI->FTSR;
 8001bd8:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bdc:	02a4      	lsls	r4, r4, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001be2:	bf54      	ite	pl
 8001be4:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8001be6:	ea4a 0202 	orrmi.w	r2, sl, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8001bec:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf0:	f47f af64 	bne.w	8001abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf4:	b005      	add	sp, #20
 8001bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8001bfa:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfc:	688a      	ldr	r2, [r1, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bfe:	f04f 0803 	mov.w	r8, #3
 8001c02:	fa08 f806 	lsl.w	r8, r8, r6
 8001c06:	ea27 0908 	bic.w	r9, r7, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	68cf      	ldr	r7, [r1, #12]
 8001c0c:	40b7      	lsls	r7, r6
 8001c0e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001c12:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c14:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c18:	f3c4 1700 	ubfx	r7, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	ea29 090a 	bic.w	r9, r9, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c20:	409f      	lsls	r7, r3
 8001c22:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001c26:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001c28:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2a:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2c:	ea27 0708 	bic.w	r7, r7, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c30:	4317      	orrs	r7, r2
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c32:	f1be 0f02 	cmp.w	lr, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c36:	ea6f 0208 	mvn.w	r2, r8
 8001c3a:	9201      	str	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8001c3c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c3e:	f47f af59 	bne.w	8001af4 <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3U];
 8001c42:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8001c46:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4a:	f003 0707 	and.w	r7, r3, #7
 8001c4e:	00ba      	lsls	r2, r7, #2
        temp = GPIOx->AFR[position >> 3U];
 8001c50:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c56:	f04f 0e0f 	mov.w	lr, #15
 8001c5a:	fa0e fe02 	lsl.w	lr, lr, r2
 8001c5e:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c62:	4097      	lsls	r7, r2
 8001c64:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001c68:	f8c8 7020 	str.w	r7, [r8, #32]
 8001c6c:	e742      	b.n	8001af4 <HAL_GPIO_Init+0x54>
 8001c6e:	f04f 0e01 	mov.w	lr, #1
 8001c72:	fa0e f707 	lsl.w	r7, lr, r7
 8001c76:	ea48 0807 	orr.w	r8, r8, r7
 8001c7a:	e78e      	b.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001c7c:	f04f 0e02 	mov.w	lr, #2
 8001c80:	fa0e f707 	lsl.w	r7, lr, r7
 8001c84:	ea48 0807 	orr.w	r8, r8, r7
 8001c88:	e787      	b.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001c8a:	f04f 0e03 	mov.w	lr, #3
 8001c8e:	fa0e f707 	lsl.w	r7, lr, r7
 8001c92:	ea48 0807 	orr.w	r8, r8, r7
 8001c96:	e780      	b.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001c98:	f04f 0e04 	mov.w	lr, #4
 8001c9c:	fa0e f707 	lsl.w	r7, lr, r7
 8001ca0:	ea48 0807 	orr.w	r8, r8, r7
 8001ca4:	e779      	b.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001ca6:	f04f 0e05 	mov.w	lr, #5
 8001caa:	fa0e f707 	lsl.w	r7, lr, r7
 8001cae:	ea48 0807 	orr.w	r8, r8, r7
 8001cb2:	e772      	b.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001cb4:	f04f 0e06 	mov.w	lr, #6
 8001cb8:	fa0e f707 	lsl.w	r7, lr, r7
 8001cbc:	ea48 0807 	orr.w	r8, r8, r7
 8001cc0:	e76b      	b.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001cc2:	bf00      	nop
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020c00 	.word	0x40020c00
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40021400 	.word	0x40021400
 8001cd8:	40021800 	.word	0x40021800
 8001cdc:	40013c00 	.word	0x40013c00
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40021c00 	.word	0x40021c00

08001ce8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce8:	b902      	cbnz	r2, 8001cec <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	6181      	str	r1, [r0, #24]
  }
}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	f000 819f 	beq.w	8002034 <HAL_RCC_OscConfig+0x344>
{
 8001cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfa:	6803      	ldr	r3, [r0, #0]
 8001cfc:	07dd      	lsls	r5, r3, #31
{
 8001cfe:	b082      	sub	sp, #8
 8001d00:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d02:	d52f      	bpl.n	8001d64 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d04:	49ac      	ldr	r1, [pc, #688]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001d06:	688a      	ldr	r2, [r1, #8]
 8001d08:	f002 020c 	and.w	r2, r2, #12
 8001d0c:	2a04      	cmp	r2, #4
 8001d0e:	f000 80ec 	beq.w	8001eea <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d12:	688a      	ldr	r2, [r1, #8]
 8001d14:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d18:	2a08      	cmp	r2, #8
 8001d1a:	f000 80e2 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1e:	6863      	ldr	r3, [r4, #4]
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	f000 80eb 	beq.w	8001efe <HAL_RCC_OscConfig+0x20e>
 8001d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d2c:	f000 8172 	beq.w	8002014 <HAL_RCC_OscConfig+0x324>
 8001d30:	4da1      	ldr	r5, [pc, #644]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001d32:	682a      	ldr	r2, [r5, #0]
 8001d34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d38:	602a      	str	r2, [r5, #0]
 8001d3a:	682a      	ldr	r2, [r5, #0]
 8001d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d40:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 80e0 	bne.w	8001f08 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fe30 	bl	80019ac <HAL_GetTick>
 8001d4c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff fe2c 	bl	80019ac <HAL_GetTick>
 8001d54:	1b80      	subs	r0, r0, r6
 8001d56:	2864      	cmp	r0, #100	; 0x64
 8001d58:	f200 8100 	bhi.w	8001f5c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5c:	682b      	ldr	r3, [r5, #0]
 8001d5e:	039b      	lsls	r3, r3, #14
 8001d60:	d4f6      	bmi.n	8001d50 <HAL_RCC_OscConfig+0x60>
 8001d62:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d64:	079f      	lsls	r7, r3, #30
 8001d66:	d528      	bpl.n	8001dba <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d68:	4a93      	ldr	r2, [pc, #588]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001d6a:	6891      	ldr	r1, [r2, #8]
 8001d6c:	f011 0f0c 	tst.w	r1, #12
 8001d70:	f000 8090 	beq.w	8001e94 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d74:	6891      	ldr	r1, [r2, #8]
 8001d76:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d7a:	2908      	cmp	r1, #8
 8001d7c:	f000 8086 	beq.w	8001e8c <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d80:	68e3      	ldr	r3, [r4, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8106 	beq.w	8001f94 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d88:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	4e8b      	ldr	r6, [pc, #556]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001d90:	f7ff fe0c 	bl	80019ac <HAL_GetTick>
 8001d94:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d96:	e005      	b.n	8001da4 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d98:	f7ff fe08 	bl	80019ac <HAL_GetTick>
 8001d9c:	1b40      	subs	r0, r0, r5
 8001d9e:	2802      	cmp	r0, #2
 8001da0:	f200 80dc 	bhi.w	8001f5c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da4:	6833      	ldr	r3, [r6, #0]
 8001da6:	0798      	lsls	r0, r3, #30
 8001da8:	d5f6      	bpl.n	8001d98 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	6833      	ldr	r3, [r6, #0]
 8001dac:	6922      	ldr	r2, [r4, #16]
 8001dae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001db2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001db6:	6033      	str	r3, [r6, #0]
 8001db8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dba:	071a      	lsls	r2, r3, #28
 8001dbc:	d452      	bmi.n	8001e64 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbe:	0758      	lsls	r0, r3, #29
 8001dc0:	d52f      	bpl.n	8001e22 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc2:	4a7d      	ldr	r2, [pc, #500]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001dc4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001dc6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001dca:	d07e      	beq.n	8001eca <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8001dcc:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	4e7c      	ldr	r6, [pc, #496]	; (8001fc0 <HAL_RCC_OscConfig+0x2d0>)
 8001dd0:	6833      	ldr	r3, [r6, #0]
 8001dd2:	05d9      	lsls	r1, r3, #23
 8001dd4:	f140 80b2 	bpl.w	8001f3c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd8:	68a3      	ldr	r3, [r4, #8]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	f000 80c2 	beq.w	8001f64 <HAL_RCC_OscConfig+0x274>
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	f000 8129 	beq.w	8002038 <HAL_RCC_OscConfig+0x348>
 8001de6:	4e74      	ldr	r6, [pc, #464]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001de8:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	6732      	str	r2, [r6, #112]	; 0x70
 8001df0:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001df2:	f022 0204 	bic.w	r2, r2, #4
 8001df6:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 80b8 	bne.w	8001f6e <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fdd5 	bl	80019ac <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e06:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e005      	b.n	8001e16 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7ff fdcf 	bl	80019ac <HAL_GetTick>
 8001e0e:	1bc0      	subs	r0, r0, r7
 8001e10:	4540      	cmp	r0, r8
 8001e12:	f200 80a3 	bhi.w	8001f5c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e16:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001e18:	0798      	lsls	r0, r3, #30
 8001e1a:	d4f6      	bmi.n	8001e0a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	f040 8103 	bne.w	8002028 <HAL_RCC_OscConfig+0x338>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e22:	69a0      	ldr	r0, [r4, #24]
 8001e24:	b1d0      	cbz	r0, 8001e5c <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e26:	4d64      	ldr	r5, [pc, #400]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001e28:	68ab      	ldr	r3, [r5, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	f000 80cc 	beq.w	8001fcc <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e34:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <HAL_RCC_OscConfig+0x2d4>)
 8001e36:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e38:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3c:	f000 8106 	beq.w	800204c <HAL_RCC_OscConfig+0x35c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fdb4 	bl	80019ac <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e44:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001e46:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e48:	e005      	b.n	8001e56 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7ff fdaf 	bl	80019ac <HAL_GetTick>
 8001e4e:	1b40      	subs	r0, r0, r5
 8001e50:	2802      	cmp	r0, #2
 8001e52:	f200 8083 	bhi.w	8001f5c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	019b      	lsls	r3, r3, #6
 8001e5a:	d4f6      	bmi.n	8001e4a <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001e5c:	2000      	movs	r0, #0
}
 8001e5e:	b002      	add	sp, #8
 8001e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e64:	6963      	ldr	r3, [r4, #20]
 8001e66:	b303      	cbz	r3, 8001eaa <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	4e53      	ldr	r6, [pc, #332]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e70:	f7ff fd9c 	bl	80019ac <HAL_GetTick>
 8001e74:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	e004      	b.n	8001e82 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fd98 	bl	80019ac <HAL_GetTick>
 8001e7c:	1b40      	subs	r0, r0, r5
 8001e7e:	2802      	cmp	r0, #2
 8001e80:	d86c      	bhi.n	8001f5c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e82:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001e84:	079b      	lsls	r3, r3, #30
 8001e86:	d5f7      	bpl.n	8001e78 <HAL_RCC_OscConfig+0x188>
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	e798      	b.n	8001dbe <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8c:	6852      	ldr	r2, [r2, #4]
 8001e8e:	0256      	lsls	r6, r2, #9
 8001e90:	f53f af76 	bmi.w	8001d80 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e94:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	0795      	lsls	r5, r2, #30
 8001e9a:	d543      	bpl.n	8001f24 <HAL_RCC_OscConfig+0x234>
 8001e9c:	68e2      	ldr	r2, [r4, #12]
 8001e9e:	2a01      	cmp	r2, #1
 8001ea0:	d040      	beq.n	8001f24 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
}
 8001ea4:	b002      	add	sp, #8
 8001ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001eaa:	4a47      	ldr	r2, [pc, #284]	; (8001fc8 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eac:	4e42      	ldr	r6, [pc, #264]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8001eae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fd7c 	bl	80019ac <HAL_GetTick>
 8001eb4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb6:	e004      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fd78 	bl	80019ac <HAL_GetTick>
 8001ebc:	1b40      	subs	r0, r0, r5
 8001ebe:	2802      	cmp	r0, #2
 8001ec0:	d84c      	bhi.n	8001f5c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001ec4:	079f      	lsls	r7, r3, #30
 8001ec6:	d4f7      	bmi.n	8001eb8 <HAL_RCC_OscConfig+0x1c8>
 8001ec8:	e7de      	b.n	8001e88 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ede:	2501      	movs	r5, #1
 8001ee0:	e775      	b.n	8001dce <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee2:	684a      	ldr	r2, [r1, #4]
 8001ee4:	0250      	lsls	r0, r2, #9
 8001ee6:	f57f af1a 	bpl.w	8001d1e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eea:	4a33      	ldr	r2, [pc, #204]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	0391      	lsls	r1, r2, #14
 8001ef0:	f57f af38 	bpl.w	8001d64 <HAL_RCC_OscConfig+0x74>
 8001ef4:	6862      	ldr	r2, [r4, #4]
 8001ef6:	2a00      	cmp	r2, #0
 8001ef8:	f47f af34 	bne.w	8001d64 <HAL_RCC_OscConfig+0x74>
 8001efc:	e7d1      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efe:	4a2e      	ldr	r2, [pc, #184]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001f00:	6813      	ldr	r3, [r2, #0]
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f08:	f7ff fd50 	bl	80019ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0c:	4e2a      	ldr	r6, [pc, #168]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001f0e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f10:	e004      	b.n	8001f1c <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f12:	f7ff fd4b 	bl	80019ac <HAL_GetTick>
 8001f16:	1b40      	subs	r0, r0, r5
 8001f18:	2864      	cmp	r0, #100	; 0x64
 8001f1a:	d81f      	bhi.n	8001f5c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1c:	6833      	ldr	r3, [r6, #0]
 8001f1e:	039a      	lsls	r2, r3, #14
 8001f20:	d5f7      	bpl.n	8001f12 <HAL_RCC_OscConfig+0x222>
 8001f22:	e71e      	b.n	8001d62 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4924      	ldr	r1, [pc, #144]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001f26:	6920      	ldr	r0, [r4, #16]
 8001f28:	680a      	ldr	r2, [r1, #0]
 8001f2a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001f2e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001f32:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f34:	071a      	lsls	r2, r3, #28
 8001f36:	f57f af42 	bpl.w	8001dbe <HAL_RCC_OscConfig+0xce>
 8001f3a:	e793      	b.n	8001e64 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3c:	6833      	ldr	r3, [r6, #0]
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f44:	f7ff fd32 	bl	80019ac <HAL_GetTick>
 8001f48:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	6833      	ldr	r3, [r6, #0]
 8001f4c:	05da      	lsls	r2, r3, #23
 8001f4e:	f53f af43 	bmi.w	8001dd8 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7ff fd2b 	bl	80019ac <HAL_GetTick>
 8001f56:	1bc0      	subs	r0, r0, r7
 8001f58:	2802      	cmp	r0, #2
 8001f5a:	d9f6      	bls.n	8001f4a <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8001f5c:	2003      	movs	r0, #3
}
 8001f5e:	b002      	add	sp, #8
 8001f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
 8001f66:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fd1d 	bl	80019ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	4f11      	ldr	r7, [pc, #68]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001f74:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	e004      	b.n	8001f86 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fd16 	bl	80019ac <HAL_GetTick>
 8001f80:	1b80      	subs	r0, r0, r6
 8001f82:	4540      	cmp	r0, r8
 8001f84:	d8ea      	bhi.n	8001f5c <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f88:	079b      	lsls	r3, r3, #30
 8001f8a:	d5f7      	bpl.n	8001f7c <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 8001f8c:	2d00      	cmp	r5, #0
 8001f8e:	f43f af48 	beq.w	8001e22 <HAL_RCC_OscConfig+0x132>
 8001f92:	e049      	b.n	8002028 <HAL_RCC_OscConfig+0x338>
        __HAL_RCC_HSI_DISABLE();
 8001f94:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	4e08      	ldr	r6, [pc, #32]	; (8001fb8 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001f98:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fd07 	bl	80019ac <HAL_GetTick>
 8001f9e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa0:	e004      	b.n	8001fac <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7ff fd03 	bl	80019ac <HAL_GetTick>
 8001fa6:	1b40      	subs	r0, r0, r5
 8001fa8:	2802      	cmp	r0, #2
 8001faa:	d8d7      	bhi.n	8001f5c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fac:	6833      	ldr	r3, [r6, #0]
 8001fae:	0799      	lsls	r1, r3, #30
 8001fb0:	d4f7      	bmi.n	8001fa2 <HAL_RCC_OscConfig+0x2b2>
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	e701      	b.n	8001dba <HAL_RCC_OscConfig+0xca>
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	42470000 	.word	0x42470000
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	42470060 	.word	0x42470060
 8001fc8:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fcc:	2801      	cmp	r0, #1
 8001fce:	f43f af46 	beq.w	8001e5e <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8001fd2:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd4:	69e2      	ldr	r2, [r4, #28]
 8001fd6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001fda:	4291      	cmp	r1, r2
 8001fdc:	f47f af61 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x1b2>
 8001fe0:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe2:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	4291      	cmp	r1, r2
 8001fe8:	f47f af5b 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fec:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fee:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001ff2:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	f47f af54 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ffa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ffc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002000:	4291      	cmp	r1, r2
 8002002:	f47f af4e 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x1b2>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002006:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002008:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
        return HAL_ERROR;
 800200c:	1a18      	subs	r0, r3, r0
 800200e:	bf18      	it	ne
 8002010:	2001      	movne	r0, #1
 8002012:	e724      	b.n	8001e5e <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x3b8>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002024:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002026:	e76f      	b.n	8001f08 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002028:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_RCC_OscConfig+0x3b8>)
 800202a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	e6f6      	b.n	8001e22 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002034:	2001      	movs	r0, #1
}
 8002036:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x3b8>)
 800203a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800203c:	f042 0204 	orr.w	r2, r2, #4
 8002040:	671a      	str	r2, [r3, #112]	; 0x70
 8002042:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800204a:	e790      	b.n	8001f6e <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800204c:	f7ff fcae 	bl	80019ac <HAL_GetTick>
 8002050:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	e005      	b.n	8002060 <HAL_RCC_OscConfig+0x370>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff fcaa 	bl	80019ac <HAL_GetTick>
 8002058:	1b80      	subs	r0, r0, r6
 800205a:	2802      	cmp	r0, #2
 800205c:	f63f af7e 	bhi.w	8001f5c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002060:	682b      	ldr	r3, [r5, #0]
 8002062:	0199      	lsls	r1, r3, #6
 8002064:	d4f6      	bmi.n	8002054 <HAL_RCC_OscConfig+0x364>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002066:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800206a:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800206e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002070:	4333      	orrs	r3, r6
 8002072:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002076:	0852      	lsrs	r2, r2, #1
 8002078:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800207c:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800207e:	490b      	ldr	r1, [pc, #44]	; (80020ac <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002080:	4e09      	ldr	r6, [pc, #36]	; (80020a8 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002086:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002088:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800208a:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800208c:	f7ff fc8e 	bl	80019ac <HAL_GetTick>
 8002090:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	e005      	b.n	80020a0 <HAL_RCC_OscConfig+0x3b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff fc8a 	bl	80019ac <HAL_GetTick>
 8002098:	1b00      	subs	r0, r0, r4
 800209a:	2802      	cmp	r0, #2
 800209c:	f63f af5e 	bhi.w	8001f5c <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a0:	6833      	ldr	r3, [r6, #0]
 80020a2:	019a      	lsls	r2, r3, #6
 80020a4:	d5f6      	bpl.n	8002094 <HAL_RCC_OscConfig+0x3a4>
 80020a6:	e6d9      	b.n	8001e5c <HAL_RCC_OscConfig+0x16c>
 80020a8:	40023800 	.word	0x40023800
 80020ac:	42470060 	.word	0x42470060

080020b0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b0:	4917      	ldr	r1, [pc, #92]	; (8002110 <HAL_RCC_GetSysClockFreq+0x60>)
{
 80020b2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b4:	688b      	ldr	r3, [r1, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d01b      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x46>
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d117      	bne.n	80020f2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c4:	684b      	ldr	r3, [r1, #4]
 80020c6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ce:	d114      	bne.n	80020fa <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d0:	6849      	ldr	r1, [r1, #4]
 80020d2:	4810      	ldr	r0, [pc, #64]	; (8002114 <HAL_RCC_GetSysClockFreq+0x64>)
 80020d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80020d8:	fba1 0100 	umull	r0, r1, r1, r0
 80020dc:	f7fe fd64 	bl	8000ba8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_GetSysClockFreq+0x60>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80020e8:	3301      	adds	r3, #1
 80020ea:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80020ec:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80020f0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80020f2:	4808      	ldr	r0, [pc, #32]	; (8002114 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80020f4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020f6:	4808      	ldr	r0, [pc, #32]	; (8002118 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80020f8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fa:	684b      	ldr	r3, [r1, #4]
 80020fc:	4806      	ldr	r0, [pc, #24]	; (8002118 <HAL_RCC_GetSysClockFreq+0x68>)
 80020fe:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002102:	fba3 0100 	umull	r0, r1, r3, r0
 8002106:	2300      	movs	r3, #0
 8002108:	f7fe fd4e 	bl	8000ba8 <__aeabi_uldivmod>
 800210c:	e7e8      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x30>
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	00f42400 	.word	0x00f42400
 8002118:	017d7840 	.word	0x017d7840

0800211c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800211c:	2800      	cmp	r0, #0
 800211e:	f000 8087 	beq.w	8002230 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002122:	4a48      	ldr	r2, [pc, #288]	; (8002244 <HAL_RCC_ClockConfig+0x128>)
 8002124:	6813      	ldr	r3, [r2, #0]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	428b      	cmp	r3, r1
{
 800212c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002130:	460d      	mov	r5, r1
 8002132:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	d209      	bcs.n	800214a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	b2cb      	uxtb	r3, r1
 8002138:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	6813      	ldr	r3, [r2, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	428b      	cmp	r3, r1
 8002142:	d002      	beq.n	800214a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002144:	2001      	movs	r0, #1
}
 8002146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	0798      	lsls	r0, r3, #30
 800214e:	d514      	bpl.n	800217a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	0759      	lsls	r1, r3, #29
 8002152:	d504      	bpl.n	800215e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002154:	493c      	ldr	r1, [pc, #240]	; (8002248 <HAL_RCC_ClockConfig+0x12c>)
 8002156:	688a      	ldr	r2, [r1, #8]
 8002158:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800215c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	071a      	lsls	r2, r3, #28
 8002160:	d504      	bpl.n	800216c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002162:	4939      	ldr	r1, [pc, #228]	; (8002248 <HAL_RCC_ClockConfig+0x12c>)
 8002164:	688a      	ldr	r2, [r1, #8]
 8002166:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800216a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4936      	ldr	r1, [pc, #216]	; (8002248 <HAL_RCC_ClockConfig+0x12c>)
 800216e:	68a0      	ldr	r0, [r4, #8]
 8002170:	688a      	ldr	r2, [r1, #8]
 8002172:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002176:	4302      	orrs	r2, r0
 8002178:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	07df      	lsls	r7, r3, #31
 800217c:	d521      	bpl.n	80021c2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217e:	6862      	ldr	r2, [r4, #4]
 8002180:	2a01      	cmp	r2, #1
 8002182:	d057      	beq.n	8002234 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002184:	1e93      	subs	r3, r2, #2
 8002186:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <HAL_RCC_ClockConfig+0x12c>)
 800218a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218c:	d94d      	bls.n	800222a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	0799      	lsls	r1, r3, #30
 8002190:	d5d8      	bpl.n	8002144 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4e2d      	ldr	r6, [pc, #180]	; (8002248 <HAL_RCC_ClockConfig+0x12c>)
 8002194:	68b3      	ldr	r3, [r6, #8]
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	4313      	orrs	r3, r2
 800219c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800219e:	f7ff fc05 	bl	80019ac <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80021a6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a8:	e004      	b.n	80021b4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021aa:	f7ff fbff 	bl	80019ac <HAL_GetTick>
 80021ae:	1bc0      	subs	r0, r0, r7
 80021b0:	4540      	cmp	r0, r8
 80021b2:	d844      	bhi.n	800223e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b4:	68b3      	ldr	r3, [r6, #8]
 80021b6:	6862      	ldr	r2, [r4, #4]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021c0:	d1f3      	bne.n	80021aa <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c2:	4a20      	ldr	r2, [pc, #128]	; (8002244 <HAL_RCC_ClockConfig+0x128>)
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	42ab      	cmp	r3, r5
 80021cc:	d906      	bls.n	80021dc <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	b2eb      	uxtb	r3, r5
 80021d0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	6813      	ldr	r3, [r2, #0]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	42ab      	cmp	r3, r5
 80021da:	d1b3      	bne.n	8002144 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	075a      	lsls	r2, r3, #29
 80021e0:	d506      	bpl.n	80021f0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e2:	4919      	ldr	r1, [pc, #100]	; (8002248 <HAL_RCC_ClockConfig+0x12c>)
 80021e4:	68e0      	ldr	r0, [r4, #12]
 80021e6:	688a      	ldr	r2, [r1, #8]
 80021e8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80021ec:	4302      	orrs	r2, r0
 80021ee:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f0:	071b      	lsls	r3, r3, #28
 80021f2:	d507      	bpl.n	8002204 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <HAL_RCC_ClockConfig+0x12c>)
 80021f6:	6921      	ldr	r1, [r4, #16]
 80021f8:	6893      	ldr	r3, [r2, #8]
 80021fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80021fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002202:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002204:	f7ff ff54 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8002208:	4a0f      	ldr	r2, [pc, #60]	; (8002248 <HAL_RCC_ClockConfig+0x12c>)
 800220a:	4c10      	ldr	r4, [pc, #64]	; (800224c <HAL_RCC_ClockConfig+0x130>)
 800220c:	6892      	ldr	r2, [r2, #8]
 800220e:	4910      	ldr	r1, [pc, #64]	; (8002250 <HAL_RCC_ClockConfig+0x134>)
 8002210:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002214:	4603      	mov	r3, r0
 8002216:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002218:	480e      	ldr	r0, [pc, #56]	; (8002254 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800221a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800221c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800221e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002220:	f7ff fb7a 	bl	8001918 <HAL_InitTick>
  return HAL_OK;
 8002224:	2000      	movs	r0, #0
}
 8002226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	0198      	lsls	r0, r3, #6
 800222c:	d4b1      	bmi.n	8002192 <HAL_RCC_ClockConfig+0x76>
 800222e:	e789      	b.n	8002144 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002230:	2001      	movs	r0, #1
}
 8002232:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <HAL_RCC_ClockConfig+0x12c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	039e      	lsls	r6, r3, #14
 800223a:	d4aa      	bmi.n	8002192 <HAL_RCC_ClockConfig+0x76>
 800223c:	e782      	b.n	8002144 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800223e:	2003      	movs	r0, #3
 8002240:	e781      	b.n	8002146 <HAL_RCC_ClockConfig+0x2a>
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00
 8002248:	40023800 	.word	0x40023800
 800224c:	08005484 	.word	0x08005484
 8002250:	20000000 	.word	0x20000000
 8002254:	20000008 	.word	0x20000008

08002258 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800225c:	4607      	mov	r7, r0
 800225e:	460d      	mov	r5, r1
 8002260:	4616      	mov	r6, r2
 8002262:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	e001      	b.n	800226c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002268:	1c73      	adds	r3, r6, #1
 800226a:	d106      	bne.n	800227a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800226c:	6894      	ldr	r4, [r2, #8]
 800226e:	ea35 0304 	bics.w	r3, r5, r4
 8002272:	d0f9      	beq.n	8002268 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002274:	2000      	movs	r0, #0
}
 8002276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800227a:	f7ff fb97 	bl	80019ac <HAL_GetTick>
 800227e:	eba0 0008 	sub.w	r0, r0, r8
 8002282:	4286      	cmp	r6, r0
 8002284:	d8ee      	bhi.n	8002264 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002286:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800228a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800228c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002294:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002296:	d013      	beq.n	80022c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800229a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800229e:	d107      	bne.n	80022b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
          SPI_RESET_CRC(hspi);
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ae:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80022b0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80022b2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80022b4:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80022b8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80022bc:	2003      	movs	r0, #3
 80022be:	e7da      	b.n	8002276 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x1e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80022c6:	d002      	beq.n	80022ce <SPI_WaitFlagStateUntilTimeout.constprop.0+0x76>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022c8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80022cc:	d1e4      	bne.n	8002298 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
          __HAL_SPI_DISABLE(hspi);
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e7df      	b.n	8002298 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>

080022d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b570      	push	{r4, r5, r6, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022da:	6845      	ldr	r5, [r0, #4]
 80022dc:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
{
 80022e0:	4604      	mov	r4, r0
 80022e2:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022e4:	d006      	beq.n	80022f4 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022e6:	460a      	mov	r2, r1
 80022e8:	2101      	movs	r1, #1
 80022ea:	f7ff ffb5 	bl	8002258 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80022ee:	b998      	cbnz	r0, 8002318 <SPI_EndRxTransaction+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80022f0:	2000      	movs	r0, #0
}
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f4:	6882      	ldr	r2, [r0, #8]
 80022f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80022fa:	d013      	beq.n	8002324 <SPI_EndRxTransaction+0x4c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002300:	d115      	bne.n	800232e <SPI_EndRxTransaction+0x56>
    __HAL_SPI_DISABLE(hspi);
 8002302:	6806      	ldr	r6, [r0, #0]
 8002304:	6835      	ldr	r5, [r6, #0]
 8002306:	f025 0540 	bic.w	r5, r5, #64	; 0x40
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800230a:	460a      	mov	r2, r1
    __HAL_SPI_DISABLE(hspi);
 800230c:	6035      	str	r5, [r6, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800230e:	2101      	movs	r1, #1
 8002310:	f7ff ffa2 	bl	8002258 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002314:	2800      	cmp	r0, #0
 8002316:	d0eb      	beq.n	80022f0 <SPI_EndRxTransaction+0x18>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002318:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800231a:	f043 0320 	orr.w	r3, r3, #32
 800231e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002320:	2003      	movs	r0, #3
}
 8002322:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SPI_DISABLE(hspi);
 8002324:	6800      	ldr	r0, [r0, #0]
 8002326:	6802      	ldr	r2, [r0, #0]
 8002328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800232c:	6002      	str	r2, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800232e:	460a      	mov	r2, r1
 8002330:	4620      	mov	r0, r4
 8002332:	2180      	movs	r1, #128	; 0x80
 8002334:	f7ff ff90 	bl	8002258 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002338:	2800      	cmp	r0, #0
 800233a:	d1ed      	bne.n	8002318 <SPI_EndRxTransaction+0x40>
  return HAL_OK;
 800233c:	2000      	movs	r0, #0
 800233e:	e7d8      	b.n	80022f2 <SPI_EndRxTransaction+0x1a>

08002340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002340:	b570      	push	{r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002342:	4c16      	ldr	r4, [pc, #88]	; (800239c <SPI_EndRxTxTransaction+0x5c>)
 8002344:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <SPI_EndRxTxTransaction+0x60>)
 8002346:	6825      	ldr	r5, [r4, #0]
 8002348:	fba3 3505 	umull	r3, r5, r3, r5
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800234c:	6843      	ldr	r3, [r0, #4]
{
 800234e:	b082      	sub	sp, #8
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002350:	0d6d      	lsrs	r5, r5, #21
 8002352:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8002356:	fb06 f505 	mul.w	r5, r6, r5
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800235a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800235e:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002360:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002362:	d107      	bne.n	8002374 <SPI_EndRxTxTransaction+0x34>
 8002364:	e00c      	b.n	8002380 <SPI_EndRxTxTransaction+0x40>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 8002366:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002368:	6822      	ldr	r2, [r4, #0]
      count--;
 800236a:	3b01      	subs	r3, #1
 800236c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800236e:	6893      	ldr	r3, [r2, #8]
 8002370:	061b      	lsls	r3, r3, #24
 8002372:	d502      	bpl.n	800237a <SPI_EndRxTxTransaction+0x3a>
      if (count == 0U)
 8002374:	9b01      	ldr	r3, [sp, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f5      	bne.n	8002366 <SPI_EndRxTxTransaction+0x26>
  }

  return HAL_OK;
 800237a:	2000      	movs	r0, #0
}
 800237c:	b002      	add	sp, #8
 800237e:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002380:	4613      	mov	r3, r2
 8002382:	460a      	mov	r2, r1
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	f7ff ff67 	bl	8002258 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800238a:	2800      	cmp	r0, #0
 800238c:	d0f5      	beq.n	800237a <SPI_EndRxTxTransaction+0x3a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800238e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002390:	f043 0320 	orr.w	r3, r3, #32
 8002394:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002396:	2003      	movs	r0, #3
 8002398:	e7f0      	b.n	800237c <SPI_EndRxTxTransaction+0x3c>
 800239a:	bf00      	nop
 800239c:	20000000 	.word	0x20000000
 80023a0:	165e9f81 	.word	0x165e9f81

080023a4 <HAL_SPI_MspInit>:
}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop

080023a8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80023a8:	2800      	cmp	r0, #0
 80023aa:	d03b      	beq.n	8002424 <HAL_SPI_Init+0x7c>
{
 80023ac:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ae:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80023b6:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ba:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80023bc:	b362      	cbz	r2, 8002418 <HAL_SPI_Init+0x70>
 80023be:	4618      	mov	r0, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80023c0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80023c4:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80023c8:	432b      	orrs	r3, r5
 80023ca:	4313      	orrs	r3, r2
 80023cc:	6962      	ldr	r2, [r4, #20]
 80023ce:	69e5      	ldr	r5, [r4, #28]
 80023d0:	6a26      	ldr	r6, [r4, #32]
 80023d2:	430b      	orrs	r3, r1
 80023d4:	4313      	orrs	r3, r2
 80023d6:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 80023d8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80023da:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 80023dc:	2502      	movs	r5, #2
 80023de:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80023e2:	4333      	orrs	r3, r6
 80023e4:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 80023e8:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80023ea:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80023ec:	0c12      	lsrs	r2, r2, #16
 80023ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80023f0:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80023f4:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80023f6:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 80023f8:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 80023fc:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80023fe:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002400:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002402:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002404:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800240a:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800240c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800240e:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002410:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  return HAL_OK;
 8002414:	4610      	mov	r0, r2
}
 8002416:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002418:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800241c:	f7ff ffc2 	bl	80023a4 <HAL_SPI_MspInit>
 8002420:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002422:	e7cd      	b.n	80023c0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002424:	2001      	movs	r0, #1
}
 8002426:	4770      	bx	lr

08002428 <HAL_SPI_Transmit>:
{
 8002428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800242c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800242e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8002432:	2801      	cmp	r0, #1
{
 8002434:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8002436:	d062      	beq.n	80024fe <HAL_SPI_Transmit+0xd6>
 8002438:	461d      	mov	r5, r3
 800243a:	2301      	movs	r3, #1
 800243c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002440:	4688      	mov	r8, r1
 8002442:	4617      	mov	r7, r2
 8002444:	f7ff fab2 	bl	80019ac <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002448:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800244c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800244e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002450:	b2d8      	uxtb	r0, r3
 8002452:	d009      	beq.n	8002468 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8002454:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002456:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8002458:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800245a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800245e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002462:	b002      	add	sp, #8
 8002464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8002468:	f1b8 0f00 	cmp.w	r8, #0
 800246c:	d0f3      	beq.n	8002456 <HAL_SPI_Transmit+0x2e>
 800246e:	2f00      	cmp	r7, #0
 8002470:	d0f1      	beq.n	8002456 <HAL_SPI_Transmit+0x2e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002472:	2303      	movs	r3, #3
 8002474:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002478:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800247a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800247e:	2300      	movs	r3, #0
 8002480:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002482:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002486:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002488:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 800248a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 800248c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SPI_1LINE_TX(hspi);
 800248e:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8002490:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002492:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8002496:	bf02      	ittt	eq
 8002498:	681a      	ldreq	r2, [r3, #0]
 800249a:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 800249e:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	0652      	lsls	r2, r2, #25
 80024a4:	d403      	bmi.n	80024ae <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ac:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024ae:	68e2      	ldr	r2, [r4, #12]
 80024b0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024b4:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024b6:	d026      	beq.n	8002506 <HAL_SPI_Transmit+0xde>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	d04b      	beq.n	8002554 <HAL_SPI_Transmit+0x12c>
 80024bc:	2f01      	cmp	r7, #1
 80024be:	d049      	beq.n	8002554 <HAL_SPI_Transmit+0x12c>
    while (hspi->TxXferCount > 0U)
 80024c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	b973      	cbnz	r3, 80024e4 <HAL_SPI_Transmit+0xbc>
 80024c6:	e050      	b.n	800256a <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80024ce:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80024d2:	3a01      	subs	r2, #1
 80024d4:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024d6:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 80024d8:	86e2      	strh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024da:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80024dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80024de:	b292      	uxth	r2, r2
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d042      	beq.n	800256a <HAL_SPI_Transmit+0x142>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	0792      	lsls	r2, r2, #30
 80024ea:	d4ed      	bmi.n	80024c8 <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024ec:	f7ff fa5e 	bl	80019ac <HAL_GetTick>
 80024f0:	1b80      	subs	r0, r0, r6
 80024f2:	42a8      	cmp	r0, r5
 80024f4:	d3f2      	bcc.n	80024dc <HAL_SPI_Transmit+0xb4>
 80024f6:	1c6b      	adds	r3, r5, #1
 80024f8:	d0f0      	beq.n	80024dc <HAL_SPI_Transmit+0xb4>
          errorcode = HAL_TIMEOUT;
 80024fa:	2003      	movs	r0, #3
 80024fc:	e7ab      	b.n	8002456 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 80024fe:	2002      	movs	r0, #2
}
 8002500:	b002      	add	sp, #8
 8002502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002506:	2a00      	cmp	r2, #0
 8002508:	d145      	bne.n	8002596 <HAL_SPI_Transmit+0x16e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800250a:	4641      	mov	r1, r8
 800250c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8002510:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002512:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002514:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002516:	3a01      	subs	r2, #1
 8002518:	b292      	uxth	r2, r2
 800251a:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800251c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800251e:	b292      	uxth	r2, r2
 8002520:	b96a      	cbnz	r2, 800253e <HAL_SPI_Transmit+0x116>
 8002522:	e022      	b.n	800256a <HAL_SPI_Transmit+0x142>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002524:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002526:	f832 1b02 	ldrh.w	r1, [r2], #2
 800252a:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800252c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800252e:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002530:	3b01      	subs	r3, #1
 8002532:	b29b      	uxth	r3, r3
 8002534:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002536:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002538:	b29b      	uxth	r3, r3
 800253a:	b1b3      	cbz	r3, 800256a <HAL_SPI_Transmit+0x142>
 800253c:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	0790      	lsls	r0, r2, #30
 8002542:	d4ef      	bmi.n	8002524 <HAL_SPI_Transmit+0xfc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002544:	f7ff fa32 	bl	80019ac <HAL_GetTick>
 8002548:	1b80      	subs	r0, r0, r6
 800254a:	42a8      	cmp	r0, r5
 800254c:	d3f3      	bcc.n	8002536 <HAL_SPI_Transmit+0x10e>
 800254e:	1c69      	adds	r1, r5, #1
 8002550:	d0f1      	beq.n	8002536 <HAL_SPI_Transmit+0x10e>
 8002552:	e7d2      	b.n	80024fa <HAL_SPI_Transmit+0xd2>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002554:	f898 2000 	ldrb.w	r2, [r8]
 8002558:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800255a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800255c:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800255e:	3b01      	subs	r3, #1
 8002560:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002562:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8002564:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002566:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002568:	e7aa      	b.n	80024c0 <HAL_SPI_Transmit+0x98>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800256a:	4632      	mov	r2, r6
 800256c:	4629      	mov	r1, r5
 800256e:	4620      	mov	r0, r4
 8002570:	f7ff fee6 	bl	8002340 <SPI_EndRxTxTransaction>
 8002574:	b108      	cbz	r0, 800257a <HAL_SPI_Transmit+0x152>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002576:	2320      	movs	r3, #32
 8002578:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800257a:	68a3      	ldr	r3, [r4, #8]
 800257c:	b933      	cbnz	r3, 800258c <HAL_SPI_Transmit+0x164>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800257e:	6822      	ldr	r2, [r4, #0]
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	68d3      	ldr	r3, [r2, #12]
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	6893      	ldr	r3, [r2, #8]
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800258c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800258e:	3800      	subs	r0, #0
 8002590:	bf18      	it	ne
 8002592:	2001      	movne	r0, #1
error:
 8002594:	e75f      	b.n	8002456 <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002596:	2f01      	cmp	r7, #1
 8002598:	d1c0      	bne.n	800251c <HAL_SPI_Transmit+0xf4>
 800259a:	e7b6      	b.n	800250a <HAL_SPI_Transmit+0xe2>

0800259c <HAL_SPI_TransmitReceive>:
{
 800259c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025a0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80025a2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 80025a6:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80025a8:	2801      	cmp	r0, #1
{
 80025aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80025ac:	f000 8089 	beq.w	80026c2 <HAL_SPI_TransmitReceive+0x126>
 80025b0:	4698      	mov	r8, r3
 80025b2:	2301      	movs	r3, #1
 80025b4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80025b8:	468a      	mov	sl, r1
 80025ba:	4691      	mov	r9, r2
 80025bc:	f7ff f9f6 	bl	80019ac <HAL_GetTick>
  tmp_state           = hspi->State;
 80025c0:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80025c4:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025c6:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 80025c8:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 80025ca:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025cc:	d011      	beq.n	80025f2 <HAL_SPI_TransmitReceive+0x56>
 80025ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025d2:	d009      	beq.n	80025e8 <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 80025d4:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80025d6:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80025d8:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80025da:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80025e2:	b002      	add	sp, #8
 80025e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025e8:	68a2      	ldr	r2, [r4, #8]
 80025ea:	2a00      	cmp	r2, #0
 80025ec:	d1f2      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x38>
 80025ee:	2904      	cmp	r1, #4
 80025f0:	d1f0      	bne.n	80025d4 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025f2:	f1ba 0f00 	cmp.w	sl, #0
 80025f6:	d068      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x12e>
 80025f8:	f1b9 0f00 	cmp.w	r9, #0
 80025fc:	d065      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x12e>
 80025fe:	f1b8 0f00 	cmp.w	r8, #0
 8002602:	d062      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x12e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002604:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002608:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800260a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800260e:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002610:	bf1c      	itt	ne
 8002612:	2205      	movne	r2, #5
 8002614:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002618:	2200      	movs	r2, #0
 800261a:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 800261c:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002620:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002624:	6801      	ldr	r1, [r0, #0]
  hspi->RxXferSize  = Size;
 8002626:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 800262a:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800262e:	064a      	lsls	r2, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002630:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002634:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002638:	d403      	bmi.n	8002642 <HAL_SPI_TransmitReceive+0xa6>
    __HAL_SPI_ENABLE(hspi);
 800263a:	6802      	ldr	r2, [r0, #0]
 800263c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002640:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002642:	68e2      	ldr	r2, [r4, #12]
 8002644:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002648:	d05f      	beq.n	800270a <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264a:	2b00      	cmp	r3, #0
 800264c:	d03f      	beq.n	80026ce <HAL_SPI_TransmitReceive+0x132>
 800264e:	f1b8 0f01 	cmp.w	r8, #1
 8002652:	d03c      	beq.n	80026ce <HAL_SPI_TransmitReceive+0x132>
        txallowed = 1U;
 8002654:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002656:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002658:	b29b      	uxth	r3, r3
 800265a:	b91b      	cbnz	r3, 8002664 <HAL_SPI_TransmitReceive+0xc8>
 800265c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03f      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x148>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002664:	6822      	ldr	r2, [r4, #0]
 8002666:	6893      	ldr	r3, [r2, #8]
 8002668:	0799      	lsls	r1, r3, #30
 800266a:	d50f      	bpl.n	800268c <HAL_SPI_TransmitReceive+0xf0>
 800266c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800266e:	b29b      	uxth	r3, r3
 8002670:	b163      	cbz	r3, 800268c <HAL_SPI_TransmitReceive+0xf0>
 8002672:	b15f      	cbz	r7, 800268c <HAL_SPI_TransmitReceive+0xf0>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002674:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800267a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800267c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800267e:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8002680:	3b01      	subs	r3, #1
 8002682:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8002684:	3101      	adds	r1, #1
        hspi->TxXferCount--;
 8002686:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8002688:	6321      	str	r1, [r4, #48]	; 0x30
        txallowed = 0U;
 800268a:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800268c:	6893      	ldr	r3, [r2, #8]
 800268e:	f013 0301 	ands.w	r3, r3, #1
 8002692:	d00d      	beq.n	80026b0 <HAL_SPI_TransmitReceive+0x114>
 8002694:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002696:	b289      	uxth	r1, r1
 8002698:	b151      	cbz	r1, 80026b0 <HAL_SPI_TransmitReceive+0x114>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800269a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800269c:	68d2      	ldr	r2, [r2, #12]
 800269e:	700a      	strb	r2, [r1, #0]
        hspi->RxXferCount--;
 80026a0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80026a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80026a4:	3a01      	subs	r2, #1
 80026a6:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr++;
 80026a8:	3101      	adds	r1, #1
        txallowed = 1U;
 80026aa:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80026ac:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80026ae:	63a1      	str	r1, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026b0:	f7ff f97c 	bl	80019ac <HAL_GetTick>
 80026b4:	1b43      	subs	r3, r0, r5
 80026b6:	42b3      	cmp	r3, r6
 80026b8:	d3cd      	bcc.n	8002656 <HAL_SPI_TransmitReceive+0xba>
 80026ba:	1c73      	adds	r3, r6, #1
 80026bc:	d0cb      	beq.n	8002656 <HAL_SPI_TransmitReceive+0xba>
        errorcode = HAL_TIMEOUT;
 80026be:	2003      	movs	r0, #3
 80026c0:	e789      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80026c2:	2002      	movs	r0, #2
}
 80026c4:	b002      	add	sp, #8
 80026c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 80026ca:	2001      	movs	r0, #1
 80026cc:	e783      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ce:	f89a 3000 	ldrb.w	r3, [sl]
 80026d2:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80026d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026dc:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80026de:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026e0:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80026e2:	e7b7      	b.n	8002654 <HAL_SPI_TransmitReceive+0xb8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026e4:	462a      	mov	r2, r5
 80026e6:	4631      	mov	r1, r6
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7ff fe29 	bl	8002340 <SPI_EndRxTxTransaction>
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d14d      	bne.n	800278e <HAL_SPI_TransmitReceive+0x1f2>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026f2:	68a3      	ldr	r3, [r4, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f47f af6e 	bne.w	80025d6 <HAL_SPI_TransmitReceive+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	9001      	str	r0, [sp, #4]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	9201      	str	r2, [sp, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	9b01      	ldr	r3, [sp, #4]
 8002708:	e765      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800270a:	2b00      	cmp	r3, #0
 800270c:	d13b      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x1ea>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800270e:	4651      	mov	r1, sl
 8002710:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002714:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8002716:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002718:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800271a:	3b01      	subs	r3, #1
 800271c:	b29b      	uxth	r3, r3
 800271e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002720:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002722:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002724:	b29b      	uxth	r3, r3
 8002726:	b91b      	cbnz	r3, 8002730 <HAL_SPI_TransmitReceive+0x194>
 8002728:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0d9      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x148>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002730:	6822      	ldr	r2, [r4, #0]
 8002732:	6893      	ldr	r3, [r2, #8]
 8002734:	079b      	lsls	r3, r3, #30
 8002736:	d50d      	bpl.n	8002754 <HAL_SPI_TransmitReceive+0x1b8>
 8002738:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800273a:	b29b      	uxth	r3, r3
 800273c:	b153      	cbz	r3, 8002754 <HAL_SPI_TransmitReceive+0x1b8>
 800273e:	b14f      	cbz	r7, 8002754 <HAL_SPI_TransmitReceive+0x1b8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002740:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002742:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002746:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8002748:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800274a:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800274c:	3b01      	subs	r3, #1
 800274e:	b29b      	uxth	r3, r3
 8002750:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002752:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002754:	6893      	ldr	r3, [r2, #8]
 8002756:	f013 0301 	ands.w	r3, r3, #1
 800275a:	d00c      	beq.n	8002776 <HAL_SPI_TransmitReceive+0x1da>
 800275c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800275e:	b289      	uxth	r1, r1
 8002760:	b149      	cbz	r1, 8002776 <HAL_SPI_TransmitReceive+0x1da>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002762:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002764:	68d2      	ldr	r2, [r2, #12]
 8002766:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 800276a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800276c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800276e:	3a01      	subs	r2, #1
 8002770:	b292      	uxth	r2, r2
        txallowed = 1U;
 8002772:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8002774:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002776:	f7ff f919 	bl	80019ac <HAL_GetTick>
 800277a:	1b40      	subs	r0, r0, r5
 800277c:	42b0      	cmp	r0, r6
 800277e:	d3d0      	bcc.n	8002722 <HAL_SPI_TransmitReceive+0x186>
 8002780:	1c70      	adds	r0, r6, #1
 8002782:	d0ce      	beq.n	8002722 <HAL_SPI_TransmitReceive+0x186>
 8002784:	e79b      	b.n	80026be <HAL_SPI_TransmitReceive+0x122>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002786:	f1b8 0f01 	cmp.w	r8, #1
 800278a:	d1c9      	bne.n	8002720 <HAL_SPI_TransmitReceive+0x184>
 800278c:	e7bf      	b.n	800270e <HAL_SPI_TransmitReceive+0x172>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800278e:	2320      	movs	r3, #32
 8002790:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002792:	2001      	movs	r0, #1
    goto error;
 8002794:	e71f      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x3a>
 8002796:	bf00      	nop

08002798 <HAL_SPI_Receive>:
{
 8002798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800279c:	6846      	ldr	r6, [r0, #4]
 800279e:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
{
 80027a2:	b083      	sub	sp, #12
 80027a4:	4604      	mov	r4, r0
 80027a6:	4691      	mov	r9, r2
 80027a8:	461d      	mov	r5, r3
 80027aa:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027ac:	d060      	beq.n	8002870 <HAL_SPI_Receive+0xd8>
  __HAL_LOCK(hspi);
 80027ae:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d068      	beq.n	8002888 <HAL_SPI_Receive+0xf0>
 80027b6:	2301      	movs	r3, #1
 80027b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80027bc:	f7ff f8f6 	bl	80019ac <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80027c0:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
 80027c4:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 80027c6:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80027c8:	b2f8      	uxtb	r0, r7
 80027ca:	d009      	beq.n	80027e0 <HAL_SPI_Receive+0x48>
    errorcode = HAL_BUSY;
 80027cc:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80027ce:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80027d0:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80027d2:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027d6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80027da:	b003      	add	sp, #12
 80027dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pData == NULL) || (Size == 0U))
 80027e0:	f1b8 0f00 	cmp.w	r8, #0
 80027e4:	d0f3      	beq.n	80027ce <HAL_SPI_Receive+0x36>
 80027e6:	f1b9 0f00 	cmp.w	r9, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_SPI_Receive+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ec:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027ee:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027f2:	2304      	movs	r3, #4
 80027f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027fc:	f04f 0300 	mov.w	r3, #0
    SPI_1LINE_RX(hspi);
 8002800:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002802:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8002804:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002808:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 800280a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800280e:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002810:	86a3      	strh	r3, [r4, #52]	; 0x34
    SPI_1LINE_RX(hspi);
 8002812:	bf08      	it	eq
 8002814:	6813      	ldreq	r3, [r2, #0]
  hspi->RxXferSize  = Size;
 8002816:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 800281a:	bf04      	itt	eq
 800281c:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
 8002820:	6013      	streq	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002822:	6813      	ldr	r3, [r2, #0]
 8002824:	065b      	lsls	r3, r3, #25
 8002826:	d403      	bmi.n	8002830 <HAL_SPI_Receive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8002828:	6813      	ldr	r3, [r2, #0]
 800282a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002830:	68e3      	ldr	r3, [r4, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d039      	beq.n	80028aa <HAL_SPI_Receive+0x112>
    while (hspi->RxXferCount > 0U)
 8002836:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002838:	b29b      	uxth	r3, r3
 800283a:	b96b      	cbnz	r3, 8002858 <HAL_SPI_Receive+0xc0>
 800283c:	e028      	b.n	8002890 <HAL_SPI_Receive+0xf8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800283e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002840:	68d2      	ldr	r2, [r2, #12]
 8002842:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 8002846:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002848:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800284a:	3a01      	subs	r2, #1
 800284c:	b292      	uxth	r2, r2
 800284e:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8002850:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002852:	b29b      	uxth	r3, r3
 8002854:	b1e3      	cbz	r3, 8002890 <HAL_SPI_Receive+0xf8>
 8002856:	6822      	ldr	r2, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002858:	6893      	ldr	r3, [r2, #8]
 800285a:	07d9      	lsls	r1, r3, #31
 800285c:	d4ef      	bmi.n	800283e <HAL_SPI_Receive+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800285e:	f7ff f8a5 	bl	80019ac <HAL_GetTick>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	42a8      	cmp	r0, r5
 8002866:	d3f3      	bcc.n	8002850 <HAL_SPI_Receive+0xb8>
 8002868:	1c6b      	adds	r3, r5, #1
 800286a:	d0f1      	beq.n	8002850 <HAL_SPI_Receive+0xb8>
          errorcode = HAL_TIMEOUT;
 800286c:	2003      	movs	r0, #3
 800286e:	e7ae      	b.n	80027ce <HAL_SPI_Receive+0x36>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002870:	6883      	ldr	r3, [r0, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d19b      	bne.n	80027ae <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002876:	2604      	movs	r6, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002878:	9500      	str	r5, [sp, #0]
 800287a:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800287c:	f880 6051 	strb.w	r6, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002880:	460a      	mov	r2, r1
 8002882:	f7ff fe8b 	bl	800259c <HAL_SPI_TransmitReceive>
 8002886:	e7a8      	b.n	80027da <HAL_SPI_Receive+0x42>
  __HAL_LOCK(hspi);
 8002888:	2002      	movs	r0, #2
}
 800288a:	b003      	add	sp, #12
 800288c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002890:	4632      	mov	r2, r6
 8002892:	4629      	mov	r1, r5
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff fd1f 	bl	80022d8 <SPI_EndRxTransaction>
 800289a:	b108      	cbz	r0, 80028a0 <HAL_SPI_Receive+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800289c:	2320      	movs	r3, #32
 800289e:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80028a2:	3800      	subs	r0, #0
 80028a4:	bf18      	it	ne
 80028a6:	2001      	movne	r0, #1
error :
 80028a8:	e791      	b.n	80027ce <HAL_SPI_Receive+0x36>
    while (hspi->RxXferCount > 0U)
 80028aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	b97b      	cbnz	r3, 80028d0 <HAL_SPI_Receive+0x138>
 80028b0:	e7ee      	b.n	8002890 <HAL_SPI_Receive+0xf8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028b4:	7b12      	ldrb	r2, [r2, #12]
 80028b6:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80028b8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80028bc:	3a01      	subs	r2, #1
 80028be:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028c0:	3301      	adds	r3, #1
        hspi->RxXferCount--;
 80028c2:	87e2      	strh	r2, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028c4:	63a3      	str	r3, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 80028c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0e0      	beq.n	8002890 <HAL_SPI_Receive+0xf8>
 80028ce:	6822      	ldr	r2, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028d0:	6893      	ldr	r3, [r2, #8]
 80028d2:	07df      	lsls	r7, r3, #31
 80028d4:	d4ed      	bmi.n	80028b2 <HAL_SPI_Receive+0x11a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028d6:	f7ff f869 	bl	80019ac <HAL_GetTick>
 80028da:	1b80      	subs	r0, r0, r6
 80028dc:	42a8      	cmp	r0, r5
 80028de:	d3f2      	bcc.n	80028c6 <HAL_SPI_Receive+0x12e>
 80028e0:	1c68      	adds	r0, r5, #1
 80028e2:	d0f0      	beq.n	80028c6 <HAL_SPI_Receive+0x12e>
 80028e4:	e7c2      	b.n	800286c <HAL_SPI_Receive+0xd4>
 80028e6:	bf00      	nop

080028e8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop

080028ec <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028ec:	6803      	ldr	r3, [r0, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fc:	2a06      	cmp	r2, #6
 80028fe:	d003      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x1c>
  {
    __HAL_TIM_ENABLE(htim);
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002908:	2000      	movs	r0, #0
 800290a:	4770      	bx	lr

0800290c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800290c:	4a2f      	ldr	r2, [pc, #188]	; (80029cc <TIM_Base_SetConfig+0xc0>)
  tmpcr1 = TIMx->CR1;
 800290e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002910:	4290      	cmp	r0, r2
{
 8002912:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002914:	d043      	beq.n	800299e <TIM_Base_SetConfig+0x92>
 8002916:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800291a:	d034      	beq.n	8002986 <TIM_Base_SetConfig+0x7a>
 800291c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002920:	4290      	cmp	r0, r2
 8002922:	d030      	beq.n	8002986 <TIM_Base_SetConfig+0x7a>
 8002924:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002928:	4290      	cmp	r0, r2
 800292a:	d02c      	beq.n	8002986 <TIM_Base_SetConfig+0x7a>
 800292c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002930:	4290      	cmp	r0, r2
 8002932:	d028      	beq.n	8002986 <TIM_Base_SetConfig+0x7a>
 8002934:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002938:	4290      	cmp	r0, r2
 800293a:	d030      	beq.n	800299e <TIM_Base_SetConfig+0x92>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002940:	4290      	cmp	r0, r2
 8002942:	d024      	beq.n	800298e <TIM_Base_SetConfig+0x82>
 8002944:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002948:	4290      	cmp	r0, r2
 800294a:	d020      	beq.n	800298e <TIM_Base_SetConfig+0x82>
 800294c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002950:	4290      	cmp	r0, r2
 8002952:	d01c      	beq.n	800298e <TIM_Base_SetConfig+0x82>
 8002954:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002958:	4290      	cmp	r0, r2
 800295a:	d018      	beq.n	800298e <TIM_Base_SetConfig+0x82>
 800295c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002960:	4290      	cmp	r0, r2
 8002962:	d014      	beq.n	800298e <TIM_Base_SetConfig+0x82>
 8002964:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002968:	4290      	cmp	r0, r2
 800296a:	d010      	beq.n	800298e <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	694d      	ldr	r5, [r1, #20]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296e:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002970:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002976:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002978:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800297a:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800297c:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800297e:	6282      	str	r2, [r0, #40]	; 0x28
}
 8002980:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8002982:	6143      	str	r3, [r0, #20]
}
 8002984:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002986:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800298c:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298e:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002990:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002992:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8002994:	680a      	ldr	r2, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800299a:	4333      	orrs	r3, r6
 800299c:	e7e9      	b.n	8002972 <TIM_Base_SetConfig+0x66>
    tmpcr1 |= Structure->CounterMode;
 800299e:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029a0:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a2:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029a8:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80029aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ae:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029b4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b8:	688b      	ldr	r3, [r1, #8]
 80029ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029bc:	680b      	ldr	r3, [r1, #0]
 80029be:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80029c0:	690b      	ldr	r3, [r1, #16]
 80029c2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80029c4:	2301      	movs	r3, #1
}
 80029c6:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80029c8:	6143      	str	r3, [r0, #20]
}
 80029ca:	4770      	bx	lr
 80029cc:	40010000 	.word	0x40010000

080029d0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80029d0:	b1c0      	cbz	r0, 8002a04 <HAL_TIM_Base_Init+0x34>
{
 80029d2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80029d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029d8:	4604      	mov	r4, r0
 80029da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029de:	b163      	cbz	r3, 80029fa <HAL_TIM_Base_Init+0x2a>
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e2:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80029ec:	f7ff ff8e 	bl	800290c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80029f6:	2000      	movs	r0, #0
}
 80029f8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80029fa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80029fe:	f7ff ff73 	bl	80028e8 <HAL_TIM_Base_MspInit>
 8002a02:	e7ed      	b.n	80029e0 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002a04:	2001      	movs	r0, #1
}
 8002a06:	4770      	bx	lr

08002a08 <__errno>:
 8002a08:	4b01      	ldr	r3, [pc, #4]	; (8002a10 <__errno+0x8>)
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000000c 	.word	0x2000000c

08002a14 <__libc_init_array>:
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	4d0d      	ldr	r5, [pc, #52]	; (8002a4c <__libc_init_array+0x38>)
 8002a18:	4c0d      	ldr	r4, [pc, #52]	; (8002a50 <__libc_init_array+0x3c>)
 8002a1a:	1b64      	subs	r4, r4, r5
 8002a1c:	10a4      	asrs	r4, r4, #2
 8002a1e:	2600      	movs	r6, #0
 8002a20:	42a6      	cmp	r6, r4
 8002a22:	d109      	bne.n	8002a38 <__libc_init_array+0x24>
 8002a24:	4d0b      	ldr	r5, [pc, #44]	; (8002a54 <__libc_init_array+0x40>)
 8002a26:	4c0c      	ldr	r4, [pc, #48]	; (8002a58 <__libc_init_array+0x44>)
 8002a28:	f002 fd08 	bl	800543c <_init>
 8002a2c:	1b64      	subs	r4, r4, r5
 8002a2e:	10a4      	asrs	r4, r4, #2
 8002a30:	2600      	movs	r6, #0
 8002a32:	42a6      	cmp	r6, r4
 8002a34:	d105      	bne.n	8002a42 <__libc_init_array+0x2e>
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
 8002a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3c:	4798      	blx	r3
 8002a3e:	3601      	adds	r6, #1
 8002a40:	e7ee      	b.n	8002a20 <__libc_init_array+0xc>
 8002a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a46:	4798      	blx	r3
 8002a48:	3601      	adds	r6, #1
 8002a4a:	e7f2      	b.n	8002a32 <__libc_init_array+0x1e>
 8002a4c:	0800587c 	.word	0x0800587c
 8002a50:	0800587c 	.word	0x0800587c
 8002a54:	0800587c 	.word	0x0800587c
 8002a58:	08005880 	.word	0x08005880

08002a5c <memset>:
 8002a5c:	4402      	add	r2, r0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d100      	bne.n	8002a66 <memset+0xa>
 8002a64:	4770      	bx	lr
 8002a66:	f803 1b01 	strb.w	r1, [r3], #1
 8002a6a:	e7f9      	b.n	8002a60 <memset+0x4>

08002a6c <__cvt>:
 8002a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a70:	ec55 4b10 	vmov	r4, r5, d0
 8002a74:	2d00      	cmp	r5, #0
 8002a76:	460e      	mov	r6, r1
 8002a78:	4619      	mov	r1, r3
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	bfbb      	ittet	lt
 8002a7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002a82:	461d      	movlt	r5, r3
 8002a84:	2300      	movge	r3, #0
 8002a86:	232d      	movlt	r3, #45	; 0x2d
 8002a88:	700b      	strb	r3, [r1, #0]
 8002a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002a90:	4691      	mov	r9, r2
 8002a92:	f023 0820 	bic.w	r8, r3, #32
 8002a96:	bfbc      	itt	lt
 8002a98:	4622      	movlt	r2, r4
 8002a9a:	4614      	movlt	r4, r2
 8002a9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002aa0:	d005      	beq.n	8002aae <__cvt+0x42>
 8002aa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002aa6:	d100      	bne.n	8002aaa <__cvt+0x3e>
 8002aa8:	3601      	adds	r6, #1
 8002aaa:	2102      	movs	r1, #2
 8002aac:	e000      	b.n	8002ab0 <__cvt+0x44>
 8002aae:	2103      	movs	r1, #3
 8002ab0:	ab03      	add	r3, sp, #12
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	ab02      	add	r3, sp, #8
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	ec45 4b10 	vmov	d0, r4, r5
 8002abc:	4653      	mov	r3, sl
 8002abe:	4632      	mov	r2, r6
 8002ac0:	f000 fce2 	bl	8003488 <_dtoa_r>
 8002ac4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ac8:	4607      	mov	r7, r0
 8002aca:	d102      	bne.n	8002ad2 <__cvt+0x66>
 8002acc:	f019 0f01 	tst.w	r9, #1
 8002ad0:	d022      	beq.n	8002b18 <__cvt+0xac>
 8002ad2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ad6:	eb07 0906 	add.w	r9, r7, r6
 8002ada:	d110      	bne.n	8002afe <__cvt+0x92>
 8002adc:	783b      	ldrb	r3, [r7, #0]
 8002ade:	2b30      	cmp	r3, #48	; 0x30
 8002ae0:	d10a      	bne.n	8002af8 <__cvt+0x8c>
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	4629      	mov	r1, r5
 8002aea:	f7fd ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 8002aee:	b918      	cbnz	r0, 8002af8 <__cvt+0x8c>
 8002af0:	f1c6 0601 	rsb	r6, r6, #1
 8002af4:	f8ca 6000 	str.w	r6, [sl]
 8002af8:	f8da 3000 	ldr.w	r3, [sl]
 8002afc:	4499      	add	r9, r3
 8002afe:	2200      	movs	r2, #0
 8002b00:	2300      	movs	r3, #0
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	f7fd ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 8002b0a:	b108      	cbz	r0, 8002b10 <__cvt+0xa4>
 8002b0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002b10:	2230      	movs	r2, #48	; 0x30
 8002b12:	9b03      	ldr	r3, [sp, #12]
 8002b14:	454b      	cmp	r3, r9
 8002b16:	d307      	bcc.n	8002b28 <__cvt+0xbc>
 8002b18:	9b03      	ldr	r3, [sp, #12]
 8002b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b1c:	1bdb      	subs	r3, r3, r7
 8002b1e:	4638      	mov	r0, r7
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	b004      	add	sp, #16
 8002b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b28:	1c59      	adds	r1, r3, #1
 8002b2a:	9103      	str	r1, [sp, #12]
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e7f0      	b.n	8002b12 <__cvt+0xa6>

08002b30 <__exponent>:
 8002b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b32:	4603      	mov	r3, r0
 8002b34:	2900      	cmp	r1, #0
 8002b36:	bfb8      	it	lt
 8002b38:	4249      	neglt	r1, r1
 8002b3a:	f803 2b02 	strb.w	r2, [r3], #2
 8002b3e:	bfb4      	ite	lt
 8002b40:	222d      	movlt	r2, #45	; 0x2d
 8002b42:	222b      	movge	r2, #43	; 0x2b
 8002b44:	2909      	cmp	r1, #9
 8002b46:	7042      	strb	r2, [r0, #1]
 8002b48:	dd2a      	ble.n	8002ba0 <__exponent+0x70>
 8002b4a:	f10d 0407 	add.w	r4, sp, #7
 8002b4e:	46a4      	mov	ip, r4
 8002b50:	270a      	movs	r7, #10
 8002b52:	46a6      	mov	lr, r4
 8002b54:	460a      	mov	r2, r1
 8002b56:	fb91 f6f7 	sdiv	r6, r1, r7
 8002b5a:	fb07 1516 	mls	r5, r7, r6, r1
 8002b5e:	3530      	adds	r5, #48	; 0x30
 8002b60:	2a63      	cmp	r2, #99	; 0x63
 8002b62:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002b66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002b6a:	4631      	mov	r1, r6
 8002b6c:	dcf1      	bgt.n	8002b52 <__exponent+0x22>
 8002b6e:	3130      	adds	r1, #48	; 0x30
 8002b70:	f1ae 0502 	sub.w	r5, lr, #2
 8002b74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002b78:	1c44      	adds	r4, r0, #1
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	4561      	cmp	r1, ip
 8002b7e:	d30a      	bcc.n	8002b96 <__exponent+0x66>
 8002b80:	f10d 0209 	add.w	r2, sp, #9
 8002b84:	eba2 020e 	sub.w	r2, r2, lr
 8002b88:	4565      	cmp	r5, ip
 8002b8a:	bf88      	it	hi
 8002b8c:	2200      	movhi	r2, #0
 8002b8e:	4413      	add	r3, r2
 8002b90:	1a18      	subs	r0, r3, r0
 8002b92:	b003      	add	sp, #12
 8002b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002b9e:	e7ed      	b.n	8002b7c <__exponent+0x4c>
 8002ba0:	2330      	movs	r3, #48	; 0x30
 8002ba2:	3130      	adds	r1, #48	; 0x30
 8002ba4:	7083      	strb	r3, [r0, #2]
 8002ba6:	70c1      	strb	r1, [r0, #3]
 8002ba8:	1d03      	adds	r3, r0, #4
 8002baa:	e7f1      	b.n	8002b90 <__exponent+0x60>

08002bac <_printf_float>:
 8002bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb0:	ed2d 8b02 	vpush	{d8}
 8002bb4:	b08d      	sub	sp, #52	; 0x34
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002bbc:	4616      	mov	r6, r2
 8002bbe:	461f      	mov	r7, r3
 8002bc0:	4605      	mov	r5, r0
 8002bc2:	f001 fb43 	bl	800424c <_localeconv_r>
 8002bc6:	f8d0 a000 	ldr.w	sl, [r0]
 8002bca:	4650      	mov	r0, sl
 8002bcc:	f7fd fb00 	bl	80001d0 <strlen>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	9305      	str	r3, [sp, #20]
 8002bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8002bdc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002be0:	3307      	adds	r3, #7
 8002be2:	f023 0307 	bic.w	r3, r3, #7
 8002be6:	f103 0208 	add.w	r2, r3, #8
 8002bea:	f8c8 2000 	str.w	r2, [r8]
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002bf6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002bfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002bfe:	9307      	str	r3, [sp, #28]
 8002c00:	f8cd 8018 	str.w	r8, [sp, #24]
 8002c04:	ee08 0a10 	vmov	s16, r0
 8002c08:	4b9f      	ldr	r3, [pc, #636]	; (8002e88 <_printf_float+0x2dc>)
 8002c0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c12:	f7fd ff8b 	bl	8000b2c <__aeabi_dcmpun>
 8002c16:	bb88      	cbnz	r0, 8002c7c <_printf_float+0xd0>
 8002c18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c1c:	4b9a      	ldr	r3, [pc, #616]	; (8002e88 <_printf_float+0x2dc>)
 8002c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c22:	f7fd ff65 	bl	8000af0 <__aeabi_dcmple>
 8002c26:	bb48      	cbnz	r0, 8002c7c <_printf_float+0xd0>
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	4640      	mov	r0, r8
 8002c2e:	4649      	mov	r1, r9
 8002c30:	f7fd ff54 	bl	8000adc <__aeabi_dcmplt>
 8002c34:	b110      	cbz	r0, 8002c3c <_printf_float+0x90>
 8002c36:	232d      	movs	r3, #45	; 0x2d
 8002c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c3c:	4b93      	ldr	r3, [pc, #588]	; (8002e8c <_printf_float+0x2e0>)
 8002c3e:	4894      	ldr	r0, [pc, #592]	; (8002e90 <_printf_float+0x2e4>)
 8002c40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002c44:	bf94      	ite	ls
 8002c46:	4698      	movls	r8, r3
 8002c48:	4680      	movhi	r8, r0
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	6123      	str	r3, [r4, #16]
 8002c4e:	9b05      	ldr	r3, [sp, #20]
 8002c50:	f023 0204 	bic.w	r2, r3, #4
 8002c54:	6022      	str	r2, [r4, #0]
 8002c56:	f04f 0900 	mov.w	r9, #0
 8002c5a:	9700      	str	r7, [sp, #0]
 8002c5c:	4633      	mov	r3, r6
 8002c5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002c60:	4621      	mov	r1, r4
 8002c62:	4628      	mov	r0, r5
 8002c64:	f000 f9d8 	bl	8003018 <_printf_common>
 8002c68:	3001      	adds	r0, #1
 8002c6a:	f040 8090 	bne.w	8002d8e <_printf_float+0x1e2>
 8002c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c72:	b00d      	add	sp, #52	; 0x34
 8002c74:	ecbd 8b02 	vpop	{d8}
 8002c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7c:	4642      	mov	r2, r8
 8002c7e:	464b      	mov	r3, r9
 8002c80:	4640      	mov	r0, r8
 8002c82:	4649      	mov	r1, r9
 8002c84:	f7fd ff52 	bl	8000b2c <__aeabi_dcmpun>
 8002c88:	b140      	cbz	r0, 8002c9c <_printf_float+0xf0>
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bfbc      	itt	lt
 8002c90:	232d      	movlt	r3, #45	; 0x2d
 8002c92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002c96:	487f      	ldr	r0, [pc, #508]	; (8002e94 <_printf_float+0x2e8>)
 8002c98:	4b7f      	ldr	r3, [pc, #508]	; (8002e98 <_printf_float+0x2ec>)
 8002c9a:	e7d1      	b.n	8002c40 <_printf_float+0x94>
 8002c9c:	6863      	ldr	r3, [r4, #4]
 8002c9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002ca2:	9206      	str	r2, [sp, #24]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	d13f      	bne.n	8002d28 <_printf_float+0x17c>
 8002ca8:	2306      	movs	r3, #6
 8002caa:	6063      	str	r3, [r4, #4]
 8002cac:	9b05      	ldr	r3, [sp, #20]
 8002cae:	6861      	ldr	r1, [r4, #4]
 8002cb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9303      	str	r3, [sp, #12]
 8002cb8:	ab0a      	add	r3, sp, #40	; 0x28
 8002cba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002cbe:	ab09      	add	r3, sp, #36	; 0x24
 8002cc0:	ec49 8b10 	vmov	d0, r8, r9
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	6022      	str	r2, [r4, #0]
 8002cc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002ccc:	4628      	mov	r0, r5
 8002cce:	f7ff fecd 	bl	8002a6c <__cvt>
 8002cd2:	9b06      	ldr	r3, [sp, #24]
 8002cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cd6:	2b47      	cmp	r3, #71	; 0x47
 8002cd8:	4680      	mov	r8, r0
 8002cda:	d108      	bne.n	8002cee <_printf_float+0x142>
 8002cdc:	1cc8      	adds	r0, r1, #3
 8002cde:	db02      	blt.n	8002ce6 <_printf_float+0x13a>
 8002ce0:	6863      	ldr	r3, [r4, #4]
 8002ce2:	4299      	cmp	r1, r3
 8002ce4:	dd41      	ble.n	8002d6a <_printf_float+0x1be>
 8002ce6:	f1ab 0b02 	sub.w	fp, fp, #2
 8002cea:	fa5f fb8b 	uxtb.w	fp, fp
 8002cee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002cf2:	d820      	bhi.n	8002d36 <_printf_float+0x18a>
 8002cf4:	3901      	subs	r1, #1
 8002cf6:	465a      	mov	r2, fp
 8002cf8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002cfc:	9109      	str	r1, [sp, #36]	; 0x24
 8002cfe:	f7ff ff17 	bl	8002b30 <__exponent>
 8002d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d04:	1813      	adds	r3, r2, r0
 8002d06:	2a01      	cmp	r2, #1
 8002d08:	4681      	mov	r9, r0
 8002d0a:	6123      	str	r3, [r4, #16]
 8002d0c:	dc02      	bgt.n	8002d14 <_printf_float+0x168>
 8002d0e:	6822      	ldr	r2, [r4, #0]
 8002d10:	07d2      	lsls	r2, r2, #31
 8002d12:	d501      	bpl.n	8002d18 <_printf_float+0x16c>
 8002d14:	3301      	adds	r3, #1
 8002d16:	6123      	str	r3, [r4, #16]
 8002d18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d09c      	beq.n	8002c5a <_printf_float+0xae>
 8002d20:	232d      	movs	r3, #45	; 0x2d
 8002d22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d26:	e798      	b.n	8002c5a <_printf_float+0xae>
 8002d28:	9a06      	ldr	r2, [sp, #24]
 8002d2a:	2a47      	cmp	r2, #71	; 0x47
 8002d2c:	d1be      	bne.n	8002cac <_printf_float+0x100>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1bc      	bne.n	8002cac <_printf_float+0x100>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e7b9      	b.n	8002caa <_printf_float+0xfe>
 8002d36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002d3a:	d118      	bne.n	8002d6e <_printf_float+0x1c2>
 8002d3c:	2900      	cmp	r1, #0
 8002d3e:	6863      	ldr	r3, [r4, #4]
 8002d40:	dd0b      	ble.n	8002d5a <_printf_float+0x1ae>
 8002d42:	6121      	str	r1, [r4, #16]
 8002d44:	b913      	cbnz	r3, 8002d4c <_printf_float+0x1a0>
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	07d0      	lsls	r0, r2, #31
 8002d4a:	d502      	bpl.n	8002d52 <_printf_float+0x1a6>
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	440b      	add	r3, r1
 8002d50:	6123      	str	r3, [r4, #16]
 8002d52:	65a1      	str	r1, [r4, #88]	; 0x58
 8002d54:	f04f 0900 	mov.w	r9, #0
 8002d58:	e7de      	b.n	8002d18 <_printf_float+0x16c>
 8002d5a:	b913      	cbnz	r3, 8002d62 <_printf_float+0x1b6>
 8002d5c:	6822      	ldr	r2, [r4, #0]
 8002d5e:	07d2      	lsls	r2, r2, #31
 8002d60:	d501      	bpl.n	8002d66 <_printf_float+0x1ba>
 8002d62:	3302      	adds	r3, #2
 8002d64:	e7f4      	b.n	8002d50 <_printf_float+0x1a4>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e7f2      	b.n	8002d50 <_printf_float+0x1a4>
 8002d6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d70:	4299      	cmp	r1, r3
 8002d72:	db05      	blt.n	8002d80 <_printf_float+0x1d4>
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	6121      	str	r1, [r4, #16]
 8002d78:	07d8      	lsls	r0, r3, #31
 8002d7a:	d5ea      	bpl.n	8002d52 <_printf_float+0x1a6>
 8002d7c:	1c4b      	adds	r3, r1, #1
 8002d7e:	e7e7      	b.n	8002d50 <_printf_float+0x1a4>
 8002d80:	2900      	cmp	r1, #0
 8002d82:	bfd4      	ite	le
 8002d84:	f1c1 0202 	rsble	r2, r1, #2
 8002d88:	2201      	movgt	r2, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	e7e0      	b.n	8002d50 <_printf_float+0x1a4>
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	055a      	lsls	r2, r3, #21
 8002d92:	d407      	bmi.n	8002da4 <_printf_float+0x1f8>
 8002d94:	6923      	ldr	r3, [r4, #16]
 8002d96:	4642      	mov	r2, r8
 8002d98:	4631      	mov	r1, r6
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	47b8      	blx	r7
 8002d9e:	3001      	adds	r0, #1
 8002da0:	d12c      	bne.n	8002dfc <_printf_float+0x250>
 8002da2:	e764      	b.n	8002c6e <_printf_float+0xc2>
 8002da4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002da8:	f240 80e0 	bls.w	8002f6c <_printf_float+0x3c0>
 8002dac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002db0:	2200      	movs	r2, #0
 8002db2:	2300      	movs	r3, #0
 8002db4:	f7fd fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d034      	beq.n	8002e26 <_printf_float+0x27a>
 8002dbc:	4a37      	ldr	r2, [pc, #220]	; (8002e9c <_printf_float+0x2f0>)
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	4631      	mov	r1, r6
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	47b8      	blx	r7
 8002dc6:	3001      	adds	r0, #1
 8002dc8:	f43f af51 	beq.w	8002c6e <_printf_float+0xc2>
 8002dcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	db02      	blt.n	8002dda <_printf_float+0x22e>
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	07d8      	lsls	r0, r3, #31
 8002dd8:	d510      	bpl.n	8002dfc <_printf_float+0x250>
 8002dda:	ee18 3a10 	vmov	r3, s16
 8002dde:	4652      	mov	r2, sl
 8002de0:	4631      	mov	r1, r6
 8002de2:	4628      	mov	r0, r5
 8002de4:	47b8      	blx	r7
 8002de6:	3001      	adds	r0, #1
 8002de8:	f43f af41 	beq.w	8002c6e <_printf_float+0xc2>
 8002dec:	f04f 0800 	mov.w	r8, #0
 8002df0:	f104 091a 	add.w	r9, r4, #26
 8002df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	4543      	cmp	r3, r8
 8002dfa:	dc09      	bgt.n	8002e10 <_printf_float+0x264>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	079b      	lsls	r3, r3, #30
 8002e00:	f100 8105 	bmi.w	800300e <_printf_float+0x462>
 8002e04:	68e0      	ldr	r0, [r4, #12]
 8002e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e08:	4298      	cmp	r0, r3
 8002e0a:	bfb8      	it	lt
 8002e0c:	4618      	movlt	r0, r3
 8002e0e:	e730      	b.n	8002c72 <_printf_float+0xc6>
 8002e10:	2301      	movs	r3, #1
 8002e12:	464a      	mov	r2, r9
 8002e14:	4631      	mov	r1, r6
 8002e16:	4628      	mov	r0, r5
 8002e18:	47b8      	blx	r7
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	f43f af27 	beq.w	8002c6e <_printf_float+0xc2>
 8002e20:	f108 0801 	add.w	r8, r8, #1
 8002e24:	e7e6      	b.n	8002df4 <_printf_float+0x248>
 8002e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	dc39      	bgt.n	8002ea0 <_printf_float+0x2f4>
 8002e2c:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <_printf_float+0x2f0>)
 8002e2e:	2301      	movs	r3, #1
 8002e30:	4631      	mov	r1, r6
 8002e32:	4628      	mov	r0, r5
 8002e34:	47b8      	blx	r7
 8002e36:	3001      	adds	r0, #1
 8002e38:	f43f af19 	beq.w	8002c6e <_printf_float+0xc2>
 8002e3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e40:	4313      	orrs	r3, r2
 8002e42:	d102      	bne.n	8002e4a <_printf_float+0x29e>
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	07d9      	lsls	r1, r3, #31
 8002e48:	d5d8      	bpl.n	8002dfc <_printf_float+0x250>
 8002e4a:	ee18 3a10 	vmov	r3, s16
 8002e4e:	4652      	mov	r2, sl
 8002e50:	4631      	mov	r1, r6
 8002e52:	4628      	mov	r0, r5
 8002e54:	47b8      	blx	r7
 8002e56:	3001      	adds	r0, #1
 8002e58:	f43f af09 	beq.w	8002c6e <_printf_float+0xc2>
 8002e5c:	f04f 0900 	mov.w	r9, #0
 8002e60:	f104 0a1a 	add.w	sl, r4, #26
 8002e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e66:	425b      	negs	r3, r3
 8002e68:	454b      	cmp	r3, r9
 8002e6a:	dc01      	bgt.n	8002e70 <_printf_float+0x2c4>
 8002e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e6e:	e792      	b.n	8002d96 <_printf_float+0x1ea>
 8002e70:	2301      	movs	r3, #1
 8002e72:	4652      	mov	r2, sl
 8002e74:	4631      	mov	r1, r6
 8002e76:	4628      	mov	r0, r5
 8002e78:	47b8      	blx	r7
 8002e7a:	3001      	adds	r0, #1
 8002e7c:	f43f aef7 	beq.w	8002c6e <_printf_float+0xc2>
 8002e80:	f109 0901 	add.w	r9, r9, #1
 8002e84:	e7ee      	b.n	8002e64 <_printf_float+0x2b8>
 8002e86:	bf00      	nop
 8002e88:	7fefffff 	.word	0x7fefffff
 8002e8c:	08005498 	.word	0x08005498
 8002e90:	0800549c 	.word	0x0800549c
 8002e94:	080054a4 	.word	0x080054a4
 8002e98:	080054a0 	.word	0x080054a0
 8002e9c:	080054a8 	.word	0x080054a8
 8002ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	bfa8      	it	ge
 8002ea8:	461a      	movge	r2, r3
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	4691      	mov	r9, r2
 8002eae:	dc37      	bgt.n	8002f20 <_printf_float+0x374>
 8002eb0:	f04f 0b00 	mov.w	fp, #0
 8002eb4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002eb8:	f104 021a 	add.w	r2, r4, #26
 8002ebc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ebe:	9305      	str	r3, [sp, #20]
 8002ec0:	eba3 0309 	sub.w	r3, r3, r9
 8002ec4:	455b      	cmp	r3, fp
 8002ec6:	dc33      	bgt.n	8002f30 <_printf_float+0x384>
 8002ec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	db3b      	blt.n	8002f48 <_printf_float+0x39c>
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	07da      	lsls	r2, r3, #31
 8002ed4:	d438      	bmi.n	8002f48 <_printf_float+0x39c>
 8002ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ed8:	9b05      	ldr	r3, [sp, #20]
 8002eda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	eba2 0901 	sub.w	r9, r2, r1
 8002ee2:	4599      	cmp	r9, r3
 8002ee4:	bfa8      	it	ge
 8002ee6:	4699      	movge	r9, r3
 8002ee8:	f1b9 0f00 	cmp.w	r9, #0
 8002eec:	dc35      	bgt.n	8002f5a <_printf_float+0x3ae>
 8002eee:	f04f 0800 	mov.w	r8, #0
 8002ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ef6:	f104 0a1a 	add.w	sl, r4, #26
 8002efa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	eba3 0309 	sub.w	r3, r3, r9
 8002f04:	4543      	cmp	r3, r8
 8002f06:	f77f af79 	ble.w	8002dfc <_printf_float+0x250>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	4652      	mov	r2, sl
 8002f0e:	4631      	mov	r1, r6
 8002f10:	4628      	mov	r0, r5
 8002f12:	47b8      	blx	r7
 8002f14:	3001      	adds	r0, #1
 8002f16:	f43f aeaa 	beq.w	8002c6e <_printf_float+0xc2>
 8002f1a:	f108 0801 	add.w	r8, r8, #1
 8002f1e:	e7ec      	b.n	8002efa <_printf_float+0x34e>
 8002f20:	4613      	mov	r3, r2
 8002f22:	4631      	mov	r1, r6
 8002f24:	4642      	mov	r2, r8
 8002f26:	4628      	mov	r0, r5
 8002f28:	47b8      	blx	r7
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d1c0      	bne.n	8002eb0 <_printf_float+0x304>
 8002f2e:	e69e      	b.n	8002c6e <_printf_float+0xc2>
 8002f30:	2301      	movs	r3, #1
 8002f32:	4631      	mov	r1, r6
 8002f34:	4628      	mov	r0, r5
 8002f36:	9205      	str	r2, [sp, #20]
 8002f38:	47b8      	blx	r7
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	f43f ae97 	beq.w	8002c6e <_printf_float+0xc2>
 8002f40:	9a05      	ldr	r2, [sp, #20]
 8002f42:	f10b 0b01 	add.w	fp, fp, #1
 8002f46:	e7b9      	b.n	8002ebc <_printf_float+0x310>
 8002f48:	ee18 3a10 	vmov	r3, s16
 8002f4c:	4652      	mov	r2, sl
 8002f4e:	4631      	mov	r1, r6
 8002f50:	4628      	mov	r0, r5
 8002f52:	47b8      	blx	r7
 8002f54:	3001      	adds	r0, #1
 8002f56:	d1be      	bne.n	8002ed6 <_printf_float+0x32a>
 8002f58:	e689      	b.n	8002c6e <_printf_float+0xc2>
 8002f5a:	9a05      	ldr	r2, [sp, #20]
 8002f5c:	464b      	mov	r3, r9
 8002f5e:	4442      	add	r2, r8
 8002f60:	4631      	mov	r1, r6
 8002f62:	4628      	mov	r0, r5
 8002f64:	47b8      	blx	r7
 8002f66:	3001      	adds	r0, #1
 8002f68:	d1c1      	bne.n	8002eee <_printf_float+0x342>
 8002f6a:	e680      	b.n	8002c6e <_printf_float+0xc2>
 8002f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f6e:	2a01      	cmp	r2, #1
 8002f70:	dc01      	bgt.n	8002f76 <_printf_float+0x3ca>
 8002f72:	07db      	lsls	r3, r3, #31
 8002f74:	d538      	bpl.n	8002fe8 <_printf_float+0x43c>
 8002f76:	2301      	movs	r3, #1
 8002f78:	4642      	mov	r2, r8
 8002f7a:	4631      	mov	r1, r6
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	47b8      	blx	r7
 8002f80:	3001      	adds	r0, #1
 8002f82:	f43f ae74 	beq.w	8002c6e <_printf_float+0xc2>
 8002f86:	ee18 3a10 	vmov	r3, s16
 8002f8a:	4652      	mov	r2, sl
 8002f8c:	4631      	mov	r1, r6
 8002f8e:	4628      	mov	r0, r5
 8002f90:	47b8      	blx	r7
 8002f92:	3001      	adds	r0, #1
 8002f94:	f43f ae6b 	beq.w	8002c6e <_printf_float+0xc2>
 8002f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f7fd fd92 	bl	8000ac8 <__aeabi_dcmpeq>
 8002fa4:	b9d8      	cbnz	r0, 8002fde <_printf_float+0x432>
 8002fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fa8:	f108 0201 	add.w	r2, r8, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	4631      	mov	r1, r6
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	47b8      	blx	r7
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d10e      	bne.n	8002fd6 <_printf_float+0x42a>
 8002fb8:	e659      	b.n	8002c6e <_printf_float+0xc2>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	4652      	mov	r2, sl
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	47b8      	blx	r7
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	f43f ae52 	beq.w	8002c6e <_printf_float+0xc2>
 8002fca:	f108 0801 	add.w	r8, r8, #1
 8002fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	4543      	cmp	r3, r8
 8002fd4:	dcf1      	bgt.n	8002fba <_printf_float+0x40e>
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002fdc:	e6dc      	b.n	8002d98 <_printf_float+0x1ec>
 8002fde:	f04f 0800 	mov.w	r8, #0
 8002fe2:	f104 0a1a 	add.w	sl, r4, #26
 8002fe6:	e7f2      	b.n	8002fce <_printf_float+0x422>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4642      	mov	r2, r8
 8002fec:	e7df      	b.n	8002fae <_printf_float+0x402>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	464a      	mov	r2, r9
 8002ff2:	4631      	mov	r1, r6
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	47b8      	blx	r7
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	f43f ae38 	beq.w	8002c6e <_printf_float+0xc2>
 8002ffe:	f108 0801 	add.w	r8, r8, #1
 8003002:	68e3      	ldr	r3, [r4, #12]
 8003004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003006:	1a5b      	subs	r3, r3, r1
 8003008:	4543      	cmp	r3, r8
 800300a:	dcf0      	bgt.n	8002fee <_printf_float+0x442>
 800300c:	e6fa      	b.n	8002e04 <_printf_float+0x258>
 800300e:	f04f 0800 	mov.w	r8, #0
 8003012:	f104 0919 	add.w	r9, r4, #25
 8003016:	e7f4      	b.n	8003002 <_printf_float+0x456>

08003018 <_printf_common>:
 8003018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800301c:	4616      	mov	r6, r2
 800301e:	4699      	mov	r9, r3
 8003020:	688a      	ldr	r2, [r1, #8]
 8003022:	690b      	ldr	r3, [r1, #16]
 8003024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003028:	4293      	cmp	r3, r2
 800302a:	bfb8      	it	lt
 800302c:	4613      	movlt	r3, r2
 800302e:	6033      	str	r3, [r6, #0]
 8003030:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003034:	4607      	mov	r7, r0
 8003036:	460c      	mov	r4, r1
 8003038:	b10a      	cbz	r2, 800303e <_printf_common+0x26>
 800303a:	3301      	adds	r3, #1
 800303c:	6033      	str	r3, [r6, #0]
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	0699      	lsls	r1, r3, #26
 8003042:	bf42      	ittt	mi
 8003044:	6833      	ldrmi	r3, [r6, #0]
 8003046:	3302      	addmi	r3, #2
 8003048:	6033      	strmi	r3, [r6, #0]
 800304a:	6825      	ldr	r5, [r4, #0]
 800304c:	f015 0506 	ands.w	r5, r5, #6
 8003050:	d106      	bne.n	8003060 <_printf_common+0x48>
 8003052:	f104 0a19 	add.w	sl, r4, #25
 8003056:	68e3      	ldr	r3, [r4, #12]
 8003058:	6832      	ldr	r2, [r6, #0]
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	42ab      	cmp	r3, r5
 800305e:	dc26      	bgt.n	80030ae <_printf_common+0x96>
 8003060:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003064:	1e13      	subs	r3, r2, #0
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	bf18      	it	ne
 800306a:	2301      	movne	r3, #1
 800306c:	0692      	lsls	r2, r2, #26
 800306e:	d42b      	bmi.n	80030c8 <_printf_common+0xb0>
 8003070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003074:	4649      	mov	r1, r9
 8003076:	4638      	mov	r0, r7
 8003078:	47c0      	blx	r8
 800307a:	3001      	adds	r0, #1
 800307c:	d01e      	beq.n	80030bc <_printf_common+0xa4>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	68e5      	ldr	r5, [r4, #12]
 8003082:	6832      	ldr	r2, [r6, #0]
 8003084:	f003 0306 	and.w	r3, r3, #6
 8003088:	2b04      	cmp	r3, #4
 800308a:	bf08      	it	eq
 800308c:	1aad      	subeq	r5, r5, r2
 800308e:	68a3      	ldr	r3, [r4, #8]
 8003090:	6922      	ldr	r2, [r4, #16]
 8003092:	bf0c      	ite	eq
 8003094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003098:	2500      	movne	r5, #0
 800309a:	4293      	cmp	r3, r2
 800309c:	bfc4      	itt	gt
 800309e:	1a9b      	subgt	r3, r3, r2
 80030a0:	18ed      	addgt	r5, r5, r3
 80030a2:	2600      	movs	r6, #0
 80030a4:	341a      	adds	r4, #26
 80030a6:	42b5      	cmp	r5, r6
 80030a8:	d11a      	bne.n	80030e0 <_printf_common+0xc8>
 80030aa:	2000      	movs	r0, #0
 80030ac:	e008      	b.n	80030c0 <_printf_common+0xa8>
 80030ae:	2301      	movs	r3, #1
 80030b0:	4652      	mov	r2, sl
 80030b2:	4649      	mov	r1, r9
 80030b4:	4638      	mov	r0, r7
 80030b6:	47c0      	blx	r8
 80030b8:	3001      	adds	r0, #1
 80030ba:	d103      	bne.n	80030c4 <_printf_common+0xac>
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c4:	3501      	adds	r5, #1
 80030c6:	e7c6      	b.n	8003056 <_printf_common+0x3e>
 80030c8:	18e1      	adds	r1, r4, r3
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	2030      	movs	r0, #48	; 0x30
 80030ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030d2:	4422      	add	r2, r4
 80030d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030dc:	3302      	adds	r3, #2
 80030de:	e7c7      	b.n	8003070 <_printf_common+0x58>
 80030e0:	2301      	movs	r3, #1
 80030e2:	4622      	mov	r2, r4
 80030e4:	4649      	mov	r1, r9
 80030e6:	4638      	mov	r0, r7
 80030e8:	47c0      	blx	r8
 80030ea:	3001      	adds	r0, #1
 80030ec:	d0e6      	beq.n	80030bc <_printf_common+0xa4>
 80030ee:	3601      	adds	r6, #1
 80030f0:	e7d9      	b.n	80030a6 <_printf_common+0x8e>
	...

080030f4 <_printf_i>:
 80030f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030f8:	460c      	mov	r4, r1
 80030fa:	4691      	mov	r9, r2
 80030fc:	7e27      	ldrb	r7, [r4, #24]
 80030fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003100:	2f78      	cmp	r7, #120	; 0x78
 8003102:	4680      	mov	r8, r0
 8003104:	469a      	mov	sl, r3
 8003106:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800310a:	d807      	bhi.n	800311c <_printf_i+0x28>
 800310c:	2f62      	cmp	r7, #98	; 0x62
 800310e:	d80a      	bhi.n	8003126 <_printf_i+0x32>
 8003110:	2f00      	cmp	r7, #0
 8003112:	f000 80d8 	beq.w	80032c6 <_printf_i+0x1d2>
 8003116:	2f58      	cmp	r7, #88	; 0x58
 8003118:	f000 80a3 	beq.w	8003262 <_printf_i+0x16e>
 800311c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003124:	e03a      	b.n	800319c <_printf_i+0xa8>
 8003126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800312a:	2b15      	cmp	r3, #21
 800312c:	d8f6      	bhi.n	800311c <_printf_i+0x28>
 800312e:	a001      	add	r0, pc, #4	; (adr r0, 8003134 <_printf_i+0x40>)
 8003130:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003134:	0800318d 	.word	0x0800318d
 8003138:	080031a1 	.word	0x080031a1
 800313c:	0800311d 	.word	0x0800311d
 8003140:	0800311d 	.word	0x0800311d
 8003144:	0800311d 	.word	0x0800311d
 8003148:	0800311d 	.word	0x0800311d
 800314c:	080031a1 	.word	0x080031a1
 8003150:	0800311d 	.word	0x0800311d
 8003154:	0800311d 	.word	0x0800311d
 8003158:	0800311d 	.word	0x0800311d
 800315c:	0800311d 	.word	0x0800311d
 8003160:	080032ad 	.word	0x080032ad
 8003164:	080031d1 	.word	0x080031d1
 8003168:	0800328f 	.word	0x0800328f
 800316c:	0800311d 	.word	0x0800311d
 8003170:	0800311d 	.word	0x0800311d
 8003174:	080032cf 	.word	0x080032cf
 8003178:	0800311d 	.word	0x0800311d
 800317c:	080031d1 	.word	0x080031d1
 8003180:	0800311d 	.word	0x0800311d
 8003184:	0800311d 	.word	0x0800311d
 8003188:	08003297 	.word	0x08003297
 800318c:	680b      	ldr	r3, [r1, #0]
 800318e:	1d1a      	adds	r2, r3, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	600a      	str	r2, [r1, #0]
 8003194:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800319c:	2301      	movs	r3, #1
 800319e:	e0a3      	b.n	80032e8 <_printf_i+0x1f4>
 80031a0:	6825      	ldr	r5, [r4, #0]
 80031a2:	6808      	ldr	r0, [r1, #0]
 80031a4:	062e      	lsls	r6, r5, #24
 80031a6:	f100 0304 	add.w	r3, r0, #4
 80031aa:	d50a      	bpl.n	80031c2 <_printf_i+0xce>
 80031ac:	6805      	ldr	r5, [r0, #0]
 80031ae:	600b      	str	r3, [r1, #0]
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	da03      	bge.n	80031bc <_printf_i+0xc8>
 80031b4:	232d      	movs	r3, #45	; 0x2d
 80031b6:	426d      	negs	r5, r5
 80031b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031bc:	485e      	ldr	r0, [pc, #376]	; (8003338 <_printf_i+0x244>)
 80031be:	230a      	movs	r3, #10
 80031c0:	e019      	b.n	80031f6 <_printf_i+0x102>
 80031c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80031c6:	6805      	ldr	r5, [r0, #0]
 80031c8:	600b      	str	r3, [r1, #0]
 80031ca:	bf18      	it	ne
 80031cc:	b22d      	sxthne	r5, r5
 80031ce:	e7ef      	b.n	80031b0 <_printf_i+0xbc>
 80031d0:	680b      	ldr	r3, [r1, #0]
 80031d2:	6825      	ldr	r5, [r4, #0]
 80031d4:	1d18      	adds	r0, r3, #4
 80031d6:	6008      	str	r0, [r1, #0]
 80031d8:	0628      	lsls	r0, r5, #24
 80031da:	d501      	bpl.n	80031e0 <_printf_i+0xec>
 80031dc:	681d      	ldr	r5, [r3, #0]
 80031de:	e002      	b.n	80031e6 <_printf_i+0xf2>
 80031e0:	0669      	lsls	r1, r5, #25
 80031e2:	d5fb      	bpl.n	80031dc <_printf_i+0xe8>
 80031e4:	881d      	ldrh	r5, [r3, #0]
 80031e6:	4854      	ldr	r0, [pc, #336]	; (8003338 <_printf_i+0x244>)
 80031e8:	2f6f      	cmp	r7, #111	; 0x6f
 80031ea:	bf0c      	ite	eq
 80031ec:	2308      	moveq	r3, #8
 80031ee:	230a      	movne	r3, #10
 80031f0:	2100      	movs	r1, #0
 80031f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031f6:	6866      	ldr	r6, [r4, #4]
 80031f8:	60a6      	str	r6, [r4, #8]
 80031fa:	2e00      	cmp	r6, #0
 80031fc:	bfa2      	ittt	ge
 80031fe:	6821      	ldrge	r1, [r4, #0]
 8003200:	f021 0104 	bicge.w	r1, r1, #4
 8003204:	6021      	strge	r1, [r4, #0]
 8003206:	b90d      	cbnz	r5, 800320c <_printf_i+0x118>
 8003208:	2e00      	cmp	r6, #0
 800320a:	d04d      	beq.n	80032a8 <_printf_i+0x1b4>
 800320c:	4616      	mov	r6, r2
 800320e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003212:	fb03 5711 	mls	r7, r3, r1, r5
 8003216:	5dc7      	ldrb	r7, [r0, r7]
 8003218:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800321c:	462f      	mov	r7, r5
 800321e:	42bb      	cmp	r3, r7
 8003220:	460d      	mov	r5, r1
 8003222:	d9f4      	bls.n	800320e <_printf_i+0x11a>
 8003224:	2b08      	cmp	r3, #8
 8003226:	d10b      	bne.n	8003240 <_printf_i+0x14c>
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	07df      	lsls	r7, r3, #31
 800322c:	d508      	bpl.n	8003240 <_printf_i+0x14c>
 800322e:	6923      	ldr	r3, [r4, #16]
 8003230:	6861      	ldr	r1, [r4, #4]
 8003232:	4299      	cmp	r1, r3
 8003234:	bfde      	ittt	le
 8003236:	2330      	movle	r3, #48	; 0x30
 8003238:	f806 3c01 	strble.w	r3, [r6, #-1]
 800323c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003240:	1b92      	subs	r2, r2, r6
 8003242:	6122      	str	r2, [r4, #16]
 8003244:	f8cd a000 	str.w	sl, [sp]
 8003248:	464b      	mov	r3, r9
 800324a:	aa03      	add	r2, sp, #12
 800324c:	4621      	mov	r1, r4
 800324e:	4640      	mov	r0, r8
 8003250:	f7ff fee2 	bl	8003018 <_printf_common>
 8003254:	3001      	adds	r0, #1
 8003256:	d14c      	bne.n	80032f2 <_printf_i+0x1fe>
 8003258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800325c:	b004      	add	sp, #16
 800325e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003262:	4835      	ldr	r0, [pc, #212]	; (8003338 <_printf_i+0x244>)
 8003264:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	680e      	ldr	r6, [r1, #0]
 800326c:	061f      	lsls	r7, r3, #24
 800326e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003272:	600e      	str	r6, [r1, #0]
 8003274:	d514      	bpl.n	80032a0 <_printf_i+0x1ac>
 8003276:	07d9      	lsls	r1, r3, #31
 8003278:	bf44      	itt	mi
 800327a:	f043 0320 	orrmi.w	r3, r3, #32
 800327e:	6023      	strmi	r3, [r4, #0]
 8003280:	b91d      	cbnz	r5, 800328a <_printf_i+0x196>
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	f023 0320 	bic.w	r3, r3, #32
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	2310      	movs	r3, #16
 800328c:	e7b0      	b.n	80031f0 <_printf_i+0xfc>
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	f043 0320 	orr.w	r3, r3, #32
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	2378      	movs	r3, #120	; 0x78
 8003298:	4828      	ldr	r0, [pc, #160]	; (800333c <_printf_i+0x248>)
 800329a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800329e:	e7e3      	b.n	8003268 <_printf_i+0x174>
 80032a0:	065e      	lsls	r6, r3, #25
 80032a2:	bf48      	it	mi
 80032a4:	b2ad      	uxthmi	r5, r5
 80032a6:	e7e6      	b.n	8003276 <_printf_i+0x182>
 80032a8:	4616      	mov	r6, r2
 80032aa:	e7bb      	b.n	8003224 <_printf_i+0x130>
 80032ac:	680b      	ldr	r3, [r1, #0]
 80032ae:	6826      	ldr	r6, [r4, #0]
 80032b0:	6960      	ldr	r0, [r4, #20]
 80032b2:	1d1d      	adds	r5, r3, #4
 80032b4:	600d      	str	r5, [r1, #0]
 80032b6:	0635      	lsls	r5, r6, #24
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	d501      	bpl.n	80032c0 <_printf_i+0x1cc>
 80032bc:	6018      	str	r0, [r3, #0]
 80032be:	e002      	b.n	80032c6 <_printf_i+0x1d2>
 80032c0:	0671      	lsls	r1, r6, #25
 80032c2:	d5fb      	bpl.n	80032bc <_printf_i+0x1c8>
 80032c4:	8018      	strh	r0, [r3, #0]
 80032c6:	2300      	movs	r3, #0
 80032c8:	6123      	str	r3, [r4, #16]
 80032ca:	4616      	mov	r6, r2
 80032cc:	e7ba      	b.n	8003244 <_printf_i+0x150>
 80032ce:	680b      	ldr	r3, [r1, #0]
 80032d0:	1d1a      	adds	r2, r3, #4
 80032d2:	600a      	str	r2, [r1, #0]
 80032d4:	681e      	ldr	r6, [r3, #0]
 80032d6:	6862      	ldr	r2, [r4, #4]
 80032d8:	2100      	movs	r1, #0
 80032da:	4630      	mov	r0, r6
 80032dc:	f7fc ff80 	bl	80001e0 <memchr>
 80032e0:	b108      	cbz	r0, 80032e6 <_printf_i+0x1f2>
 80032e2:	1b80      	subs	r0, r0, r6
 80032e4:	6060      	str	r0, [r4, #4]
 80032e6:	6863      	ldr	r3, [r4, #4]
 80032e8:	6123      	str	r3, [r4, #16]
 80032ea:	2300      	movs	r3, #0
 80032ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032f0:	e7a8      	b.n	8003244 <_printf_i+0x150>
 80032f2:	6923      	ldr	r3, [r4, #16]
 80032f4:	4632      	mov	r2, r6
 80032f6:	4649      	mov	r1, r9
 80032f8:	4640      	mov	r0, r8
 80032fa:	47d0      	blx	sl
 80032fc:	3001      	adds	r0, #1
 80032fe:	d0ab      	beq.n	8003258 <_printf_i+0x164>
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	079b      	lsls	r3, r3, #30
 8003304:	d413      	bmi.n	800332e <_printf_i+0x23a>
 8003306:	68e0      	ldr	r0, [r4, #12]
 8003308:	9b03      	ldr	r3, [sp, #12]
 800330a:	4298      	cmp	r0, r3
 800330c:	bfb8      	it	lt
 800330e:	4618      	movlt	r0, r3
 8003310:	e7a4      	b.n	800325c <_printf_i+0x168>
 8003312:	2301      	movs	r3, #1
 8003314:	4632      	mov	r2, r6
 8003316:	4649      	mov	r1, r9
 8003318:	4640      	mov	r0, r8
 800331a:	47d0      	blx	sl
 800331c:	3001      	adds	r0, #1
 800331e:	d09b      	beq.n	8003258 <_printf_i+0x164>
 8003320:	3501      	adds	r5, #1
 8003322:	68e3      	ldr	r3, [r4, #12]
 8003324:	9903      	ldr	r1, [sp, #12]
 8003326:	1a5b      	subs	r3, r3, r1
 8003328:	42ab      	cmp	r3, r5
 800332a:	dcf2      	bgt.n	8003312 <_printf_i+0x21e>
 800332c:	e7eb      	b.n	8003306 <_printf_i+0x212>
 800332e:	2500      	movs	r5, #0
 8003330:	f104 0619 	add.w	r6, r4, #25
 8003334:	e7f5      	b.n	8003322 <_printf_i+0x22e>
 8003336:	bf00      	nop
 8003338:	080054aa 	.word	0x080054aa
 800333c:	080054bb 	.word	0x080054bb

08003340 <iprintf>:
 8003340:	b40f      	push	{r0, r1, r2, r3}
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <iprintf+0x2c>)
 8003344:	b513      	push	{r0, r1, r4, lr}
 8003346:	681c      	ldr	r4, [r3, #0]
 8003348:	b124      	cbz	r4, 8003354 <iprintf+0x14>
 800334a:	69a3      	ldr	r3, [r4, #24]
 800334c:	b913      	cbnz	r3, 8003354 <iprintf+0x14>
 800334e:	4620      	mov	r0, r4
 8003350:	f000 fede 	bl	8004110 <__sinit>
 8003354:	ab05      	add	r3, sp, #20
 8003356:	9a04      	ldr	r2, [sp, #16]
 8003358:	68a1      	ldr	r1, [r4, #8]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	4620      	mov	r0, r4
 800335e:	f001 fbf5 	bl	8004b4c <_vfiprintf_r>
 8003362:	b002      	add	sp, #8
 8003364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003368:	b004      	add	sp, #16
 800336a:	4770      	bx	lr
 800336c:	2000000c 	.word	0x2000000c

08003370 <quorem>:
 8003370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003374:	6903      	ldr	r3, [r0, #16]
 8003376:	690c      	ldr	r4, [r1, #16]
 8003378:	42a3      	cmp	r3, r4
 800337a:	4607      	mov	r7, r0
 800337c:	f2c0 8081 	blt.w	8003482 <quorem+0x112>
 8003380:	3c01      	subs	r4, #1
 8003382:	f101 0814 	add.w	r8, r1, #20
 8003386:	f100 0514 	add.w	r5, r0, #20
 800338a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003394:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003398:	3301      	adds	r3, #1
 800339a:	429a      	cmp	r2, r3
 800339c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80033a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80033a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80033a8:	d331      	bcc.n	800340e <quorem+0x9e>
 80033aa:	f04f 0e00 	mov.w	lr, #0
 80033ae:	4640      	mov	r0, r8
 80033b0:	46ac      	mov	ip, r5
 80033b2:	46f2      	mov	sl, lr
 80033b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80033b8:	b293      	uxth	r3, r2
 80033ba:	fb06 e303 	mla	r3, r6, r3, lr
 80033be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	ebaa 0303 	sub.w	r3, sl, r3
 80033c8:	0c12      	lsrs	r2, r2, #16
 80033ca:	f8dc a000 	ldr.w	sl, [ip]
 80033ce:	fb06 e202 	mla	r2, r6, r2, lr
 80033d2:	fa13 f38a 	uxtah	r3, r3, sl
 80033d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80033da:	fa1f fa82 	uxth.w	sl, r2
 80033de:	f8dc 2000 	ldr.w	r2, [ip]
 80033e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80033e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033f0:	4581      	cmp	r9, r0
 80033f2:	f84c 3b04 	str.w	r3, [ip], #4
 80033f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80033fa:	d2db      	bcs.n	80033b4 <quorem+0x44>
 80033fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8003400:	b92b      	cbnz	r3, 800340e <quorem+0x9e>
 8003402:	9b01      	ldr	r3, [sp, #4]
 8003404:	3b04      	subs	r3, #4
 8003406:	429d      	cmp	r5, r3
 8003408:	461a      	mov	r2, r3
 800340a:	d32e      	bcc.n	800346a <quorem+0xfa>
 800340c:	613c      	str	r4, [r7, #16]
 800340e:	4638      	mov	r0, r7
 8003410:	f001 f9b8 	bl	8004784 <__mcmp>
 8003414:	2800      	cmp	r0, #0
 8003416:	db24      	blt.n	8003462 <quorem+0xf2>
 8003418:	3601      	adds	r6, #1
 800341a:	4628      	mov	r0, r5
 800341c:	f04f 0c00 	mov.w	ip, #0
 8003420:	f858 2b04 	ldr.w	r2, [r8], #4
 8003424:	f8d0 e000 	ldr.w	lr, [r0]
 8003428:	b293      	uxth	r3, r2
 800342a:	ebac 0303 	sub.w	r3, ip, r3
 800342e:	0c12      	lsrs	r2, r2, #16
 8003430:	fa13 f38e 	uxtah	r3, r3, lr
 8003434:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003438:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800343c:	b29b      	uxth	r3, r3
 800343e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003442:	45c1      	cmp	r9, r8
 8003444:	f840 3b04 	str.w	r3, [r0], #4
 8003448:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800344c:	d2e8      	bcs.n	8003420 <quorem+0xb0>
 800344e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003456:	b922      	cbnz	r2, 8003462 <quorem+0xf2>
 8003458:	3b04      	subs	r3, #4
 800345a:	429d      	cmp	r5, r3
 800345c:	461a      	mov	r2, r3
 800345e:	d30a      	bcc.n	8003476 <quorem+0x106>
 8003460:	613c      	str	r4, [r7, #16]
 8003462:	4630      	mov	r0, r6
 8003464:	b003      	add	sp, #12
 8003466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	3b04      	subs	r3, #4
 800346e:	2a00      	cmp	r2, #0
 8003470:	d1cc      	bne.n	800340c <quorem+0x9c>
 8003472:	3c01      	subs	r4, #1
 8003474:	e7c7      	b.n	8003406 <quorem+0x96>
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	3b04      	subs	r3, #4
 800347a:	2a00      	cmp	r2, #0
 800347c:	d1f0      	bne.n	8003460 <quorem+0xf0>
 800347e:	3c01      	subs	r4, #1
 8003480:	e7eb      	b.n	800345a <quorem+0xea>
 8003482:	2000      	movs	r0, #0
 8003484:	e7ee      	b.n	8003464 <quorem+0xf4>
	...

08003488 <_dtoa_r>:
 8003488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800348c:	ed2d 8b02 	vpush	{d8}
 8003490:	ec57 6b10 	vmov	r6, r7, d0
 8003494:	b095      	sub	sp, #84	; 0x54
 8003496:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003498:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800349c:	9105      	str	r1, [sp, #20]
 800349e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80034a2:	4604      	mov	r4, r0
 80034a4:	9209      	str	r2, [sp, #36]	; 0x24
 80034a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80034a8:	b975      	cbnz	r5, 80034c8 <_dtoa_r+0x40>
 80034aa:	2010      	movs	r0, #16
 80034ac:	f000 fed6 	bl	800425c <malloc>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6260      	str	r0, [r4, #36]	; 0x24
 80034b4:	b920      	cbnz	r0, 80034c0 <_dtoa_r+0x38>
 80034b6:	4bb2      	ldr	r3, [pc, #712]	; (8003780 <_dtoa_r+0x2f8>)
 80034b8:	21ea      	movs	r1, #234	; 0xea
 80034ba:	48b2      	ldr	r0, [pc, #712]	; (8003784 <_dtoa_r+0x2fc>)
 80034bc:	f001 fd9c 	bl	8004ff8 <__assert_func>
 80034c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80034c4:	6005      	str	r5, [r0, #0]
 80034c6:	60c5      	str	r5, [r0, #12]
 80034c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	b151      	cbz	r1, 80034e4 <_dtoa_r+0x5c>
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	604a      	str	r2, [r1, #4]
 80034d2:	2301      	movs	r3, #1
 80034d4:	4093      	lsls	r3, r2
 80034d6:	608b      	str	r3, [r1, #8]
 80034d8:	4620      	mov	r0, r4
 80034da:	f000 ff15 	bl	8004308 <_Bfree>
 80034de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	1e3b      	subs	r3, r7, #0
 80034e6:	bfb9      	ittee	lt
 80034e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80034ec:	9303      	strlt	r3, [sp, #12]
 80034ee:	2300      	movge	r3, #0
 80034f0:	f8c8 3000 	strge.w	r3, [r8]
 80034f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80034f8:	4ba3      	ldr	r3, [pc, #652]	; (8003788 <_dtoa_r+0x300>)
 80034fa:	bfbc      	itt	lt
 80034fc:	2201      	movlt	r2, #1
 80034fe:	f8c8 2000 	strlt.w	r2, [r8]
 8003502:	ea33 0309 	bics.w	r3, r3, r9
 8003506:	d11b      	bne.n	8003540 <_dtoa_r+0xb8>
 8003508:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800350a:	f242 730f 	movw	r3, #9999	; 0x270f
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003514:	4333      	orrs	r3, r6
 8003516:	f000 857a 	beq.w	800400e <_dtoa_r+0xb86>
 800351a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800351c:	b963      	cbnz	r3, 8003538 <_dtoa_r+0xb0>
 800351e:	4b9b      	ldr	r3, [pc, #620]	; (800378c <_dtoa_r+0x304>)
 8003520:	e024      	b.n	800356c <_dtoa_r+0xe4>
 8003522:	4b9b      	ldr	r3, [pc, #620]	; (8003790 <_dtoa_r+0x308>)
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	3308      	adds	r3, #8
 8003528:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	9800      	ldr	r0, [sp, #0]
 800352e:	b015      	add	sp, #84	; 0x54
 8003530:	ecbd 8b02 	vpop	{d8}
 8003534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003538:	4b94      	ldr	r3, [pc, #592]	; (800378c <_dtoa_r+0x304>)
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	3303      	adds	r3, #3
 800353e:	e7f3      	b.n	8003528 <_dtoa_r+0xa0>
 8003540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	ec51 0b17 	vmov	r0, r1, d7
 800354a:	2300      	movs	r3, #0
 800354c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003550:	f7fd faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8003554:	4680      	mov	r8, r0
 8003556:	b158      	cbz	r0, 8003570 <_dtoa_r+0xe8>
 8003558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800355a:	2301      	movs	r3, #1
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8551 	beq.w	8004008 <_dtoa_r+0xb80>
 8003566:	488b      	ldr	r0, [pc, #556]	; (8003794 <_dtoa_r+0x30c>)
 8003568:	6018      	str	r0, [r3, #0]
 800356a:	1e43      	subs	r3, r0, #1
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	e7dd      	b.n	800352c <_dtoa_r+0xa4>
 8003570:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003574:	aa12      	add	r2, sp, #72	; 0x48
 8003576:	a913      	add	r1, sp, #76	; 0x4c
 8003578:	4620      	mov	r0, r4
 800357a:	f001 f9a7 	bl	80048cc <__d2b>
 800357e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003582:	4683      	mov	fp, r0
 8003584:	2d00      	cmp	r5, #0
 8003586:	d07c      	beq.n	8003682 <_dtoa_r+0x1fa>
 8003588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800358a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800358e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003592:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003596:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800359a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800359e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80035a2:	4b7d      	ldr	r3, [pc, #500]	; (8003798 <_dtoa_r+0x310>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	4630      	mov	r0, r6
 80035a8:	4639      	mov	r1, r7
 80035aa:	f7fc fe6d 	bl	8000288 <__aeabi_dsub>
 80035ae:	a36e      	add	r3, pc, #440	; (adr r3, 8003768 <_dtoa_r+0x2e0>)
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f7fd f820 	bl	80005f8 <__aeabi_dmul>
 80035b8:	a36d      	add	r3, pc, #436	; (adr r3, 8003770 <_dtoa_r+0x2e8>)
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	f7fc fe65 	bl	800028c <__adddf3>
 80035c2:	4606      	mov	r6, r0
 80035c4:	4628      	mov	r0, r5
 80035c6:	460f      	mov	r7, r1
 80035c8:	f7fc ffac 	bl	8000524 <__aeabi_i2d>
 80035cc:	a36a      	add	r3, pc, #424	; (adr r3, 8003778 <_dtoa_r+0x2f0>)
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f7fd f811 	bl	80005f8 <__aeabi_dmul>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4630      	mov	r0, r6
 80035dc:	4639      	mov	r1, r7
 80035de:	f7fc fe55 	bl	800028c <__adddf3>
 80035e2:	4606      	mov	r6, r0
 80035e4:	460f      	mov	r7, r1
 80035e6:	f7fd fab7 	bl	8000b58 <__aeabi_d2iz>
 80035ea:	2200      	movs	r2, #0
 80035ec:	4682      	mov	sl, r0
 80035ee:	2300      	movs	r3, #0
 80035f0:	4630      	mov	r0, r6
 80035f2:	4639      	mov	r1, r7
 80035f4:	f7fd fa72 	bl	8000adc <__aeabi_dcmplt>
 80035f8:	b148      	cbz	r0, 800360e <_dtoa_r+0x186>
 80035fa:	4650      	mov	r0, sl
 80035fc:	f7fc ff92 	bl	8000524 <__aeabi_i2d>
 8003600:	4632      	mov	r2, r6
 8003602:	463b      	mov	r3, r7
 8003604:	f7fd fa60 	bl	8000ac8 <__aeabi_dcmpeq>
 8003608:	b908      	cbnz	r0, 800360e <_dtoa_r+0x186>
 800360a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800360e:	f1ba 0f16 	cmp.w	sl, #22
 8003612:	d854      	bhi.n	80036be <_dtoa_r+0x236>
 8003614:	4b61      	ldr	r3, [pc, #388]	; (800379c <_dtoa_r+0x314>)
 8003616:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003622:	f7fd fa5b 	bl	8000adc <__aeabi_dcmplt>
 8003626:	2800      	cmp	r0, #0
 8003628:	d04b      	beq.n	80036c2 <_dtoa_r+0x23a>
 800362a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800362e:	2300      	movs	r3, #0
 8003630:	930e      	str	r3, [sp, #56]	; 0x38
 8003632:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003634:	1b5d      	subs	r5, r3, r5
 8003636:	1e6b      	subs	r3, r5, #1
 8003638:	9304      	str	r3, [sp, #16]
 800363a:	bf43      	ittte	mi
 800363c:	2300      	movmi	r3, #0
 800363e:	f1c5 0801 	rsbmi	r8, r5, #1
 8003642:	9304      	strmi	r3, [sp, #16]
 8003644:	f04f 0800 	movpl.w	r8, #0
 8003648:	f1ba 0f00 	cmp.w	sl, #0
 800364c:	db3b      	blt.n	80036c6 <_dtoa_r+0x23e>
 800364e:	9b04      	ldr	r3, [sp, #16]
 8003650:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003654:	4453      	add	r3, sl
 8003656:	9304      	str	r3, [sp, #16]
 8003658:	2300      	movs	r3, #0
 800365a:	9306      	str	r3, [sp, #24]
 800365c:	9b05      	ldr	r3, [sp, #20]
 800365e:	2b09      	cmp	r3, #9
 8003660:	d869      	bhi.n	8003736 <_dtoa_r+0x2ae>
 8003662:	2b05      	cmp	r3, #5
 8003664:	bfc4      	itt	gt
 8003666:	3b04      	subgt	r3, #4
 8003668:	9305      	strgt	r3, [sp, #20]
 800366a:	9b05      	ldr	r3, [sp, #20]
 800366c:	f1a3 0302 	sub.w	r3, r3, #2
 8003670:	bfcc      	ite	gt
 8003672:	2500      	movgt	r5, #0
 8003674:	2501      	movle	r5, #1
 8003676:	2b03      	cmp	r3, #3
 8003678:	d869      	bhi.n	800374e <_dtoa_r+0x2c6>
 800367a:	e8df f003 	tbb	[pc, r3]
 800367e:	4e2c      	.short	0x4e2c
 8003680:	5a4c      	.short	0x5a4c
 8003682:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003686:	441d      	add	r5, r3
 8003688:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800368c:	2b20      	cmp	r3, #32
 800368e:	bfc1      	itttt	gt
 8003690:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003694:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003698:	fa09 f303 	lslgt.w	r3, r9, r3
 800369c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80036a0:	bfda      	itte	le
 80036a2:	f1c3 0320 	rsble	r3, r3, #32
 80036a6:	fa06 f003 	lslle.w	r0, r6, r3
 80036aa:	4318      	orrgt	r0, r3
 80036ac:	f7fc ff2a 	bl	8000504 <__aeabi_ui2d>
 80036b0:	2301      	movs	r3, #1
 80036b2:	4606      	mov	r6, r0
 80036b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80036b8:	3d01      	subs	r5, #1
 80036ba:	9310      	str	r3, [sp, #64]	; 0x40
 80036bc:	e771      	b.n	80035a2 <_dtoa_r+0x11a>
 80036be:	2301      	movs	r3, #1
 80036c0:	e7b6      	b.n	8003630 <_dtoa_r+0x1a8>
 80036c2:	900e      	str	r0, [sp, #56]	; 0x38
 80036c4:	e7b5      	b.n	8003632 <_dtoa_r+0x1aa>
 80036c6:	f1ca 0300 	rsb	r3, sl, #0
 80036ca:	9306      	str	r3, [sp, #24]
 80036cc:	2300      	movs	r3, #0
 80036ce:	eba8 080a 	sub.w	r8, r8, sl
 80036d2:	930d      	str	r3, [sp, #52]	; 0x34
 80036d4:	e7c2      	b.n	800365c <_dtoa_r+0x1d4>
 80036d6:	2300      	movs	r3, #0
 80036d8:	9308      	str	r3, [sp, #32]
 80036da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036dc:	2b00      	cmp	r3, #0
 80036de:	dc39      	bgt.n	8003754 <_dtoa_r+0x2cc>
 80036e0:	f04f 0901 	mov.w	r9, #1
 80036e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80036e8:	464b      	mov	r3, r9
 80036ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80036ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80036f0:	2200      	movs	r2, #0
 80036f2:	6042      	str	r2, [r0, #4]
 80036f4:	2204      	movs	r2, #4
 80036f6:	f102 0614 	add.w	r6, r2, #20
 80036fa:	429e      	cmp	r6, r3
 80036fc:	6841      	ldr	r1, [r0, #4]
 80036fe:	d92f      	bls.n	8003760 <_dtoa_r+0x2d8>
 8003700:	4620      	mov	r0, r4
 8003702:	f000 fdc1 	bl	8004288 <_Balloc>
 8003706:	9000      	str	r0, [sp, #0]
 8003708:	2800      	cmp	r0, #0
 800370a:	d14b      	bne.n	80037a4 <_dtoa_r+0x31c>
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <_dtoa_r+0x318>)
 800370e:	4602      	mov	r2, r0
 8003710:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003714:	e6d1      	b.n	80034ba <_dtoa_r+0x32>
 8003716:	2301      	movs	r3, #1
 8003718:	e7de      	b.n	80036d8 <_dtoa_r+0x250>
 800371a:	2300      	movs	r3, #0
 800371c:	9308      	str	r3, [sp, #32]
 800371e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003720:	eb0a 0903 	add.w	r9, sl, r3
 8003724:	f109 0301 	add.w	r3, r9, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	bfb8      	it	lt
 800372e:	2301      	movlt	r3, #1
 8003730:	e7dd      	b.n	80036ee <_dtoa_r+0x266>
 8003732:	2301      	movs	r3, #1
 8003734:	e7f2      	b.n	800371c <_dtoa_r+0x294>
 8003736:	2501      	movs	r5, #1
 8003738:	2300      	movs	r3, #0
 800373a:	9305      	str	r3, [sp, #20]
 800373c:	9508      	str	r5, [sp, #32]
 800373e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8003742:	2200      	movs	r2, #0
 8003744:	f8cd 9004 	str.w	r9, [sp, #4]
 8003748:	2312      	movs	r3, #18
 800374a:	9209      	str	r2, [sp, #36]	; 0x24
 800374c:	e7cf      	b.n	80036ee <_dtoa_r+0x266>
 800374e:	2301      	movs	r3, #1
 8003750:	9308      	str	r3, [sp, #32]
 8003752:	e7f4      	b.n	800373e <_dtoa_r+0x2b6>
 8003754:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003758:	f8cd 9004 	str.w	r9, [sp, #4]
 800375c:	464b      	mov	r3, r9
 800375e:	e7c6      	b.n	80036ee <_dtoa_r+0x266>
 8003760:	3101      	adds	r1, #1
 8003762:	6041      	str	r1, [r0, #4]
 8003764:	0052      	lsls	r2, r2, #1
 8003766:	e7c6      	b.n	80036f6 <_dtoa_r+0x26e>
 8003768:	636f4361 	.word	0x636f4361
 800376c:	3fd287a7 	.word	0x3fd287a7
 8003770:	8b60c8b3 	.word	0x8b60c8b3
 8003774:	3fc68a28 	.word	0x3fc68a28
 8003778:	509f79fb 	.word	0x509f79fb
 800377c:	3fd34413 	.word	0x3fd34413
 8003780:	080054d9 	.word	0x080054d9
 8003784:	080054f0 	.word	0x080054f0
 8003788:	7ff00000 	.word	0x7ff00000
 800378c:	080054d5 	.word	0x080054d5
 8003790:	080054cc 	.word	0x080054cc
 8003794:	080054a9 	.word	0x080054a9
 8003798:	3ff80000 	.word	0x3ff80000
 800379c:	08005648 	.word	0x08005648
 80037a0:	0800554f 	.word	0x0800554f
 80037a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037a6:	9a00      	ldr	r2, [sp, #0]
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	9b01      	ldr	r3, [sp, #4]
 80037ac:	2b0e      	cmp	r3, #14
 80037ae:	f200 80ad 	bhi.w	800390c <_dtoa_r+0x484>
 80037b2:	2d00      	cmp	r5, #0
 80037b4:	f000 80aa 	beq.w	800390c <_dtoa_r+0x484>
 80037b8:	f1ba 0f00 	cmp.w	sl, #0
 80037bc:	dd36      	ble.n	800382c <_dtoa_r+0x3a4>
 80037be:	4ac3      	ldr	r2, [pc, #780]	; (8003acc <_dtoa_r+0x644>)
 80037c0:	f00a 030f 	and.w	r3, sl, #15
 80037c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80037c8:	ed93 7b00 	vldr	d7, [r3]
 80037cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80037d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80037d4:	eeb0 8a47 	vmov.f32	s16, s14
 80037d8:	eef0 8a67 	vmov.f32	s17, s15
 80037dc:	d016      	beq.n	800380c <_dtoa_r+0x384>
 80037de:	4bbc      	ldr	r3, [pc, #752]	; (8003ad0 <_dtoa_r+0x648>)
 80037e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80037e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80037e8:	f7fd f830 	bl	800084c <__aeabi_ddiv>
 80037ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037f0:	f007 070f 	and.w	r7, r7, #15
 80037f4:	2503      	movs	r5, #3
 80037f6:	4eb6      	ldr	r6, [pc, #728]	; (8003ad0 <_dtoa_r+0x648>)
 80037f8:	b957      	cbnz	r7, 8003810 <_dtoa_r+0x388>
 80037fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037fe:	ec53 2b18 	vmov	r2, r3, d8
 8003802:	f7fd f823 	bl	800084c <__aeabi_ddiv>
 8003806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800380a:	e029      	b.n	8003860 <_dtoa_r+0x3d8>
 800380c:	2502      	movs	r5, #2
 800380e:	e7f2      	b.n	80037f6 <_dtoa_r+0x36e>
 8003810:	07f9      	lsls	r1, r7, #31
 8003812:	d508      	bpl.n	8003826 <_dtoa_r+0x39e>
 8003814:	ec51 0b18 	vmov	r0, r1, d8
 8003818:	e9d6 2300 	ldrd	r2, r3, [r6]
 800381c:	f7fc feec 	bl	80005f8 <__aeabi_dmul>
 8003820:	ec41 0b18 	vmov	d8, r0, r1
 8003824:	3501      	adds	r5, #1
 8003826:	107f      	asrs	r7, r7, #1
 8003828:	3608      	adds	r6, #8
 800382a:	e7e5      	b.n	80037f8 <_dtoa_r+0x370>
 800382c:	f000 80a6 	beq.w	800397c <_dtoa_r+0x4f4>
 8003830:	f1ca 0600 	rsb	r6, sl, #0
 8003834:	4ba5      	ldr	r3, [pc, #660]	; (8003acc <_dtoa_r+0x644>)
 8003836:	4fa6      	ldr	r7, [pc, #664]	; (8003ad0 <_dtoa_r+0x648>)
 8003838:	f006 020f 	and.w	r2, r6, #15
 800383c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003848:	f7fc fed6 	bl	80005f8 <__aeabi_dmul>
 800384c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003850:	1136      	asrs	r6, r6, #4
 8003852:	2300      	movs	r3, #0
 8003854:	2502      	movs	r5, #2
 8003856:	2e00      	cmp	r6, #0
 8003858:	f040 8085 	bne.w	8003966 <_dtoa_r+0x4de>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1d2      	bne.n	8003806 <_dtoa_r+0x37e>
 8003860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 808c 	beq.w	8003980 <_dtoa_r+0x4f8>
 8003868:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800386c:	4b99      	ldr	r3, [pc, #612]	; (8003ad4 <_dtoa_r+0x64c>)
 800386e:	2200      	movs	r2, #0
 8003870:	4630      	mov	r0, r6
 8003872:	4639      	mov	r1, r7
 8003874:	f7fd f932 	bl	8000adc <__aeabi_dcmplt>
 8003878:	2800      	cmp	r0, #0
 800387a:	f000 8081 	beq.w	8003980 <_dtoa_r+0x4f8>
 800387e:	9b01      	ldr	r3, [sp, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d07d      	beq.n	8003980 <_dtoa_r+0x4f8>
 8003884:	f1b9 0f00 	cmp.w	r9, #0
 8003888:	dd3c      	ble.n	8003904 <_dtoa_r+0x47c>
 800388a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800388e:	9307      	str	r3, [sp, #28]
 8003890:	2200      	movs	r2, #0
 8003892:	4b91      	ldr	r3, [pc, #580]	; (8003ad8 <_dtoa_r+0x650>)
 8003894:	4630      	mov	r0, r6
 8003896:	4639      	mov	r1, r7
 8003898:	f7fc feae 	bl	80005f8 <__aeabi_dmul>
 800389c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038a0:	3501      	adds	r5, #1
 80038a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80038a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80038aa:	4628      	mov	r0, r5
 80038ac:	f7fc fe3a 	bl	8000524 <__aeabi_i2d>
 80038b0:	4632      	mov	r2, r6
 80038b2:	463b      	mov	r3, r7
 80038b4:	f7fc fea0 	bl	80005f8 <__aeabi_dmul>
 80038b8:	4b88      	ldr	r3, [pc, #544]	; (8003adc <_dtoa_r+0x654>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	f7fc fce6 	bl	800028c <__adddf3>
 80038c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80038c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038c8:	9303      	str	r3, [sp, #12]
 80038ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d15c      	bne.n	800398a <_dtoa_r+0x502>
 80038d0:	4b83      	ldr	r3, [pc, #524]	; (8003ae0 <_dtoa_r+0x658>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	4630      	mov	r0, r6
 80038d6:	4639      	mov	r1, r7
 80038d8:	f7fc fcd6 	bl	8000288 <__aeabi_dsub>
 80038dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038e0:	4606      	mov	r6, r0
 80038e2:	460f      	mov	r7, r1
 80038e4:	f7fd f918 	bl	8000b18 <__aeabi_dcmpgt>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	f040 8296 	bne.w	8003e1a <_dtoa_r+0x992>
 80038ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80038f2:	4630      	mov	r0, r6
 80038f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80038f8:	4639      	mov	r1, r7
 80038fa:	f7fd f8ef 	bl	8000adc <__aeabi_dcmplt>
 80038fe:	2800      	cmp	r0, #0
 8003900:	f040 8288 	bne.w	8003e14 <_dtoa_r+0x98c>
 8003904:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800390c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800390e:	2b00      	cmp	r3, #0
 8003910:	f2c0 8158 	blt.w	8003bc4 <_dtoa_r+0x73c>
 8003914:	f1ba 0f0e 	cmp.w	sl, #14
 8003918:	f300 8154 	bgt.w	8003bc4 <_dtoa_r+0x73c>
 800391c:	4b6b      	ldr	r3, [pc, #428]	; (8003acc <_dtoa_r+0x644>)
 800391e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003922:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	f280 80e3 	bge.w	8003af4 <_dtoa_r+0x66c>
 800392e:	9b01      	ldr	r3, [sp, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f300 80df 	bgt.w	8003af4 <_dtoa_r+0x66c>
 8003936:	f040 826d 	bne.w	8003e14 <_dtoa_r+0x98c>
 800393a:	4b69      	ldr	r3, [pc, #420]	; (8003ae0 <_dtoa_r+0x658>)
 800393c:	2200      	movs	r2, #0
 800393e:	4640      	mov	r0, r8
 8003940:	4649      	mov	r1, r9
 8003942:	f7fc fe59 	bl	80005f8 <__aeabi_dmul>
 8003946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800394a:	f7fd f8db 	bl	8000b04 <__aeabi_dcmpge>
 800394e:	9e01      	ldr	r6, [sp, #4]
 8003950:	4637      	mov	r7, r6
 8003952:	2800      	cmp	r0, #0
 8003954:	f040 8243 	bne.w	8003dde <_dtoa_r+0x956>
 8003958:	9d00      	ldr	r5, [sp, #0]
 800395a:	2331      	movs	r3, #49	; 0x31
 800395c:	f805 3b01 	strb.w	r3, [r5], #1
 8003960:	f10a 0a01 	add.w	sl, sl, #1
 8003964:	e23f      	b.n	8003de6 <_dtoa_r+0x95e>
 8003966:	07f2      	lsls	r2, r6, #31
 8003968:	d505      	bpl.n	8003976 <_dtoa_r+0x4ee>
 800396a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800396e:	f7fc fe43 	bl	80005f8 <__aeabi_dmul>
 8003972:	3501      	adds	r5, #1
 8003974:	2301      	movs	r3, #1
 8003976:	1076      	asrs	r6, r6, #1
 8003978:	3708      	adds	r7, #8
 800397a:	e76c      	b.n	8003856 <_dtoa_r+0x3ce>
 800397c:	2502      	movs	r5, #2
 800397e:	e76f      	b.n	8003860 <_dtoa_r+0x3d8>
 8003980:	9b01      	ldr	r3, [sp, #4]
 8003982:	f8cd a01c 	str.w	sl, [sp, #28]
 8003986:	930c      	str	r3, [sp, #48]	; 0x30
 8003988:	e78d      	b.n	80038a6 <_dtoa_r+0x41e>
 800398a:	9900      	ldr	r1, [sp, #0]
 800398c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800398e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003990:	4b4e      	ldr	r3, [pc, #312]	; (8003acc <_dtoa_r+0x644>)
 8003992:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003996:	4401      	add	r1, r0
 8003998:	9102      	str	r1, [sp, #8]
 800399a:	9908      	ldr	r1, [sp, #32]
 800399c:	eeb0 8a47 	vmov.f32	s16, s14
 80039a0:	eef0 8a67 	vmov.f32	s17, s15
 80039a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80039ac:	2900      	cmp	r1, #0
 80039ae:	d045      	beq.n	8003a3c <_dtoa_r+0x5b4>
 80039b0:	494c      	ldr	r1, [pc, #304]	; (8003ae4 <_dtoa_r+0x65c>)
 80039b2:	2000      	movs	r0, #0
 80039b4:	f7fc ff4a 	bl	800084c <__aeabi_ddiv>
 80039b8:	ec53 2b18 	vmov	r2, r3, d8
 80039bc:	f7fc fc64 	bl	8000288 <__aeabi_dsub>
 80039c0:	9d00      	ldr	r5, [sp, #0]
 80039c2:	ec41 0b18 	vmov	d8, r0, r1
 80039c6:	4639      	mov	r1, r7
 80039c8:	4630      	mov	r0, r6
 80039ca:	f7fd f8c5 	bl	8000b58 <__aeabi_d2iz>
 80039ce:	900c      	str	r0, [sp, #48]	; 0x30
 80039d0:	f7fc fda8 	bl	8000524 <__aeabi_i2d>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4630      	mov	r0, r6
 80039da:	4639      	mov	r1, r7
 80039dc:	f7fc fc54 	bl	8000288 <__aeabi_dsub>
 80039e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039e2:	3330      	adds	r3, #48	; 0x30
 80039e4:	f805 3b01 	strb.w	r3, [r5], #1
 80039e8:	ec53 2b18 	vmov	r2, r3, d8
 80039ec:	4606      	mov	r6, r0
 80039ee:	460f      	mov	r7, r1
 80039f0:	f7fd f874 	bl	8000adc <__aeabi_dcmplt>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d165      	bne.n	8003ac4 <_dtoa_r+0x63c>
 80039f8:	4632      	mov	r2, r6
 80039fa:	463b      	mov	r3, r7
 80039fc:	4935      	ldr	r1, [pc, #212]	; (8003ad4 <_dtoa_r+0x64c>)
 80039fe:	2000      	movs	r0, #0
 8003a00:	f7fc fc42 	bl	8000288 <__aeabi_dsub>
 8003a04:	ec53 2b18 	vmov	r2, r3, d8
 8003a08:	f7fd f868 	bl	8000adc <__aeabi_dcmplt>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	f040 80b9 	bne.w	8003b84 <_dtoa_r+0x6fc>
 8003a12:	9b02      	ldr	r3, [sp, #8]
 8003a14:	429d      	cmp	r5, r3
 8003a16:	f43f af75 	beq.w	8003904 <_dtoa_r+0x47c>
 8003a1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ad8 <_dtoa_r+0x650>)
 8003a1c:	ec51 0b18 	vmov	r0, r1, d8
 8003a20:	2200      	movs	r2, #0
 8003a22:	f7fc fde9 	bl	80005f8 <__aeabi_dmul>
 8003a26:	4b2c      	ldr	r3, [pc, #176]	; (8003ad8 <_dtoa_r+0x650>)
 8003a28:	ec41 0b18 	vmov	d8, r0, r1
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4630      	mov	r0, r6
 8003a30:	4639      	mov	r1, r7
 8003a32:	f7fc fde1 	bl	80005f8 <__aeabi_dmul>
 8003a36:	4606      	mov	r6, r0
 8003a38:	460f      	mov	r7, r1
 8003a3a:	e7c4      	b.n	80039c6 <_dtoa_r+0x53e>
 8003a3c:	ec51 0b17 	vmov	r0, r1, d7
 8003a40:	f7fc fdda 	bl	80005f8 <__aeabi_dmul>
 8003a44:	9b02      	ldr	r3, [sp, #8]
 8003a46:	9d00      	ldr	r5, [sp, #0]
 8003a48:	930c      	str	r3, [sp, #48]	; 0x30
 8003a4a:	ec41 0b18 	vmov	d8, r0, r1
 8003a4e:	4639      	mov	r1, r7
 8003a50:	4630      	mov	r0, r6
 8003a52:	f7fd f881 	bl	8000b58 <__aeabi_d2iz>
 8003a56:	9011      	str	r0, [sp, #68]	; 0x44
 8003a58:	f7fc fd64 	bl	8000524 <__aeabi_i2d>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4630      	mov	r0, r6
 8003a62:	4639      	mov	r1, r7
 8003a64:	f7fc fc10 	bl	8000288 <__aeabi_dsub>
 8003a68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a6a:	3330      	adds	r3, #48	; 0x30
 8003a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8003a70:	9b02      	ldr	r3, [sp, #8]
 8003a72:	429d      	cmp	r5, r3
 8003a74:	4606      	mov	r6, r0
 8003a76:	460f      	mov	r7, r1
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	d134      	bne.n	8003ae8 <_dtoa_r+0x660>
 8003a7e:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <_dtoa_r+0x65c>)
 8003a80:	ec51 0b18 	vmov	r0, r1, d8
 8003a84:	f7fc fc02 	bl	800028c <__adddf3>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4630      	mov	r0, r6
 8003a8e:	4639      	mov	r1, r7
 8003a90:	f7fd f842 	bl	8000b18 <__aeabi_dcmpgt>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d175      	bne.n	8003b84 <_dtoa_r+0x6fc>
 8003a98:	ec53 2b18 	vmov	r2, r3, d8
 8003a9c:	4911      	ldr	r1, [pc, #68]	; (8003ae4 <_dtoa_r+0x65c>)
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f7fc fbf2 	bl	8000288 <__aeabi_dsub>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	4639      	mov	r1, r7
 8003aac:	f7fd f816 	bl	8000adc <__aeabi_dcmplt>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	f43f af27 	beq.w	8003904 <_dtoa_r+0x47c>
 8003ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ab8:	1e6b      	subs	r3, r5, #1
 8003aba:	930c      	str	r3, [sp, #48]	; 0x30
 8003abc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ac0:	2b30      	cmp	r3, #48	; 0x30
 8003ac2:	d0f8      	beq.n	8003ab6 <_dtoa_r+0x62e>
 8003ac4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003ac8:	e04a      	b.n	8003b60 <_dtoa_r+0x6d8>
 8003aca:	bf00      	nop
 8003acc:	08005648 	.word	0x08005648
 8003ad0:	08005620 	.word	0x08005620
 8003ad4:	3ff00000 	.word	0x3ff00000
 8003ad8:	40240000 	.word	0x40240000
 8003adc:	401c0000 	.word	0x401c0000
 8003ae0:	40140000 	.word	0x40140000
 8003ae4:	3fe00000 	.word	0x3fe00000
 8003ae8:	4baf      	ldr	r3, [pc, #700]	; (8003da8 <_dtoa_r+0x920>)
 8003aea:	f7fc fd85 	bl	80005f8 <__aeabi_dmul>
 8003aee:	4606      	mov	r6, r0
 8003af0:	460f      	mov	r7, r1
 8003af2:	e7ac      	b.n	8003a4e <_dtoa_r+0x5c6>
 8003af4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003af8:	9d00      	ldr	r5, [sp, #0]
 8003afa:	4642      	mov	r2, r8
 8003afc:	464b      	mov	r3, r9
 8003afe:	4630      	mov	r0, r6
 8003b00:	4639      	mov	r1, r7
 8003b02:	f7fc fea3 	bl	800084c <__aeabi_ddiv>
 8003b06:	f7fd f827 	bl	8000b58 <__aeabi_d2iz>
 8003b0a:	9002      	str	r0, [sp, #8]
 8003b0c:	f7fc fd0a 	bl	8000524 <__aeabi_i2d>
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	f7fc fd70 	bl	80005f8 <__aeabi_dmul>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	4639      	mov	r1, r7
 8003b20:	f7fc fbb2 	bl	8000288 <__aeabi_dsub>
 8003b24:	9e02      	ldr	r6, [sp, #8]
 8003b26:	9f01      	ldr	r7, [sp, #4]
 8003b28:	3630      	adds	r6, #48	; 0x30
 8003b2a:	f805 6b01 	strb.w	r6, [r5], #1
 8003b2e:	9e00      	ldr	r6, [sp, #0]
 8003b30:	1bae      	subs	r6, r5, r6
 8003b32:	42b7      	cmp	r7, r6
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	d137      	bne.n	8003baa <_dtoa_r+0x722>
 8003b3a:	f7fc fba7 	bl	800028c <__adddf3>
 8003b3e:	4642      	mov	r2, r8
 8003b40:	464b      	mov	r3, r9
 8003b42:	4606      	mov	r6, r0
 8003b44:	460f      	mov	r7, r1
 8003b46:	f7fc ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 8003b4a:	b9c8      	cbnz	r0, 8003b80 <_dtoa_r+0x6f8>
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	4630      	mov	r0, r6
 8003b52:	4639      	mov	r1, r7
 8003b54:	f7fc ffb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b58:	b110      	cbz	r0, 8003b60 <_dtoa_r+0x6d8>
 8003b5a:	9b02      	ldr	r3, [sp, #8]
 8003b5c:	07d9      	lsls	r1, r3, #31
 8003b5e:	d40f      	bmi.n	8003b80 <_dtoa_r+0x6f8>
 8003b60:	4620      	mov	r0, r4
 8003b62:	4659      	mov	r1, fp
 8003b64:	f000 fbd0 	bl	8004308 <_Bfree>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	702b      	strb	r3, [r5, #0]
 8003b6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b6e:	f10a 0001 	add.w	r0, sl, #1
 8003b72:	6018      	str	r0, [r3, #0]
 8003b74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f43f acd8 	beq.w	800352c <_dtoa_r+0xa4>
 8003b7c:	601d      	str	r5, [r3, #0]
 8003b7e:	e4d5      	b.n	800352c <_dtoa_r+0xa4>
 8003b80:	f8cd a01c 	str.w	sl, [sp, #28]
 8003b84:	462b      	mov	r3, r5
 8003b86:	461d      	mov	r5, r3
 8003b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b8c:	2a39      	cmp	r2, #57	; 0x39
 8003b8e:	d108      	bne.n	8003ba2 <_dtoa_r+0x71a>
 8003b90:	9a00      	ldr	r2, [sp, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d1f7      	bne.n	8003b86 <_dtoa_r+0x6fe>
 8003b96:	9a07      	ldr	r2, [sp, #28]
 8003b98:	9900      	ldr	r1, [sp, #0]
 8003b9a:	3201      	adds	r2, #1
 8003b9c:	9207      	str	r2, [sp, #28]
 8003b9e:	2230      	movs	r2, #48	; 0x30
 8003ba0:	700a      	strb	r2, [r1, #0]
 8003ba2:	781a      	ldrb	r2, [r3, #0]
 8003ba4:	3201      	adds	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	e78c      	b.n	8003ac4 <_dtoa_r+0x63c>
 8003baa:	4b7f      	ldr	r3, [pc, #508]	; (8003da8 <_dtoa_r+0x920>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	f7fc fd23 	bl	80005f8 <__aeabi_dmul>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4606      	mov	r6, r0
 8003bb8:	460f      	mov	r7, r1
 8003bba:	f7fc ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d09b      	beq.n	8003afa <_dtoa_r+0x672>
 8003bc2:	e7cd      	b.n	8003b60 <_dtoa_r+0x6d8>
 8003bc4:	9a08      	ldr	r2, [sp, #32]
 8003bc6:	2a00      	cmp	r2, #0
 8003bc8:	f000 80c4 	beq.w	8003d54 <_dtoa_r+0x8cc>
 8003bcc:	9a05      	ldr	r2, [sp, #20]
 8003bce:	2a01      	cmp	r2, #1
 8003bd0:	f300 80a8 	bgt.w	8003d24 <_dtoa_r+0x89c>
 8003bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	f000 80a0 	beq.w	8003d1c <_dtoa_r+0x894>
 8003bdc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003be0:	9e06      	ldr	r6, [sp, #24]
 8003be2:	4645      	mov	r5, r8
 8003be4:	9a04      	ldr	r2, [sp, #16]
 8003be6:	2101      	movs	r1, #1
 8003be8:	441a      	add	r2, r3
 8003bea:	4620      	mov	r0, r4
 8003bec:	4498      	add	r8, r3
 8003bee:	9204      	str	r2, [sp, #16]
 8003bf0:	f000 fc46 	bl	8004480 <__i2b>
 8003bf4:	4607      	mov	r7, r0
 8003bf6:	2d00      	cmp	r5, #0
 8003bf8:	dd0b      	ble.n	8003c12 <_dtoa_r+0x78a>
 8003bfa:	9b04      	ldr	r3, [sp, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	dd08      	ble.n	8003c12 <_dtoa_r+0x78a>
 8003c00:	42ab      	cmp	r3, r5
 8003c02:	9a04      	ldr	r2, [sp, #16]
 8003c04:	bfa8      	it	ge
 8003c06:	462b      	movge	r3, r5
 8003c08:	eba8 0803 	sub.w	r8, r8, r3
 8003c0c:	1aed      	subs	r5, r5, r3
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	9304      	str	r3, [sp, #16]
 8003c12:	9b06      	ldr	r3, [sp, #24]
 8003c14:	b1fb      	cbz	r3, 8003c56 <_dtoa_r+0x7ce>
 8003c16:	9b08      	ldr	r3, [sp, #32]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 809f 	beq.w	8003d5c <_dtoa_r+0x8d4>
 8003c1e:	2e00      	cmp	r6, #0
 8003c20:	dd11      	ble.n	8003c46 <_dtoa_r+0x7be>
 8003c22:	4639      	mov	r1, r7
 8003c24:	4632      	mov	r2, r6
 8003c26:	4620      	mov	r0, r4
 8003c28:	f000 fce6 	bl	80045f8 <__pow5mult>
 8003c2c:	465a      	mov	r2, fp
 8003c2e:	4601      	mov	r1, r0
 8003c30:	4607      	mov	r7, r0
 8003c32:	4620      	mov	r0, r4
 8003c34:	f000 fc3a 	bl	80044ac <__multiply>
 8003c38:	4659      	mov	r1, fp
 8003c3a:	9007      	str	r0, [sp, #28]
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 fb63 	bl	8004308 <_Bfree>
 8003c42:	9b07      	ldr	r3, [sp, #28]
 8003c44:	469b      	mov	fp, r3
 8003c46:	9b06      	ldr	r3, [sp, #24]
 8003c48:	1b9a      	subs	r2, r3, r6
 8003c4a:	d004      	beq.n	8003c56 <_dtoa_r+0x7ce>
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f000 fcd2 	bl	80045f8 <__pow5mult>
 8003c54:	4683      	mov	fp, r0
 8003c56:	2101      	movs	r1, #1
 8003c58:	4620      	mov	r0, r4
 8003c5a:	f000 fc11 	bl	8004480 <__i2b>
 8003c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	4606      	mov	r6, r0
 8003c64:	dd7c      	ble.n	8003d60 <_dtoa_r+0x8d8>
 8003c66:	461a      	mov	r2, r3
 8003c68:	4601      	mov	r1, r0
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f000 fcc4 	bl	80045f8 <__pow5mult>
 8003c70:	9b05      	ldr	r3, [sp, #20]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	4606      	mov	r6, r0
 8003c76:	dd76      	ble.n	8003d66 <_dtoa_r+0x8de>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	9306      	str	r3, [sp, #24]
 8003c7c:	6933      	ldr	r3, [r6, #16]
 8003c7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003c82:	6918      	ldr	r0, [r3, #16]
 8003c84:	f000 fbac 	bl	80043e0 <__hi0bits>
 8003c88:	f1c0 0020 	rsb	r0, r0, #32
 8003c8c:	9b04      	ldr	r3, [sp, #16]
 8003c8e:	4418      	add	r0, r3
 8003c90:	f010 001f 	ands.w	r0, r0, #31
 8003c94:	f000 8086 	beq.w	8003da4 <_dtoa_r+0x91c>
 8003c98:	f1c0 0320 	rsb	r3, r0, #32
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	dd7f      	ble.n	8003da0 <_dtoa_r+0x918>
 8003ca0:	f1c0 001c 	rsb	r0, r0, #28
 8003ca4:	9b04      	ldr	r3, [sp, #16]
 8003ca6:	4403      	add	r3, r0
 8003ca8:	4480      	add	r8, r0
 8003caa:	4405      	add	r5, r0
 8003cac:	9304      	str	r3, [sp, #16]
 8003cae:	f1b8 0f00 	cmp.w	r8, #0
 8003cb2:	dd05      	ble.n	8003cc0 <_dtoa_r+0x838>
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	4642      	mov	r2, r8
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f000 fcf7 	bl	80046ac <__lshift>
 8003cbe:	4683      	mov	fp, r0
 8003cc0:	9b04      	ldr	r3, [sp, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	dd05      	ble.n	8003cd2 <_dtoa_r+0x84a>
 8003cc6:	4631      	mov	r1, r6
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4620      	mov	r0, r4
 8003ccc:	f000 fcee 	bl	80046ac <__lshift>
 8003cd0:	4606      	mov	r6, r0
 8003cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d069      	beq.n	8003dac <_dtoa_r+0x924>
 8003cd8:	4631      	mov	r1, r6
 8003cda:	4658      	mov	r0, fp
 8003cdc:	f000 fd52 	bl	8004784 <__mcmp>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	da63      	bge.n	8003dac <_dtoa_r+0x924>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	4659      	mov	r1, fp
 8003ce8:	220a      	movs	r2, #10
 8003cea:	4620      	mov	r0, r4
 8003cec:	f000 fb2e 	bl	800434c <__multadd>
 8003cf0:	9b08      	ldr	r3, [sp, #32]
 8003cf2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003cf6:	4683      	mov	fp, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 818f 	beq.w	800401c <_dtoa_r+0xb94>
 8003cfe:	4639      	mov	r1, r7
 8003d00:	2300      	movs	r3, #0
 8003d02:	220a      	movs	r2, #10
 8003d04:	4620      	mov	r0, r4
 8003d06:	f000 fb21 	bl	800434c <__multadd>
 8003d0a:	f1b9 0f00 	cmp.w	r9, #0
 8003d0e:	4607      	mov	r7, r0
 8003d10:	f300 808e 	bgt.w	8003e30 <_dtoa_r+0x9a8>
 8003d14:	9b05      	ldr	r3, [sp, #20]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	dc50      	bgt.n	8003dbc <_dtoa_r+0x934>
 8003d1a:	e089      	b.n	8003e30 <_dtoa_r+0x9a8>
 8003d1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003d22:	e75d      	b.n	8003be0 <_dtoa_r+0x758>
 8003d24:	9b01      	ldr	r3, [sp, #4]
 8003d26:	1e5e      	subs	r6, r3, #1
 8003d28:	9b06      	ldr	r3, [sp, #24]
 8003d2a:	42b3      	cmp	r3, r6
 8003d2c:	bfbf      	itttt	lt
 8003d2e:	9b06      	ldrlt	r3, [sp, #24]
 8003d30:	9606      	strlt	r6, [sp, #24]
 8003d32:	1af2      	sublt	r2, r6, r3
 8003d34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8003d36:	bfb6      	itet	lt
 8003d38:	189b      	addlt	r3, r3, r2
 8003d3a:	1b9e      	subge	r6, r3, r6
 8003d3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8003d3e:	9b01      	ldr	r3, [sp, #4]
 8003d40:	bfb8      	it	lt
 8003d42:	2600      	movlt	r6, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bfb5      	itete	lt
 8003d48:	eba8 0503 	sublt.w	r5, r8, r3
 8003d4c:	9b01      	ldrge	r3, [sp, #4]
 8003d4e:	2300      	movlt	r3, #0
 8003d50:	4645      	movge	r5, r8
 8003d52:	e747      	b.n	8003be4 <_dtoa_r+0x75c>
 8003d54:	9e06      	ldr	r6, [sp, #24]
 8003d56:	9f08      	ldr	r7, [sp, #32]
 8003d58:	4645      	mov	r5, r8
 8003d5a:	e74c      	b.n	8003bf6 <_dtoa_r+0x76e>
 8003d5c:	9a06      	ldr	r2, [sp, #24]
 8003d5e:	e775      	b.n	8003c4c <_dtoa_r+0x7c4>
 8003d60:	9b05      	ldr	r3, [sp, #20]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	dc18      	bgt.n	8003d98 <_dtoa_r+0x910>
 8003d66:	9b02      	ldr	r3, [sp, #8]
 8003d68:	b9b3      	cbnz	r3, 8003d98 <_dtoa_r+0x910>
 8003d6a:	9b03      	ldr	r3, [sp, #12]
 8003d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d70:	b9a3      	cbnz	r3, 8003d9c <_dtoa_r+0x914>
 8003d72:	9b03      	ldr	r3, [sp, #12]
 8003d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d78:	0d1b      	lsrs	r3, r3, #20
 8003d7a:	051b      	lsls	r3, r3, #20
 8003d7c:	b12b      	cbz	r3, 8003d8a <_dtoa_r+0x902>
 8003d7e:	9b04      	ldr	r3, [sp, #16]
 8003d80:	3301      	adds	r3, #1
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	f108 0801 	add.w	r8, r8, #1
 8003d88:	2301      	movs	r3, #1
 8003d8a:	9306      	str	r3, [sp, #24]
 8003d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f47f af74 	bne.w	8003c7c <_dtoa_r+0x7f4>
 8003d94:	2001      	movs	r0, #1
 8003d96:	e779      	b.n	8003c8c <_dtoa_r+0x804>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e7f6      	b.n	8003d8a <_dtoa_r+0x902>
 8003d9c:	9b02      	ldr	r3, [sp, #8]
 8003d9e:	e7f4      	b.n	8003d8a <_dtoa_r+0x902>
 8003da0:	d085      	beq.n	8003cae <_dtoa_r+0x826>
 8003da2:	4618      	mov	r0, r3
 8003da4:	301c      	adds	r0, #28
 8003da6:	e77d      	b.n	8003ca4 <_dtoa_r+0x81c>
 8003da8:	40240000 	.word	0x40240000
 8003dac:	9b01      	ldr	r3, [sp, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	dc38      	bgt.n	8003e24 <_dtoa_r+0x99c>
 8003db2:	9b05      	ldr	r3, [sp, #20]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	dd35      	ble.n	8003e24 <_dtoa_r+0x99c>
 8003db8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003dbc:	f1b9 0f00 	cmp.w	r9, #0
 8003dc0:	d10d      	bne.n	8003dde <_dtoa_r+0x956>
 8003dc2:	4631      	mov	r1, r6
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	2205      	movs	r2, #5
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f000 fabf 	bl	800434c <__multadd>
 8003dce:	4601      	mov	r1, r0
 8003dd0:	4606      	mov	r6, r0
 8003dd2:	4658      	mov	r0, fp
 8003dd4:	f000 fcd6 	bl	8004784 <__mcmp>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	f73f adbd 	bgt.w	8003958 <_dtoa_r+0x4d0>
 8003dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de0:	9d00      	ldr	r5, [sp, #0]
 8003de2:	ea6f 0a03 	mvn.w	sl, r3
 8003de6:	f04f 0800 	mov.w	r8, #0
 8003dea:	4631      	mov	r1, r6
 8003dec:	4620      	mov	r0, r4
 8003dee:	f000 fa8b 	bl	8004308 <_Bfree>
 8003df2:	2f00      	cmp	r7, #0
 8003df4:	f43f aeb4 	beq.w	8003b60 <_dtoa_r+0x6d8>
 8003df8:	f1b8 0f00 	cmp.w	r8, #0
 8003dfc:	d005      	beq.n	8003e0a <_dtoa_r+0x982>
 8003dfe:	45b8      	cmp	r8, r7
 8003e00:	d003      	beq.n	8003e0a <_dtoa_r+0x982>
 8003e02:	4641      	mov	r1, r8
 8003e04:	4620      	mov	r0, r4
 8003e06:	f000 fa7f 	bl	8004308 <_Bfree>
 8003e0a:	4639      	mov	r1, r7
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 fa7b 	bl	8004308 <_Bfree>
 8003e12:	e6a5      	b.n	8003b60 <_dtoa_r+0x6d8>
 8003e14:	2600      	movs	r6, #0
 8003e16:	4637      	mov	r7, r6
 8003e18:	e7e1      	b.n	8003dde <_dtoa_r+0x956>
 8003e1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003e1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003e20:	4637      	mov	r7, r6
 8003e22:	e599      	b.n	8003958 <_dtoa_r+0x4d0>
 8003e24:	9b08      	ldr	r3, [sp, #32]
 8003e26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80fd 	beq.w	800402a <_dtoa_r+0xba2>
 8003e30:	2d00      	cmp	r5, #0
 8003e32:	dd05      	ble.n	8003e40 <_dtoa_r+0x9b8>
 8003e34:	4639      	mov	r1, r7
 8003e36:	462a      	mov	r2, r5
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f000 fc37 	bl	80046ac <__lshift>
 8003e3e:	4607      	mov	r7, r0
 8003e40:	9b06      	ldr	r3, [sp, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d05c      	beq.n	8003f00 <_dtoa_r+0xa78>
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4620      	mov	r0, r4
 8003e4a:	f000 fa1d 	bl	8004288 <_Balloc>
 8003e4e:	4605      	mov	r5, r0
 8003e50:	b928      	cbnz	r0, 8003e5e <_dtoa_r+0x9d6>
 8003e52:	4b80      	ldr	r3, [pc, #512]	; (8004054 <_dtoa_r+0xbcc>)
 8003e54:	4602      	mov	r2, r0
 8003e56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003e5a:	f7ff bb2e 	b.w	80034ba <_dtoa_r+0x32>
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	3202      	adds	r2, #2
 8003e62:	0092      	lsls	r2, r2, #2
 8003e64:	f107 010c 	add.w	r1, r7, #12
 8003e68:	300c      	adds	r0, #12
 8003e6a:	f000 f9ff 	bl	800426c <memcpy>
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4629      	mov	r1, r5
 8003e72:	4620      	mov	r0, r4
 8003e74:	f000 fc1a 	bl	80046ac <__lshift>
 8003e78:	9b00      	ldr	r3, [sp, #0]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	9b00      	ldr	r3, [sp, #0]
 8003e80:	444b      	add	r3, r9
 8003e82:	9307      	str	r3, [sp, #28]
 8003e84:	9b02      	ldr	r3, [sp, #8]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	46b8      	mov	r8, r7
 8003e8c:	9306      	str	r3, [sp, #24]
 8003e8e:	4607      	mov	r7, r0
 8003e90:	9b01      	ldr	r3, [sp, #4]
 8003e92:	4631      	mov	r1, r6
 8003e94:	3b01      	subs	r3, #1
 8003e96:	4658      	mov	r0, fp
 8003e98:	9302      	str	r3, [sp, #8]
 8003e9a:	f7ff fa69 	bl	8003370 <quorem>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	3330      	adds	r3, #48	; 0x30
 8003ea2:	9004      	str	r0, [sp, #16]
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	4658      	mov	r0, fp
 8003ea8:	9308      	str	r3, [sp, #32]
 8003eaa:	f000 fc6b 	bl	8004784 <__mcmp>
 8003eae:	463a      	mov	r2, r7
 8003eb0:	4681      	mov	r9, r0
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 fc81 	bl	80047bc <__mdiff>
 8003eba:	68c2      	ldr	r2, [r0, #12]
 8003ebc:	9b08      	ldr	r3, [sp, #32]
 8003ebe:	4605      	mov	r5, r0
 8003ec0:	bb02      	cbnz	r2, 8003f04 <_dtoa_r+0xa7c>
 8003ec2:	4601      	mov	r1, r0
 8003ec4:	4658      	mov	r0, fp
 8003ec6:	f000 fc5d 	bl	8004784 <__mcmp>
 8003eca:	9b08      	ldr	r3, [sp, #32]
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4629      	mov	r1, r5
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8003ed6:	f000 fa17 	bl	8004308 <_Bfree>
 8003eda:	9b05      	ldr	r3, [sp, #20]
 8003edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ede:	9d01      	ldr	r5, [sp, #4]
 8003ee0:	ea43 0102 	orr.w	r1, r3, r2
 8003ee4:	9b06      	ldr	r3, [sp, #24]
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	9b08      	ldr	r3, [sp, #32]
 8003eea:	d10d      	bne.n	8003f08 <_dtoa_r+0xa80>
 8003eec:	2b39      	cmp	r3, #57	; 0x39
 8003eee:	d029      	beq.n	8003f44 <_dtoa_r+0xabc>
 8003ef0:	f1b9 0f00 	cmp.w	r9, #0
 8003ef4:	dd01      	ble.n	8003efa <_dtoa_r+0xa72>
 8003ef6:	9b04      	ldr	r3, [sp, #16]
 8003ef8:	3331      	adds	r3, #49	; 0x31
 8003efa:	9a02      	ldr	r2, [sp, #8]
 8003efc:	7013      	strb	r3, [r2, #0]
 8003efe:	e774      	b.n	8003dea <_dtoa_r+0x962>
 8003f00:	4638      	mov	r0, r7
 8003f02:	e7b9      	b.n	8003e78 <_dtoa_r+0x9f0>
 8003f04:	2201      	movs	r2, #1
 8003f06:	e7e2      	b.n	8003ece <_dtoa_r+0xa46>
 8003f08:	f1b9 0f00 	cmp.w	r9, #0
 8003f0c:	db06      	blt.n	8003f1c <_dtoa_r+0xa94>
 8003f0e:	9905      	ldr	r1, [sp, #20]
 8003f10:	ea41 0909 	orr.w	r9, r1, r9
 8003f14:	9906      	ldr	r1, [sp, #24]
 8003f16:	ea59 0101 	orrs.w	r1, r9, r1
 8003f1a:	d120      	bne.n	8003f5e <_dtoa_r+0xad6>
 8003f1c:	2a00      	cmp	r2, #0
 8003f1e:	ddec      	ble.n	8003efa <_dtoa_r+0xa72>
 8003f20:	4659      	mov	r1, fp
 8003f22:	2201      	movs	r2, #1
 8003f24:	4620      	mov	r0, r4
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	f000 fbc0 	bl	80046ac <__lshift>
 8003f2c:	4631      	mov	r1, r6
 8003f2e:	4683      	mov	fp, r0
 8003f30:	f000 fc28 	bl	8004784 <__mcmp>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	9b01      	ldr	r3, [sp, #4]
 8003f38:	dc02      	bgt.n	8003f40 <_dtoa_r+0xab8>
 8003f3a:	d1de      	bne.n	8003efa <_dtoa_r+0xa72>
 8003f3c:	07da      	lsls	r2, r3, #31
 8003f3e:	d5dc      	bpl.n	8003efa <_dtoa_r+0xa72>
 8003f40:	2b39      	cmp	r3, #57	; 0x39
 8003f42:	d1d8      	bne.n	8003ef6 <_dtoa_r+0xa6e>
 8003f44:	9a02      	ldr	r2, [sp, #8]
 8003f46:	2339      	movs	r3, #57	; 0x39
 8003f48:	7013      	strb	r3, [r2, #0]
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	461d      	mov	r5, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003f54:	2a39      	cmp	r2, #57	; 0x39
 8003f56:	d050      	beq.n	8003ffa <_dtoa_r+0xb72>
 8003f58:	3201      	adds	r2, #1
 8003f5a:	701a      	strb	r2, [r3, #0]
 8003f5c:	e745      	b.n	8003dea <_dtoa_r+0x962>
 8003f5e:	2a00      	cmp	r2, #0
 8003f60:	dd03      	ble.n	8003f6a <_dtoa_r+0xae2>
 8003f62:	2b39      	cmp	r3, #57	; 0x39
 8003f64:	d0ee      	beq.n	8003f44 <_dtoa_r+0xabc>
 8003f66:	3301      	adds	r3, #1
 8003f68:	e7c7      	b.n	8003efa <_dtoa_r+0xa72>
 8003f6a:	9a01      	ldr	r2, [sp, #4]
 8003f6c:	9907      	ldr	r1, [sp, #28]
 8003f6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003f72:	428a      	cmp	r2, r1
 8003f74:	d02a      	beq.n	8003fcc <_dtoa_r+0xb44>
 8003f76:	4659      	mov	r1, fp
 8003f78:	2300      	movs	r3, #0
 8003f7a:	220a      	movs	r2, #10
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f000 f9e5 	bl	800434c <__multadd>
 8003f82:	45b8      	cmp	r8, r7
 8003f84:	4683      	mov	fp, r0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	f04f 020a 	mov.w	r2, #10
 8003f8e:	4641      	mov	r1, r8
 8003f90:	4620      	mov	r0, r4
 8003f92:	d107      	bne.n	8003fa4 <_dtoa_r+0xb1c>
 8003f94:	f000 f9da 	bl	800434c <__multadd>
 8003f98:	4680      	mov	r8, r0
 8003f9a:	4607      	mov	r7, r0
 8003f9c:	9b01      	ldr	r3, [sp, #4]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	e775      	b.n	8003e90 <_dtoa_r+0xa08>
 8003fa4:	f000 f9d2 	bl	800434c <__multadd>
 8003fa8:	4639      	mov	r1, r7
 8003faa:	4680      	mov	r8, r0
 8003fac:	2300      	movs	r3, #0
 8003fae:	220a      	movs	r2, #10
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f000 f9cb 	bl	800434c <__multadd>
 8003fb6:	4607      	mov	r7, r0
 8003fb8:	e7f0      	b.n	8003f9c <_dtoa_r+0xb14>
 8003fba:	f1b9 0f00 	cmp.w	r9, #0
 8003fbe:	9a00      	ldr	r2, [sp, #0]
 8003fc0:	bfcc      	ite	gt
 8003fc2:	464d      	movgt	r5, r9
 8003fc4:	2501      	movle	r5, #1
 8003fc6:	4415      	add	r5, r2
 8003fc8:	f04f 0800 	mov.w	r8, #0
 8003fcc:	4659      	mov	r1, fp
 8003fce:	2201      	movs	r2, #1
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	f000 fb6a 	bl	80046ac <__lshift>
 8003fd8:	4631      	mov	r1, r6
 8003fda:	4683      	mov	fp, r0
 8003fdc:	f000 fbd2 	bl	8004784 <__mcmp>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	dcb2      	bgt.n	8003f4a <_dtoa_r+0xac2>
 8003fe4:	d102      	bne.n	8003fec <_dtoa_r+0xb64>
 8003fe6:	9b01      	ldr	r3, [sp, #4]
 8003fe8:	07db      	lsls	r3, r3, #31
 8003fea:	d4ae      	bmi.n	8003f4a <_dtoa_r+0xac2>
 8003fec:	462b      	mov	r3, r5
 8003fee:	461d      	mov	r5, r3
 8003ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003ff4:	2a30      	cmp	r2, #48	; 0x30
 8003ff6:	d0fa      	beq.n	8003fee <_dtoa_r+0xb66>
 8003ff8:	e6f7      	b.n	8003dea <_dtoa_r+0x962>
 8003ffa:	9a00      	ldr	r2, [sp, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d1a5      	bne.n	8003f4c <_dtoa_r+0xac4>
 8004000:	f10a 0a01 	add.w	sl, sl, #1
 8004004:	2331      	movs	r3, #49	; 0x31
 8004006:	e779      	b.n	8003efc <_dtoa_r+0xa74>
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <_dtoa_r+0xbd0>)
 800400a:	f7ff baaf 	b.w	800356c <_dtoa_r+0xe4>
 800400e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004010:	2b00      	cmp	r3, #0
 8004012:	f47f aa86 	bne.w	8003522 <_dtoa_r+0x9a>
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <_dtoa_r+0xbd4>)
 8004018:	f7ff baa8 	b.w	800356c <_dtoa_r+0xe4>
 800401c:	f1b9 0f00 	cmp.w	r9, #0
 8004020:	dc03      	bgt.n	800402a <_dtoa_r+0xba2>
 8004022:	9b05      	ldr	r3, [sp, #20]
 8004024:	2b02      	cmp	r3, #2
 8004026:	f73f aec9 	bgt.w	8003dbc <_dtoa_r+0x934>
 800402a:	9d00      	ldr	r5, [sp, #0]
 800402c:	4631      	mov	r1, r6
 800402e:	4658      	mov	r0, fp
 8004030:	f7ff f99e 	bl	8003370 <quorem>
 8004034:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004038:	f805 3b01 	strb.w	r3, [r5], #1
 800403c:	9a00      	ldr	r2, [sp, #0]
 800403e:	1aaa      	subs	r2, r5, r2
 8004040:	4591      	cmp	r9, r2
 8004042:	ddba      	ble.n	8003fba <_dtoa_r+0xb32>
 8004044:	4659      	mov	r1, fp
 8004046:	2300      	movs	r3, #0
 8004048:	220a      	movs	r2, #10
 800404a:	4620      	mov	r0, r4
 800404c:	f000 f97e 	bl	800434c <__multadd>
 8004050:	4683      	mov	fp, r0
 8004052:	e7eb      	b.n	800402c <_dtoa_r+0xba4>
 8004054:	0800554f 	.word	0x0800554f
 8004058:	080054a8 	.word	0x080054a8
 800405c:	080054cc 	.word	0x080054cc

08004060 <std>:
 8004060:	2300      	movs	r3, #0
 8004062:	b510      	push	{r4, lr}
 8004064:	4604      	mov	r4, r0
 8004066:	e9c0 3300 	strd	r3, r3, [r0]
 800406a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800406e:	6083      	str	r3, [r0, #8]
 8004070:	8181      	strh	r1, [r0, #12]
 8004072:	6643      	str	r3, [r0, #100]	; 0x64
 8004074:	81c2      	strh	r2, [r0, #14]
 8004076:	6183      	str	r3, [r0, #24]
 8004078:	4619      	mov	r1, r3
 800407a:	2208      	movs	r2, #8
 800407c:	305c      	adds	r0, #92	; 0x5c
 800407e:	f7fe fced 	bl	8002a5c <memset>
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <std+0x38>)
 8004084:	6263      	str	r3, [r4, #36]	; 0x24
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <std+0x3c>)
 8004088:	62a3      	str	r3, [r4, #40]	; 0x28
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <std+0x40>)
 800408c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <std+0x44>)
 8004090:	6224      	str	r4, [r4, #32]
 8004092:	6323      	str	r3, [r4, #48]	; 0x30
 8004094:	bd10      	pop	{r4, pc}
 8004096:	bf00      	nop
 8004098:	08004dcd 	.word	0x08004dcd
 800409c:	08004def 	.word	0x08004def
 80040a0:	08004e27 	.word	0x08004e27
 80040a4:	08004e4b 	.word	0x08004e4b

080040a8 <_cleanup_r>:
 80040a8:	4901      	ldr	r1, [pc, #4]	; (80040b0 <_cleanup_r+0x8>)
 80040aa:	f000 b8af 	b.w	800420c <_fwalk_reent>
 80040ae:	bf00      	nop
 80040b0:	08005161 	.word	0x08005161

080040b4 <__sfmoreglue>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	1e4a      	subs	r2, r1, #1
 80040b8:	2568      	movs	r5, #104	; 0x68
 80040ba:	4355      	muls	r5, r2
 80040bc:	460e      	mov	r6, r1
 80040be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040c2:	f000 fcbf 	bl	8004a44 <_malloc_r>
 80040c6:	4604      	mov	r4, r0
 80040c8:	b140      	cbz	r0, 80040dc <__sfmoreglue+0x28>
 80040ca:	2100      	movs	r1, #0
 80040cc:	e9c0 1600 	strd	r1, r6, [r0]
 80040d0:	300c      	adds	r0, #12
 80040d2:	60a0      	str	r0, [r4, #8]
 80040d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040d8:	f7fe fcc0 	bl	8002a5c <memset>
 80040dc:	4620      	mov	r0, r4
 80040de:	bd70      	pop	{r4, r5, r6, pc}

080040e0 <__sfp_lock_acquire>:
 80040e0:	4801      	ldr	r0, [pc, #4]	; (80040e8 <__sfp_lock_acquire+0x8>)
 80040e2:	f000 b8b8 	b.w	8004256 <__retarget_lock_acquire_recursive>
 80040e6:	bf00      	nop
 80040e8:	20000310 	.word	0x20000310

080040ec <__sfp_lock_release>:
 80040ec:	4801      	ldr	r0, [pc, #4]	; (80040f4 <__sfp_lock_release+0x8>)
 80040ee:	f000 b8b3 	b.w	8004258 <__retarget_lock_release_recursive>
 80040f2:	bf00      	nop
 80040f4:	20000310 	.word	0x20000310

080040f8 <__sinit_lock_acquire>:
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <__sinit_lock_acquire+0x8>)
 80040fa:	f000 b8ac 	b.w	8004256 <__retarget_lock_acquire_recursive>
 80040fe:	bf00      	nop
 8004100:	2000030b 	.word	0x2000030b

08004104 <__sinit_lock_release>:
 8004104:	4801      	ldr	r0, [pc, #4]	; (800410c <__sinit_lock_release+0x8>)
 8004106:	f000 b8a7 	b.w	8004258 <__retarget_lock_release_recursive>
 800410a:	bf00      	nop
 800410c:	2000030b 	.word	0x2000030b

08004110 <__sinit>:
 8004110:	b510      	push	{r4, lr}
 8004112:	4604      	mov	r4, r0
 8004114:	f7ff fff0 	bl	80040f8 <__sinit_lock_acquire>
 8004118:	69a3      	ldr	r3, [r4, #24]
 800411a:	b11b      	cbz	r3, 8004124 <__sinit+0x14>
 800411c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004120:	f7ff bff0 	b.w	8004104 <__sinit_lock_release>
 8004124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004128:	6523      	str	r3, [r4, #80]	; 0x50
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <__sinit+0x68>)
 800412c:	4a13      	ldr	r2, [pc, #76]	; (800417c <__sinit+0x6c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	62a2      	str	r2, [r4, #40]	; 0x28
 8004132:	42a3      	cmp	r3, r4
 8004134:	bf04      	itt	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	61a3      	streq	r3, [r4, #24]
 800413a:	4620      	mov	r0, r4
 800413c:	f000 f820 	bl	8004180 <__sfp>
 8004140:	6060      	str	r0, [r4, #4]
 8004142:	4620      	mov	r0, r4
 8004144:	f000 f81c 	bl	8004180 <__sfp>
 8004148:	60a0      	str	r0, [r4, #8]
 800414a:	4620      	mov	r0, r4
 800414c:	f000 f818 	bl	8004180 <__sfp>
 8004150:	2200      	movs	r2, #0
 8004152:	60e0      	str	r0, [r4, #12]
 8004154:	2104      	movs	r1, #4
 8004156:	6860      	ldr	r0, [r4, #4]
 8004158:	f7ff ff82 	bl	8004060 <std>
 800415c:	68a0      	ldr	r0, [r4, #8]
 800415e:	2201      	movs	r2, #1
 8004160:	2109      	movs	r1, #9
 8004162:	f7ff ff7d 	bl	8004060 <std>
 8004166:	68e0      	ldr	r0, [r4, #12]
 8004168:	2202      	movs	r2, #2
 800416a:	2112      	movs	r1, #18
 800416c:	f7ff ff78 	bl	8004060 <std>
 8004170:	2301      	movs	r3, #1
 8004172:	61a3      	str	r3, [r4, #24]
 8004174:	e7d2      	b.n	800411c <__sinit+0xc>
 8004176:	bf00      	nop
 8004178:	08005494 	.word	0x08005494
 800417c:	080040a9 	.word	0x080040a9

08004180 <__sfp>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	4607      	mov	r7, r0
 8004184:	f7ff ffac 	bl	80040e0 <__sfp_lock_acquire>
 8004188:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <__sfp+0x84>)
 800418a:	681e      	ldr	r6, [r3, #0]
 800418c:	69b3      	ldr	r3, [r6, #24]
 800418e:	b913      	cbnz	r3, 8004196 <__sfp+0x16>
 8004190:	4630      	mov	r0, r6
 8004192:	f7ff ffbd 	bl	8004110 <__sinit>
 8004196:	3648      	adds	r6, #72	; 0x48
 8004198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800419c:	3b01      	subs	r3, #1
 800419e:	d503      	bpl.n	80041a8 <__sfp+0x28>
 80041a0:	6833      	ldr	r3, [r6, #0]
 80041a2:	b30b      	cbz	r3, 80041e8 <__sfp+0x68>
 80041a4:	6836      	ldr	r6, [r6, #0]
 80041a6:	e7f7      	b.n	8004198 <__sfp+0x18>
 80041a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041ac:	b9d5      	cbnz	r5, 80041e4 <__sfp+0x64>
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <__sfp+0x88>)
 80041b0:	60e3      	str	r3, [r4, #12]
 80041b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041b6:	6665      	str	r5, [r4, #100]	; 0x64
 80041b8:	f000 f84c 	bl	8004254 <__retarget_lock_init_recursive>
 80041bc:	f7ff ff96 	bl	80040ec <__sfp_lock_release>
 80041c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041c8:	6025      	str	r5, [r4, #0]
 80041ca:	61a5      	str	r5, [r4, #24]
 80041cc:	2208      	movs	r2, #8
 80041ce:	4629      	mov	r1, r5
 80041d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041d4:	f7fe fc42 	bl	8002a5c <memset>
 80041d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041e0:	4620      	mov	r0, r4
 80041e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041e4:	3468      	adds	r4, #104	; 0x68
 80041e6:	e7d9      	b.n	800419c <__sfp+0x1c>
 80041e8:	2104      	movs	r1, #4
 80041ea:	4638      	mov	r0, r7
 80041ec:	f7ff ff62 	bl	80040b4 <__sfmoreglue>
 80041f0:	4604      	mov	r4, r0
 80041f2:	6030      	str	r0, [r6, #0]
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d1d5      	bne.n	80041a4 <__sfp+0x24>
 80041f8:	f7ff ff78 	bl	80040ec <__sfp_lock_release>
 80041fc:	230c      	movs	r3, #12
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	e7ee      	b.n	80041e0 <__sfp+0x60>
 8004202:	bf00      	nop
 8004204:	08005494 	.word	0x08005494
 8004208:	ffff0001 	.word	0xffff0001

0800420c <_fwalk_reent>:
 800420c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004210:	4606      	mov	r6, r0
 8004212:	4688      	mov	r8, r1
 8004214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004218:	2700      	movs	r7, #0
 800421a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800421e:	f1b9 0901 	subs.w	r9, r9, #1
 8004222:	d505      	bpl.n	8004230 <_fwalk_reent+0x24>
 8004224:	6824      	ldr	r4, [r4, #0]
 8004226:	2c00      	cmp	r4, #0
 8004228:	d1f7      	bne.n	800421a <_fwalk_reent+0xe>
 800422a:	4638      	mov	r0, r7
 800422c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004230:	89ab      	ldrh	r3, [r5, #12]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d907      	bls.n	8004246 <_fwalk_reent+0x3a>
 8004236:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800423a:	3301      	adds	r3, #1
 800423c:	d003      	beq.n	8004246 <_fwalk_reent+0x3a>
 800423e:	4629      	mov	r1, r5
 8004240:	4630      	mov	r0, r6
 8004242:	47c0      	blx	r8
 8004244:	4307      	orrs	r7, r0
 8004246:	3568      	adds	r5, #104	; 0x68
 8004248:	e7e9      	b.n	800421e <_fwalk_reent+0x12>
	...

0800424c <_localeconv_r>:
 800424c:	4800      	ldr	r0, [pc, #0]	; (8004250 <_localeconv_r+0x4>)
 800424e:	4770      	bx	lr
 8004250:	20000160 	.word	0x20000160

08004254 <__retarget_lock_init_recursive>:
 8004254:	4770      	bx	lr

08004256 <__retarget_lock_acquire_recursive>:
 8004256:	4770      	bx	lr

08004258 <__retarget_lock_release_recursive>:
 8004258:	4770      	bx	lr
	...

0800425c <malloc>:
 800425c:	4b02      	ldr	r3, [pc, #8]	; (8004268 <malloc+0xc>)
 800425e:	4601      	mov	r1, r0
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	f000 bbef 	b.w	8004a44 <_malloc_r>
 8004266:	bf00      	nop
 8004268:	2000000c 	.word	0x2000000c

0800426c <memcpy>:
 800426c:	440a      	add	r2, r1
 800426e:	4291      	cmp	r1, r2
 8004270:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004274:	d100      	bne.n	8004278 <memcpy+0xc>
 8004276:	4770      	bx	lr
 8004278:	b510      	push	{r4, lr}
 800427a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800427e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004282:	4291      	cmp	r1, r2
 8004284:	d1f9      	bne.n	800427a <memcpy+0xe>
 8004286:	bd10      	pop	{r4, pc}

08004288 <_Balloc>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800428c:	4604      	mov	r4, r0
 800428e:	460d      	mov	r5, r1
 8004290:	b976      	cbnz	r6, 80042b0 <_Balloc+0x28>
 8004292:	2010      	movs	r0, #16
 8004294:	f7ff ffe2 	bl	800425c <malloc>
 8004298:	4602      	mov	r2, r0
 800429a:	6260      	str	r0, [r4, #36]	; 0x24
 800429c:	b920      	cbnz	r0, 80042a8 <_Balloc+0x20>
 800429e:	4b18      	ldr	r3, [pc, #96]	; (8004300 <_Balloc+0x78>)
 80042a0:	4818      	ldr	r0, [pc, #96]	; (8004304 <_Balloc+0x7c>)
 80042a2:	2166      	movs	r1, #102	; 0x66
 80042a4:	f000 fea8 	bl	8004ff8 <__assert_func>
 80042a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80042ac:	6006      	str	r6, [r0, #0]
 80042ae:	60c6      	str	r6, [r0, #12]
 80042b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80042b2:	68f3      	ldr	r3, [r6, #12]
 80042b4:	b183      	cbz	r3, 80042d8 <_Balloc+0x50>
 80042b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80042be:	b9b8      	cbnz	r0, 80042f0 <_Balloc+0x68>
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f605 	lsl.w	r6, r1, r5
 80042c6:	1d72      	adds	r2, r6, #5
 80042c8:	0092      	lsls	r2, r2, #2
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 fb5a 	bl	8004984 <_calloc_r>
 80042d0:	b160      	cbz	r0, 80042ec <_Balloc+0x64>
 80042d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80042d6:	e00e      	b.n	80042f6 <_Balloc+0x6e>
 80042d8:	2221      	movs	r2, #33	; 0x21
 80042da:	2104      	movs	r1, #4
 80042dc:	4620      	mov	r0, r4
 80042de:	f000 fb51 	bl	8004984 <_calloc_r>
 80042e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042e4:	60f0      	str	r0, [r6, #12]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e4      	bne.n	80042b6 <_Balloc+0x2e>
 80042ec:	2000      	movs	r0, #0
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	6802      	ldr	r2, [r0, #0]
 80042f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80042f6:	2300      	movs	r3, #0
 80042f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80042fc:	e7f7      	b.n	80042ee <_Balloc+0x66>
 80042fe:	bf00      	nop
 8004300:	080054d9 	.word	0x080054d9
 8004304:	080055c0 	.word	0x080055c0

08004308 <_Bfree>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800430c:	4605      	mov	r5, r0
 800430e:	460c      	mov	r4, r1
 8004310:	b976      	cbnz	r6, 8004330 <_Bfree+0x28>
 8004312:	2010      	movs	r0, #16
 8004314:	f7ff ffa2 	bl	800425c <malloc>
 8004318:	4602      	mov	r2, r0
 800431a:	6268      	str	r0, [r5, #36]	; 0x24
 800431c:	b920      	cbnz	r0, 8004328 <_Bfree+0x20>
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <_Bfree+0x3c>)
 8004320:	4809      	ldr	r0, [pc, #36]	; (8004348 <_Bfree+0x40>)
 8004322:	218a      	movs	r1, #138	; 0x8a
 8004324:	f000 fe68 	bl	8004ff8 <__assert_func>
 8004328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800432c:	6006      	str	r6, [r0, #0]
 800432e:	60c6      	str	r6, [r0, #12]
 8004330:	b13c      	cbz	r4, 8004342 <_Bfree+0x3a>
 8004332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004334:	6862      	ldr	r2, [r4, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800433c:	6021      	str	r1, [r4, #0]
 800433e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	080054d9 	.word	0x080054d9
 8004348:	080055c0 	.word	0x080055c0

0800434c <__multadd>:
 800434c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004350:	690e      	ldr	r6, [r1, #16]
 8004352:	4607      	mov	r7, r0
 8004354:	4698      	mov	r8, r3
 8004356:	460c      	mov	r4, r1
 8004358:	f101 0014 	add.w	r0, r1, #20
 800435c:	2300      	movs	r3, #0
 800435e:	6805      	ldr	r5, [r0, #0]
 8004360:	b2a9      	uxth	r1, r5
 8004362:	fb02 8101 	mla	r1, r2, r1, r8
 8004366:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800436a:	0c2d      	lsrs	r5, r5, #16
 800436c:	fb02 c505 	mla	r5, r2, r5, ip
 8004370:	b289      	uxth	r1, r1
 8004372:	3301      	adds	r3, #1
 8004374:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004378:	429e      	cmp	r6, r3
 800437a:	f840 1b04 	str.w	r1, [r0], #4
 800437e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004382:	dcec      	bgt.n	800435e <__multadd+0x12>
 8004384:	f1b8 0f00 	cmp.w	r8, #0
 8004388:	d022      	beq.n	80043d0 <__multadd+0x84>
 800438a:	68a3      	ldr	r3, [r4, #8]
 800438c:	42b3      	cmp	r3, r6
 800438e:	dc19      	bgt.n	80043c4 <__multadd+0x78>
 8004390:	6861      	ldr	r1, [r4, #4]
 8004392:	4638      	mov	r0, r7
 8004394:	3101      	adds	r1, #1
 8004396:	f7ff ff77 	bl	8004288 <_Balloc>
 800439a:	4605      	mov	r5, r0
 800439c:	b928      	cbnz	r0, 80043aa <__multadd+0x5e>
 800439e:	4602      	mov	r2, r0
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <__multadd+0x8c>)
 80043a2:	480e      	ldr	r0, [pc, #56]	; (80043dc <__multadd+0x90>)
 80043a4:	21b5      	movs	r1, #181	; 0xb5
 80043a6:	f000 fe27 	bl	8004ff8 <__assert_func>
 80043aa:	6922      	ldr	r2, [r4, #16]
 80043ac:	3202      	adds	r2, #2
 80043ae:	f104 010c 	add.w	r1, r4, #12
 80043b2:	0092      	lsls	r2, r2, #2
 80043b4:	300c      	adds	r0, #12
 80043b6:	f7ff ff59 	bl	800426c <memcpy>
 80043ba:	4621      	mov	r1, r4
 80043bc:	4638      	mov	r0, r7
 80043be:	f7ff ffa3 	bl	8004308 <_Bfree>
 80043c2:	462c      	mov	r4, r5
 80043c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80043c8:	3601      	adds	r6, #1
 80043ca:	f8c3 8014 	str.w	r8, [r3, #20]
 80043ce:	6126      	str	r6, [r4, #16]
 80043d0:	4620      	mov	r0, r4
 80043d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d6:	bf00      	nop
 80043d8:	0800554f 	.word	0x0800554f
 80043dc:	080055c0 	.word	0x080055c0

080043e0 <__hi0bits>:
 80043e0:	0c03      	lsrs	r3, r0, #16
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	b9d3      	cbnz	r3, 800441c <__hi0bits+0x3c>
 80043e6:	0400      	lsls	r0, r0, #16
 80043e8:	2310      	movs	r3, #16
 80043ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80043ee:	bf04      	itt	eq
 80043f0:	0200      	lsleq	r0, r0, #8
 80043f2:	3308      	addeq	r3, #8
 80043f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80043f8:	bf04      	itt	eq
 80043fa:	0100      	lsleq	r0, r0, #4
 80043fc:	3304      	addeq	r3, #4
 80043fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004402:	bf04      	itt	eq
 8004404:	0080      	lsleq	r0, r0, #2
 8004406:	3302      	addeq	r3, #2
 8004408:	2800      	cmp	r0, #0
 800440a:	db05      	blt.n	8004418 <__hi0bits+0x38>
 800440c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004410:	f103 0301 	add.w	r3, r3, #1
 8004414:	bf08      	it	eq
 8004416:	2320      	moveq	r3, #32
 8004418:	4618      	mov	r0, r3
 800441a:	4770      	bx	lr
 800441c:	2300      	movs	r3, #0
 800441e:	e7e4      	b.n	80043ea <__hi0bits+0xa>

08004420 <__lo0bits>:
 8004420:	6803      	ldr	r3, [r0, #0]
 8004422:	f013 0207 	ands.w	r2, r3, #7
 8004426:	4601      	mov	r1, r0
 8004428:	d00b      	beq.n	8004442 <__lo0bits+0x22>
 800442a:	07da      	lsls	r2, r3, #31
 800442c:	d424      	bmi.n	8004478 <__lo0bits+0x58>
 800442e:	0798      	lsls	r0, r3, #30
 8004430:	bf49      	itett	mi
 8004432:	085b      	lsrmi	r3, r3, #1
 8004434:	089b      	lsrpl	r3, r3, #2
 8004436:	2001      	movmi	r0, #1
 8004438:	600b      	strmi	r3, [r1, #0]
 800443a:	bf5c      	itt	pl
 800443c:	600b      	strpl	r3, [r1, #0]
 800443e:	2002      	movpl	r0, #2
 8004440:	4770      	bx	lr
 8004442:	b298      	uxth	r0, r3
 8004444:	b9b0      	cbnz	r0, 8004474 <__lo0bits+0x54>
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	2010      	movs	r0, #16
 800444a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800444e:	bf04      	itt	eq
 8004450:	0a1b      	lsreq	r3, r3, #8
 8004452:	3008      	addeq	r0, #8
 8004454:	071a      	lsls	r2, r3, #28
 8004456:	bf04      	itt	eq
 8004458:	091b      	lsreq	r3, r3, #4
 800445a:	3004      	addeq	r0, #4
 800445c:	079a      	lsls	r2, r3, #30
 800445e:	bf04      	itt	eq
 8004460:	089b      	lsreq	r3, r3, #2
 8004462:	3002      	addeq	r0, #2
 8004464:	07da      	lsls	r2, r3, #31
 8004466:	d403      	bmi.n	8004470 <__lo0bits+0x50>
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	f100 0001 	add.w	r0, r0, #1
 800446e:	d005      	beq.n	800447c <__lo0bits+0x5c>
 8004470:	600b      	str	r3, [r1, #0]
 8004472:	4770      	bx	lr
 8004474:	4610      	mov	r0, r2
 8004476:	e7e8      	b.n	800444a <__lo0bits+0x2a>
 8004478:	2000      	movs	r0, #0
 800447a:	4770      	bx	lr
 800447c:	2020      	movs	r0, #32
 800447e:	4770      	bx	lr

08004480 <__i2b>:
 8004480:	b510      	push	{r4, lr}
 8004482:	460c      	mov	r4, r1
 8004484:	2101      	movs	r1, #1
 8004486:	f7ff feff 	bl	8004288 <_Balloc>
 800448a:	4602      	mov	r2, r0
 800448c:	b928      	cbnz	r0, 800449a <__i2b+0x1a>
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <__i2b+0x24>)
 8004490:	4805      	ldr	r0, [pc, #20]	; (80044a8 <__i2b+0x28>)
 8004492:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004496:	f000 fdaf 	bl	8004ff8 <__assert_func>
 800449a:	2301      	movs	r3, #1
 800449c:	6144      	str	r4, [r0, #20]
 800449e:	6103      	str	r3, [r0, #16]
 80044a0:	bd10      	pop	{r4, pc}
 80044a2:	bf00      	nop
 80044a4:	0800554f 	.word	0x0800554f
 80044a8:	080055c0 	.word	0x080055c0

080044ac <__multiply>:
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	4614      	mov	r4, r2
 80044b2:	690a      	ldr	r2, [r1, #16]
 80044b4:	6923      	ldr	r3, [r4, #16]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	bfb8      	it	lt
 80044ba:	460b      	movlt	r3, r1
 80044bc:	460d      	mov	r5, r1
 80044be:	bfbc      	itt	lt
 80044c0:	4625      	movlt	r5, r4
 80044c2:	461c      	movlt	r4, r3
 80044c4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80044c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80044cc:	68ab      	ldr	r3, [r5, #8]
 80044ce:	6869      	ldr	r1, [r5, #4]
 80044d0:	eb0a 0709 	add.w	r7, sl, r9
 80044d4:	42bb      	cmp	r3, r7
 80044d6:	b085      	sub	sp, #20
 80044d8:	bfb8      	it	lt
 80044da:	3101      	addlt	r1, #1
 80044dc:	f7ff fed4 	bl	8004288 <_Balloc>
 80044e0:	b930      	cbnz	r0, 80044f0 <__multiply+0x44>
 80044e2:	4602      	mov	r2, r0
 80044e4:	4b42      	ldr	r3, [pc, #264]	; (80045f0 <__multiply+0x144>)
 80044e6:	4843      	ldr	r0, [pc, #268]	; (80045f4 <__multiply+0x148>)
 80044e8:	f240 115d 	movw	r1, #349	; 0x15d
 80044ec:	f000 fd84 	bl	8004ff8 <__assert_func>
 80044f0:	f100 0614 	add.w	r6, r0, #20
 80044f4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80044f8:	4633      	mov	r3, r6
 80044fa:	2200      	movs	r2, #0
 80044fc:	4543      	cmp	r3, r8
 80044fe:	d31e      	bcc.n	800453e <__multiply+0x92>
 8004500:	f105 0c14 	add.w	ip, r5, #20
 8004504:	f104 0314 	add.w	r3, r4, #20
 8004508:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800450c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004510:	9202      	str	r2, [sp, #8]
 8004512:	ebac 0205 	sub.w	r2, ip, r5
 8004516:	3a15      	subs	r2, #21
 8004518:	f022 0203 	bic.w	r2, r2, #3
 800451c:	3204      	adds	r2, #4
 800451e:	f105 0115 	add.w	r1, r5, #21
 8004522:	458c      	cmp	ip, r1
 8004524:	bf38      	it	cc
 8004526:	2204      	movcc	r2, #4
 8004528:	9201      	str	r2, [sp, #4]
 800452a:	9a02      	ldr	r2, [sp, #8]
 800452c:	9303      	str	r3, [sp, #12]
 800452e:	429a      	cmp	r2, r3
 8004530:	d808      	bhi.n	8004544 <__multiply+0x98>
 8004532:	2f00      	cmp	r7, #0
 8004534:	dc55      	bgt.n	80045e2 <__multiply+0x136>
 8004536:	6107      	str	r7, [r0, #16]
 8004538:	b005      	add	sp, #20
 800453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453e:	f843 2b04 	str.w	r2, [r3], #4
 8004542:	e7db      	b.n	80044fc <__multiply+0x50>
 8004544:	f8b3 a000 	ldrh.w	sl, [r3]
 8004548:	f1ba 0f00 	cmp.w	sl, #0
 800454c:	d020      	beq.n	8004590 <__multiply+0xe4>
 800454e:	f105 0e14 	add.w	lr, r5, #20
 8004552:	46b1      	mov	r9, r6
 8004554:	2200      	movs	r2, #0
 8004556:	f85e 4b04 	ldr.w	r4, [lr], #4
 800455a:	f8d9 b000 	ldr.w	fp, [r9]
 800455e:	b2a1      	uxth	r1, r4
 8004560:	fa1f fb8b 	uxth.w	fp, fp
 8004564:	fb0a b101 	mla	r1, sl, r1, fp
 8004568:	4411      	add	r1, r2
 800456a:	f8d9 2000 	ldr.w	r2, [r9]
 800456e:	0c24      	lsrs	r4, r4, #16
 8004570:	0c12      	lsrs	r2, r2, #16
 8004572:	fb0a 2404 	mla	r4, sl, r4, r2
 8004576:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800457a:	b289      	uxth	r1, r1
 800457c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004580:	45f4      	cmp	ip, lr
 8004582:	f849 1b04 	str.w	r1, [r9], #4
 8004586:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800458a:	d8e4      	bhi.n	8004556 <__multiply+0xaa>
 800458c:	9901      	ldr	r1, [sp, #4]
 800458e:	5072      	str	r2, [r6, r1]
 8004590:	9a03      	ldr	r2, [sp, #12]
 8004592:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004596:	3304      	adds	r3, #4
 8004598:	f1b9 0f00 	cmp.w	r9, #0
 800459c:	d01f      	beq.n	80045de <__multiply+0x132>
 800459e:	6834      	ldr	r4, [r6, #0]
 80045a0:	f105 0114 	add.w	r1, r5, #20
 80045a4:	46b6      	mov	lr, r6
 80045a6:	f04f 0a00 	mov.w	sl, #0
 80045aa:	880a      	ldrh	r2, [r1, #0]
 80045ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 80045b0:	fb09 b202 	mla	r2, r9, r2, fp
 80045b4:	4492      	add	sl, r2
 80045b6:	b2a4      	uxth	r4, r4
 80045b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80045bc:	f84e 4b04 	str.w	r4, [lr], #4
 80045c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80045c4:	f8be 2000 	ldrh.w	r2, [lr]
 80045c8:	0c24      	lsrs	r4, r4, #16
 80045ca:	fb09 2404 	mla	r4, r9, r4, r2
 80045ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80045d2:	458c      	cmp	ip, r1
 80045d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80045d8:	d8e7      	bhi.n	80045aa <__multiply+0xfe>
 80045da:	9a01      	ldr	r2, [sp, #4]
 80045dc:	50b4      	str	r4, [r6, r2]
 80045de:	3604      	adds	r6, #4
 80045e0:	e7a3      	b.n	800452a <__multiply+0x7e>
 80045e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1a5      	bne.n	8004536 <__multiply+0x8a>
 80045ea:	3f01      	subs	r7, #1
 80045ec:	e7a1      	b.n	8004532 <__multiply+0x86>
 80045ee:	bf00      	nop
 80045f0:	0800554f 	.word	0x0800554f
 80045f4:	080055c0 	.word	0x080055c0

080045f8 <__pow5mult>:
 80045f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045fc:	4615      	mov	r5, r2
 80045fe:	f012 0203 	ands.w	r2, r2, #3
 8004602:	4606      	mov	r6, r0
 8004604:	460f      	mov	r7, r1
 8004606:	d007      	beq.n	8004618 <__pow5mult+0x20>
 8004608:	4c25      	ldr	r4, [pc, #148]	; (80046a0 <__pow5mult+0xa8>)
 800460a:	3a01      	subs	r2, #1
 800460c:	2300      	movs	r3, #0
 800460e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004612:	f7ff fe9b 	bl	800434c <__multadd>
 8004616:	4607      	mov	r7, r0
 8004618:	10ad      	asrs	r5, r5, #2
 800461a:	d03d      	beq.n	8004698 <__pow5mult+0xa0>
 800461c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800461e:	b97c      	cbnz	r4, 8004640 <__pow5mult+0x48>
 8004620:	2010      	movs	r0, #16
 8004622:	f7ff fe1b 	bl	800425c <malloc>
 8004626:	4602      	mov	r2, r0
 8004628:	6270      	str	r0, [r6, #36]	; 0x24
 800462a:	b928      	cbnz	r0, 8004638 <__pow5mult+0x40>
 800462c:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <__pow5mult+0xac>)
 800462e:	481e      	ldr	r0, [pc, #120]	; (80046a8 <__pow5mult+0xb0>)
 8004630:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004634:	f000 fce0 	bl	8004ff8 <__assert_func>
 8004638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800463c:	6004      	str	r4, [r0, #0]
 800463e:	60c4      	str	r4, [r0, #12]
 8004640:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004648:	b94c      	cbnz	r4, 800465e <__pow5mult+0x66>
 800464a:	f240 2171 	movw	r1, #625	; 0x271
 800464e:	4630      	mov	r0, r6
 8004650:	f7ff ff16 	bl	8004480 <__i2b>
 8004654:	2300      	movs	r3, #0
 8004656:	f8c8 0008 	str.w	r0, [r8, #8]
 800465a:	4604      	mov	r4, r0
 800465c:	6003      	str	r3, [r0, #0]
 800465e:	f04f 0900 	mov.w	r9, #0
 8004662:	07eb      	lsls	r3, r5, #31
 8004664:	d50a      	bpl.n	800467c <__pow5mult+0x84>
 8004666:	4639      	mov	r1, r7
 8004668:	4622      	mov	r2, r4
 800466a:	4630      	mov	r0, r6
 800466c:	f7ff ff1e 	bl	80044ac <__multiply>
 8004670:	4639      	mov	r1, r7
 8004672:	4680      	mov	r8, r0
 8004674:	4630      	mov	r0, r6
 8004676:	f7ff fe47 	bl	8004308 <_Bfree>
 800467a:	4647      	mov	r7, r8
 800467c:	106d      	asrs	r5, r5, #1
 800467e:	d00b      	beq.n	8004698 <__pow5mult+0xa0>
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	b938      	cbnz	r0, 8004694 <__pow5mult+0x9c>
 8004684:	4622      	mov	r2, r4
 8004686:	4621      	mov	r1, r4
 8004688:	4630      	mov	r0, r6
 800468a:	f7ff ff0f 	bl	80044ac <__multiply>
 800468e:	6020      	str	r0, [r4, #0]
 8004690:	f8c0 9000 	str.w	r9, [r0]
 8004694:	4604      	mov	r4, r0
 8004696:	e7e4      	b.n	8004662 <__pow5mult+0x6a>
 8004698:	4638      	mov	r0, r7
 800469a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800469e:	bf00      	nop
 80046a0:	08005710 	.word	0x08005710
 80046a4:	080054d9 	.word	0x080054d9
 80046a8:	080055c0 	.word	0x080055c0

080046ac <__lshift>:
 80046ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	460c      	mov	r4, r1
 80046b2:	6849      	ldr	r1, [r1, #4]
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80046ba:	68a3      	ldr	r3, [r4, #8]
 80046bc:	4607      	mov	r7, r0
 80046be:	4691      	mov	r9, r2
 80046c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80046c4:	f108 0601 	add.w	r6, r8, #1
 80046c8:	42b3      	cmp	r3, r6
 80046ca:	db0b      	blt.n	80046e4 <__lshift+0x38>
 80046cc:	4638      	mov	r0, r7
 80046ce:	f7ff fddb 	bl	8004288 <_Balloc>
 80046d2:	4605      	mov	r5, r0
 80046d4:	b948      	cbnz	r0, 80046ea <__lshift+0x3e>
 80046d6:	4602      	mov	r2, r0
 80046d8:	4b28      	ldr	r3, [pc, #160]	; (800477c <__lshift+0xd0>)
 80046da:	4829      	ldr	r0, [pc, #164]	; (8004780 <__lshift+0xd4>)
 80046dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80046e0:	f000 fc8a 	bl	8004ff8 <__assert_func>
 80046e4:	3101      	adds	r1, #1
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	e7ee      	b.n	80046c8 <__lshift+0x1c>
 80046ea:	2300      	movs	r3, #0
 80046ec:	f100 0114 	add.w	r1, r0, #20
 80046f0:	f100 0210 	add.w	r2, r0, #16
 80046f4:	4618      	mov	r0, r3
 80046f6:	4553      	cmp	r3, sl
 80046f8:	db33      	blt.n	8004762 <__lshift+0xb6>
 80046fa:	6920      	ldr	r0, [r4, #16]
 80046fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004700:	f104 0314 	add.w	r3, r4, #20
 8004704:	f019 091f 	ands.w	r9, r9, #31
 8004708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800470c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004710:	d02b      	beq.n	800476a <__lshift+0xbe>
 8004712:	f1c9 0e20 	rsb	lr, r9, #32
 8004716:	468a      	mov	sl, r1
 8004718:	2200      	movs	r2, #0
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	fa00 f009 	lsl.w	r0, r0, r9
 8004720:	4302      	orrs	r2, r0
 8004722:	f84a 2b04 	str.w	r2, [sl], #4
 8004726:	f853 2b04 	ldr.w	r2, [r3], #4
 800472a:	459c      	cmp	ip, r3
 800472c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004730:	d8f3      	bhi.n	800471a <__lshift+0x6e>
 8004732:	ebac 0304 	sub.w	r3, ip, r4
 8004736:	3b15      	subs	r3, #21
 8004738:	f023 0303 	bic.w	r3, r3, #3
 800473c:	3304      	adds	r3, #4
 800473e:	f104 0015 	add.w	r0, r4, #21
 8004742:	4584      	cmp	ip, r0
 8004744:	bf38      	it	cc
 8004746:	2304      	movcc	r3, #4
 8004748:	50ca      	str	r2, [r1, r3]
 800474a:	b10a      	cbz	r2, 8004750 <__lshift+0xa4>
 800474c:	f108 0602 	add.w	r6, r8, #2
 8004750:	3e01      	subs	r6, #1
 8004752:	4638      	mov	r0, r7
 8004754:	612e      	str	r6, [r5, #16]
 8004756:	4621      	mov	r1, r4
 8004758:	f7ff fdd6 	bl	8004308 <_Bfree>
 800475c:	4628      	mov	r0, r5
 800475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004762:	f842 0f04 	str.w	r0, [r2, #4]!
 8004766:	3301      	adds	r3, #1
 8004768:	e7c5      	b.n	80046f6 <__lshift+0x4a>
 800476a:	3904      	subs	r1, #4
 800476c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004770:	f841 2f04 	str.w	r2, [r1, #4]!
 8004774:	459c      	cmp	ip, r3
 8004776:	d8f9      	bhi.n	800476c <__lshift+0xc0>
 8004778:	e7ea      	b.n	8004750 <__lshift+0xa4>
 800477a:	bf00      	nop
 800477c:	0800554f 	.word	0x0800554f
 8004780:	080055c0 	.word	0x080055c0

08004784 <__mcmp>:
 8004784:	b530      	push	{r4, r5, lr}
 8004786:	6902      	ldr	r2, [r0, #16]
 8004788:	690c      	ldr	r4, [r1, #16]
 800478a:	1b12      	subs	r2, r2, r4
 800478c:	d10e      	bne.n	80047ac <__mcmp+0x28>
 800478e:	f100 0314 	add.w	r3, r0, #20
 8004792:	3114      	adds	r1, #20
 8004794:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004798:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800479c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80047a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80047a4:	42a5      	cmp	r5, r4
 80047a6:	d003      	beq.n	80047b0 <__mcmp+0x2c>
 80047a8:	d305      	bcc.n	80047b6 <__mcmp+0x32>
 80047aa:	2201      	movs	r2, #1
 80047ac:	4610      	mov	r0, r2
 80047ae:	bd30      	pop	{r4, r5, pc}
 80047b0:	4283      	cmp	r3, r0
 80047b2:	d3f3      	bcc.n	800479c <__mcmp+0x18>
 80047b4:	e7fa      	b.n	80047ac <__mcmp+0x28>
 80047b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047ba:	e7f7      	b.n	80047ac <__mcmp+0x28>

080047bc <__mdiff>:
 80047bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c0:	460c      	mov	r4, r1
 80047c2:	4606      	mov	r6, r0
 80047c4:	4611      	mov	r1, r2
 80047c6:	4620      	mov	r0, r4
 80047c8:	4617      	mov	r7, r2
 80047ca:	f7ff ffdb 	bl	8004784 <__mcmp>
 80047ce:	1e05      	subs	r5, r0, #0
 80047d0:	d110      	bne.n	80047f4 <__mdiff+0x38>
 80047d2:	4629      	mov	r1, r5
 80047d4:	4630      	mov	r0, r6
 80047d6:	f7ff fd57 	bl	8004288 <_Balloc>
 80047da:	b930      	cbnz	r0, 80047ea <__mdiff+0x2e>
 80047dc:	4b39      	ldr	r3, [pc, #228]	; (80048c4 <__mdiff+0x108>)
 80047de:	4602      	mov	r2, r0
 80047e0:	f240 2132 	movw	r1, #562	; 0x232
 80047e4:	4838      	ldr	r0, [pc, #224]	; (80048c8 <__mdiff+0x10c>)
 80047e6:	f000 fc07 	bl	8004ff8 <__assert_func>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80047f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f4:	bfa4      	itt	ge
 80047f6:	463b      	movge	r3, r7
 80047f8:	4627      	movge	r7, r4
 80047fa:	4630      	mov	r0, r6
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	bfa6      	itte	ge
 8004800:	461c      	movge	r4, r3
 8004802:	2500      	movge	r5, #0
 8004804:	2501      	movlt	r5, #1
 8004806:	f7ff fd3f 	bl	8004288 <_Balloc>
 800480a:	b920      	cbnz	r0, 8004816 <__mdiff+0x5a>
 800480c:	4b2d      	ldr	r3, [pc, #180]	; (80048c4 <__mdiff+0x108>)
 800480e:	4602      	mov	r2, r0
 8004810:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004814:	e7e6      	b.n	80047e4 <__mdiff+0x28>
 8004816:	693e      	ldr	r6, [r7, #16]
 8004818:	60c5      	str	r5, [r0, #12]
 800481a:	6925      	ldr	r5, [r4, #16]
 800481c:	f107 0114 	add.w	r1, r7, #20
 8004820:	f104 0914 	add.w	r9, r4, #20
 8004824:	f100 0e14 	add.w	lr, r0, #20
 8004828:	f107 0210 	add.w	r2, r7, #16
 800482c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004830:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004834:	46f2      	mov	sl, lr
 8004836:	2700      	movs	r7, #0
 8004838:	f859 3b04 	ldr.w	r3, [r9], #4
 800483c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004840:	fa1f f883 	uxth.w	r8, r3
 8004844:	fa17 f78b 	uxtah	r7, r7, fp
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	eba7 0808 	sub.w	r8, r7, r8
 800484e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004852:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004856:	fa1f f888 	uxth.w	r8, r8
 800485a:	141f      	asrs	r7, r3, #16
 800485c:	454d      	cmp	r5, r9
 800485e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004862:	f84a 3b04 	str.w	r3, [sl], #4
 8004866:	d8e7      	bhi.n	8004838 <__mdiff+0x7c>
 8004868:	1b2b      	subs	r3, r5, r4
 800486a:	3b15      	subs	r3, #21
 800486c:	f023 0303 	bic.w	r3, r3, #3
 8004870:	3304      	adds	r3, #4
 8004872:	3415      	adds	r4, #21
 8004874:	42a5      	cmp	r5, r4
 8004876:	bf38      	it	cc
 8004878:	2304      	movcc	r3, #4
 800487a:	4419      	add	r1, r3
 800487c:	4473      	add	r3, lr
 800487e:	469e      	mov	lr, r3
 8004880:	460d      	mov	r5, r1
 8004882:	4565      	cmp	r5, ip
 8004884:	d30e      	bcc.n	80048a4 <__mdiff+0xe8>
 8004886:	f10c 0203 	add.w	r2, ip, #3
 800488a:	1a52      	subs	r2, r2, r1
 800488c:	f022 0203 	bic.w	r2, r2, #3
 8004890:	3903      	subs	r1, #3
 8004892:	458c      	cmp	ip, r1
 8004894:	bf38      	it	cc
 8004896:	2200      	movcc	r2, #0
 8004898:	441a      	add	r2, r3
 800489a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800489e:	b17b      	cbz	r3, 80048c0 <__mdiff+0x104>
 80048a0:	6106      	str	r6, [r0, #16]
 80048a2:	e7a5      	b.n	80047f0 <__mdiff+0x34>
 80048a4:	f855 8b04 	ldr.w	r8, [r5], #4
 80048a8:	fa17 f488 	uxtah	r4, r7, r8
 80048ac:	1422      	asrs	r2, r4, #16
 80048ae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80048b2:	b2a4      	uxth	r4, r4
 80048b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80048b8:	f84e 4b04 	str.w	r4, [lr], #4
 80048bc:	1417      	asrs	r7, r2, #16
 80048be:	e7e0      	b.n	8004882 <__mdiff+0xc6>
 80048c0:	3e01      	subs	r6, #1
 80048c2:	e7ea      	b.n	800489a <__mdiff+0xde>
 80048c4:	0800554f 	.word	0x0800554f
 80048c8:	080055c0 	.word	0x080055c0

080048cc <__d2b>:
 80048cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80048d0:	4689      	mov	r9, r1
 80048d2:	2101      	movs	r1, #1
 80048d4:	ec57 6b10 	vmov	r6, r7, d0
 80048d8:	4690      	mov	r8, r2
 80048da:	f7ff fcd5 	bl	8004288 <_Balloc>
 80048de:	4604      	mov	r4, r0
 80048e0:	b930      	cbnz	r0, 80048f0 <__d2b+0x24>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b25      	ldr	r3, [pc, #148]	; (800497c <__d2b+0xb0>)
 80048e6:	4826      	ldr	r0, [pc, #152]	; (8004980 <__d2b+0xb4>)
 80048e8:	f240 310a 	movw	r1, #778	; 0x30a
 80048ec:	f000 fb84 	bl	8004ff8 <__assert_func>
 80048f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80048f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80048f8:	bb35      	cbnz	r5, 8004948 <__d2b+0x7c>
 80048fa:	2e00      	cmp	r6, #0
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	d028      	beq.n	8004952 <__d2b+0x86>
 8004900:	4668      	mov	r0, sp
 8004902:	9600      	str	r6, [sp, #0]
 8004904:	f7ff fd8c 	bl	8004420 <__lo0bits>
 8004908:	9900      	ldr	r1, [sp, #0]
 800490a:	b300      	cbz	r0, 800494e <__d2b+0x82>
 800490c:	9a01      	ldr	r2, [sp, #4]
 800490e:	f1c0 0320 	rsb	r3, r0, #32
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	430b      	orrs	r3, r1
 8004918:	40c2      	lsrs	r2, r0
 800491a:	6163      	str	r3, [r4, #20]
 800491c:	9201      	str	r2, [sp, #4]
 800491e:	9b01      	ldr	r3, [sp, #4]
 8004920:	61a3      	str	r3, [r4, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	bf14      	ite	ne
 8004926:	2202      	movne	r2, #2
 8004928:	2201      	moveq	r2, #1
 800492a:	6122      	str	r2, [r4, #16]
 800492c:	b1d5      	cbz	r5, 8004964 <__d2b+0x98>
 800492e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004932:	4405      	add	r5, r0
 8004934:	f8c9 5000 	str.w	r5, [r9]
 8004938:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800493c:	f8c8 0000 	str.w	r0, [r8]
 8004940:	4620      	mov	r0, r4
 8004942:	b003      	add	sp, #12
 8004944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800494c:	e7d5      	b.n	80048fa <__d2b+0x2e>
 800494e:	6161      	str	r1, [r4, #20]
 8004950:	e7e5      	b.n	800491e <__d2b+0x52>
 8004952:	a801      	add	r0, sp, #4
 8004954:	f7ff fd64 	bl	8004420 <__lo0bits>
 8004958:	9b01      	ldr	r3, [sp, #4]
 800495a:	6163      	str	r3, [r4, #20]
 800495c:	2201      	movs	r2, #1
 800495e:	6122      	str	r2, [r4, #16]
 8004960:	3020      	adds	r0, #32
 8004962:	e7e3      	b.n	800492c <__d2b+0x60>
 8004964:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004968:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800496c:	f8c9 0000 	str.w	r0, [r9]
 8004970:	6918      	ldr	r0, [r3, #16]
 8004972:	f7ff fd35 	bl	80043e0 <__hi0bits>
 8004976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800497a:	e7df      	b.n	800493c <__d2b+0x70>
 800497c:	0800554f 	.word	0x0800554f
 8004980:	080055c0 	.word	0x080055c0

08004984 <_calloc_r>:
 8004984:	b513      	push	{r0, r1, r4, lr}
 8004986:	434a      	muls	r2, r1
 8004988:	4611      	mov	r1, r2
 800498a:	9201      	str	r2, [sp, #4]
 800498c:	f000 f85a 	bl	8004a44 <_malloc_r>
 8004990:	4604      	mov	r4, r0
 8004992:	b118      	cbz	r0, 800499c <_calloc_r+0x18>
 8004994:	9a01      	ldr	r2, [sp, #4]
 8004996:	2100      	movs	r1, #0
 8004998:	f7fe f860 	bl	8002a5c <memset>
 800499c:	4620      	mov	r0, r4
 800499e:	b002      	add	sp, #8
 80049a0:	bd10      	pop	{r4, pc}
	...

080049a4 <_free_r>:
 80049a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049a6:	2900      	cmp	r1, #0
 80049a8:	d048      	beq.n	8004a3c <_free_r+0x98>
 80049aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ae:	9001      	str	r0, [sp, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f1a1 0404 	sub.w	r4, r1, #4
 80049b6:	bfb8      	it	lt
 80049b8:	18e4      	addlt	r4, r4, r3
 80049ba:	f000 fca7 	bl	800530c <__malloc_lock>
 80049be:	4a20      	ldr	r2, [pc, #128]	; (8004a40 <_free_r+0x9c>)
 80049c0:	9801      	ldr	r0, [sp, #4]
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	4615      	mov	r5, r2
 80049c6:	b933      	cbnz	r3, 80049d6 <_free_r+0x32>
 80049c8:	6063      	str	r3, [r4, #4]
 80049ca:	6014      	str	r4, [r2, #0]
 80049cc:	b003      	add	sp, #12
 80049ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049d2:	f000 bca1 	b.w	8005318 <__malloc_unlock>
 80049d6:	42a3      	cmp	r3, r4
 80049d8:	d90b      	bls.n	80049f2 <_free_r+0x4e>
 80049da:	6821      	ldr	r1, [r4, #0]
 80049dc:	1862      	adds	r2, r4, r1
 80049de:	4293      	cmp	r3, r2
 80049e0:	bf04      	itt	eq
 80049e2:	681a      	ldreq	r2, [r3, #0]
 80049e4:	685b      	ldreq	r3, [r3, #4]
 80049e6:	6063      	str	r3, [r4, #4]
 80049e8:	bf04      	itt	eq
 80049ea:	1852      	addeq	r2, r2, r1
 80049ec:	6022      	streq	r2, [r4, #0]
 80049ee:	602c      	str	r4, [r5, #0]
 80049f0:	e7ec      	b.n	80049cc <_free_r+0x28>
 80049f2:	461a      	mov	r2, r3
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	b10b      	cbz	r3, 80049fc <_free_r+0x58>
 80049f8:	42a3      	cmp	r3, r4
 80049fa:	d9fa      	bls.n	80049f2 <_free_r+0x4e>
 80049fc:	6811      	ldr	r1, [r2, #0]
 80049fe:	1855      	adds	r5, r2, r1
 8004a00:	42a5      	cmp	r5, r4
 8004a02:	d10b      	bne.n	8004a1c <_free_r+0x78>
 8004a04:	6824      	ldr	r4, [r4, #0]
 8004a06:	4421      	add	r1, r4
 8004a08:	1854      	adds	r4, r2, r1
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	6011      	str	r1, [r2, #0]
 8004a0e:	d1dd      	bne.n	80049cc <_free_r+0x28>
 8004a10:	681c      	ldr	r4, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	6053      	str	r3, [r2, #4]
 8004a16:	4421      	add	r1, r4
 8004a18:	6011      	str	r1, [r2, #0]
 8004a1a:	e7d7      	b.n	80049cc <_free_r+0x28>
 8004a1c:	d902      	bls.n	8004a24 <_free_r+0x80>
 8004a1e:	230c      	movs	r3, #12
 8004a20:	6003      	str	r3, [r0, #0]
 8004a22:	e7d3      	b.n	80049cc <_free_r+0x28>
 8004a24:	6825      	ldr	r5, [r4, #0]
 8004a26:	1961      	adds	r1, r4, r5
 8004a28:	428b      	cmp	r3, r1
 8004a2a:	bf04      	itt	eq
 8004a2c:	6819      	ldreq	r1, [r3, #0]
 8004a2e:	685b      	ldreq	r3, [r3, #4]
 8004a30:	6063      	str	r3, [r4, #4]
 8004a32:	bf04      	itt	eq
 8004a34:	1949      	addeq	r1, r1, r5
 8004a36:	6021      	streq	r1, [r4, #0]
 8004a38:	6054      	str	r4, [r2, #4]
 8004a3a:	e7c7      	b.n	80049cc <_free_r+0x28>
 8004a3c:	b003      	add	sp, #12
 8004a3e:	bd30      	pop	{r4, r5, pc}
 8004a40:	20000224 	.word	0x20000224

08004a44 <_malloc_r>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	1ccd      	adds	r5, r1, #3
 8004a48:	f025 0503 	bic.w	r5, r5, #3
 8004a4c:	3508      	adds	r5, #8
 8004a4e:	2d0c      	cmp	r5, #12
 8004a50:	bf38      	it	cc
 8004a52:	250c      	movcc	r5, #12
 8004a54:	2d00      	cmp	r5, #0
 8004a56:	4606      	mov	r6, r0
 8004a58:	db01      	blt.n	8004a5e <_malloc_r+0x1a>
 8004a5a:	42a9      	cmp	r1, r5
 8004a5c:	d903      	bls.n	8004a66 <_malloc_r+0x22>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	6033      	str	r3, [r6, #0]
 8004a62:	2000      	movs	r0, #0
 8004a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a66:	f000 fc51 	bl	800530c <__malloc_lock>
 8004a6a:	4921      	ldr	r1, [pc, #132]	; (8004af0 <_malloc_r+0xac>)
 8004a6c:	680a      	ldr	r2, [r1, #0]
 8004a6e:	4614      	mov	r4, r2
 8004a70:	b99c      	cbnz	r4, 8004a9a <_malloc_r+0x56>
 8004a72:	4f20      	ldr	r7, [pc, #128]	; (8004af4 <_malloc_r+0xb0>)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	b923      	cbnz	r3, 8004a82 <_malloc_r+0x3e>
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f000 f996 	bl	8004dac <_sbrk_r>
 8004a80:	6038      	str	r0, [r7, #0]
 8004a82:	4629      	mov	r1, r5
 8004a84:	4630      	mov	r0, r6
 8004a86:	f000 f991 	bl	8004dac <_sbrk_r>
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	d123      	bne.n	8004ad6 <_malloc_r+0x92>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	4630      	mov	r0, r6
 8004a94:	f000 fc40 	bl	8005318 <__malloc_unlock>
 8004a98:	e7e3      	b.n	8004a62 <_malloc_r+0x1e>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	1b5b      	subs	r3, r3, r5
 8004a9e:	d417      	bmi.n	8004ad0 <_malloc_r+0x8c>
 8004aa0:	2b0b      	cmp	r3, #11
 8004aa2:	d903      	bls.n	8004aac <_malloc_r+0x68>
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	441c      	add	r4, r3
 8004aa8:	6025      	str	r5, [r4, #0]
 8004aaa:	e004      	b.n	8004ab6 <_malloc_r+0x72>
 8004aac:	6863      	ldr	r3, [r4, #4]
 8004aae:	42a2      	cmp	r2, r4
 8004ab0:	bf0c      	ite	eq
 8004ab2:	600b      	streq	r3, [r1, #0]
 8004ab4:	6053      	strne	r3, [r2, #4]
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f000 fc2e 	bl	8005318 <__malloc_unlock>
 8004abc:	f104 000b 	add.w	r0, r4, #11
 8004ac0:	1d23      	adds	r3, r4, #4
 8004ac2:	f020 0007 	bic.w	r0, r0, #7
 8004ac6:	1ac2      	subs	r2, r0, r3
 8004ac8:	d0cc      	beq.n	8004a64 <_malloc_r+0x20>
 8004aca:	1a1b      	subs	r3, r3, r0
 8004acc:	50a3      	str	r3, [r4, r2]
 8004ace:	e7c9      	b.n	8004a64 <_malloc_r+0x20>
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	6864      	ldr	r4, [r4, #4]
 8004ad4:	e7cc      	b.n	8004a70 <_malloc_r+0x2c>
 8004ad6:	1cc4      	adds	r4, r0, #3
 8004ad8:	f024 0403 	bic.w	r4, r4, #3
 8004adc:	42a0      	cmp	r0, r4
 8004ade:	d0e3      	beq.n	8004aa8 <_malloc_r+0x64>
 8004ae0:	1a21      	subs	r1, r4, r0
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f000 f962 	bl	8004dac <_sbrk_r>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d1dd      	bne.n	8004aa8 <_malloc_r+0x64>
 8004aec:	e7cf      	b.n	8004a8e <_malloc_r+0x4a>
 8004aee:	bf00      	nop
 8004af0:	20000224 	.word	0x20000224
 8004af4:	20000228 	.word	0x20000228

08004af8 <__sfputc_r>:
 8004af8:	6893      	ldr	r3, [r2, #8]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	b410      	push	{r4}
 8004b00:	6093      	str	r3, [r2, #8]
 8004b02:	da08      	bge.n	8004b16 <__sfputc_r+0x1e>
 8004b04:	6994      	ldr	r4, [r2, #24]
 8004b06:	42a3      	cmp	r3, r4
 8004b08:	db01      	blt.n	8004b0e <__sfputc_r+0x16>
 8004b0a:	290a      	cmp	r1, #10
 8004b0c:	d103      	bne.n	8004b16 <__sfputc_r+0x1e>
 8004b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b12:	f000 b99f 	b.w	8004e54 <__swbuf_r>
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	1c58      	adds	r0, r3, #1
 8004b1a:	6010      	str	r0, [r2, #0]
 8004b1c:	7019      	strb	r1, [r3, #0]
 8004b1e:	4608      	mov	r0, r1
 8004b20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <__sfputs_r>:
 8004b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b28:	4606      	mov	r6, r0
 8004b2a:	460f      	mov	r7, r1
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	18d5      	adds	r5, r2, r3
 8004b30:	42ac      	cmp	r4, r5
 8004b32:	d101      	bne.n	8004b38 <__sfputs_r+0x12>
 8004b34:	2000      	movs	r0, #0
 8004b36:	e007      	b.n	8004b48 <__sfputs_r+0x22>
 8004b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b3c:	463a      	mov	r2, r7
 8004b3e:	4630      	mov	r0, r6
 8004b40:	f7ff ffda 	bl	8004af8 <__sfputc_r>
 8004b44:	1c43      	adds	r3, r0, #1
 8004b46:	d1f3      	bne.n	8004b30 <__sfputs_r+0xa>
 8004b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b4c <_vfiprintf_r>:
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b50:	460d      	mov	r5, r1
 8004b52:	b09d      	sub	sp, #116	; 0x74
 8004b54:	4614      	mov	r4, r2
 8004b56:	4698      	mov	r8, r3
 8004b58:	4606      	mov	r6, r0
 8004b5a:	b118      	cbz	r0, 8004b64 <_vfiprintf_r+0x18>
 8004b5c:	6983      	ldr	r3, [r0, #24]
 8004b5e:	b90b      	cbnz	r3, 8004b64 <_vfiprintf_r+0x18>
 8004b60:	f7ff fad6 	bl	8004110 <__sinit>
 8004b64:	4b89      	ldr	r3, [pc, #548]	; (8004d8c <_vfiprintf_r+0x240>)
 8004b66:	429d      	cmp	r5, r3
 8004b68:	d11b      	bne.n	8004ba2 <_vfiprintf_r+0x56>
 8004b6a:	6875      	ldr	r5, [r6, #4]
 8004b6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b6e:	07d9      	lsls	r1, r3, #31
 8004b70:	d405      	bmi.n	8004b7e <_vfiprintf_r+0x32>
 8004b72:	89ab      	ldrh	r3, [r5, #12]
 8004b74:	059a      	lsls	r2, r3, #22
 8004b76:	d402      	bmi.n	8004b7e <_vfiprintf_r+0x32>
 8004b78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b7a:	f7ff fb6c 	bl	8004256 <__retarget_lock_acquire_recursive>
 8004b7e:	89ab      	ldrh	r3, [r5, #12]
 8004b80:	071b      	lsls	r3, r3, #28
 8004b82:	d501      	bpl.n	8004b88 <_vfiprintf_r+0x3c>
 8004b84:	692b      	ldr	r3, [r5, #16]
 8004b86:	b9eb      	cbnz	r3, 8004bc4 <_vfiprintf_r+0x78>
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f000 f9c6 	bl	8004f1c <__swsetup_r>
 8004b90:	b1c0      	cbz	r0, 8004bc4 <_vfiprintf_r+0x78>
 8004b92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b94:	07dc      	lsls	r4, r3, #31
 8004b96:	d50e      	bpl.n	8004bb6 <_vfiprintf_r+0x6a>
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b9c:	b01d      	add	sp, #116	; 0x74
 8004b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba2:	4b7b      	ldr	r3, [pc, #492]	; (8004d90 <_vfiprintf_r+0x244>)
 8004ba4:	429d      	cmp	r5, r3
 8004ba6:	d101      	bne.n	8004bac <_vfiprintf_r+0x60>
 8004ba8:	68b5      	ldr	r5, [r6, #8]
 8004baa:	e7df      	b.n	8004b6c <_vfiprintf_r+0x20>
 8004bac:	4b79      	ldr	r3, [pc, #484]	; (8004d94 <_vfiprintf_r+0x248>)
 8004bae:	429d      	cmp	r5, r3
 8004bb0:	bf08      	it	eq
 8004bb2:	68f5      	ldreq	r5, [r6, #12]
 8004bb4:	e7da      	b.n	8004b6c <_vfiprintf_r+0x20>
 8004bb6:	89ab      	ldrh	r3, [r5, #12]
 8004bb8:	0598      	lsls	r0, r3, #22
 8004bba:	d4ed      	bmi.n	8004b98 <_vfiprintf_r+0x4c>
 8004bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bbe:	f7ff fb4b 	bl	8004258 <__retarget_lock_release_recursive>
 8004bc2:	e7e9      	b.n	8004b98 <_vfiprintf_r+0x4c>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bc8:	2320      	movs	r3, #32
 8004bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bd2:	2330      	movs	r3, #48	; 0x30
 8004bd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d98 <_vfiprintf_r+0x24c>
 8004bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bdc:	f04f 0901 	mov.w	r9, #1
 8004be0:	4623      	mov	r3, r4
 8004be2:	469a      	mov	sl, r3
 8004be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004be8:	b10a      	cbz	r2, 8004bee <_vfiprintf_r+0xa2>
 8004bea:	2a25      	cmp	r2, #37	; 0x25
 8004bec:	d1f9      	bne.n	8004be2 <_vfiprintf_r+0x96>
 8004bee:	ebba 0b04 	subs.w	fp, sl, r4
 8004bf2:	d00b      	beq.n	8004c0c <_vfiprintf_r+0xc0>
 8004bf4:	465b      	mov	r3, fp
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f7ff ff93 	bl	8004b26 <__sfputs_r>
 8004c00:	3001      	adds	r0, #1
 8004c02:	f000 80aa 	beq.w	8004d5a <_vfiprintf_r+0x20e>
 8004c06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c08:	445a      	add	r2, fp
 8004c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80a2 	beq.w	8004d5a <_vfiprintf_r+0x20e>
 8004c16:	2300      	movs	r3, #0
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c20:	f10a 0a01 	add.w	sl, sl, #1
 8004c24:	9304      	str	r3, [sp, #16]
 8004c26:	9307      	str	r3, [sp, #28]
 8004c28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004c2e:	4654      	mov	r4, sl
 8004c30:	2205      	movs	r2, #5
 8004c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c36:	4858      	ldr	r0, [pc, #352]	; (8004d98 <_vfiprintf_r+0x24c>)
 8004c38:	f7fb fad2 	bl	80001e0 <memchr>
 8004c3c:	9a04      	ldr	r2, [sp, #16]
 8004c3e:	b9d8      	cbnz	r0, 8004c78 <_vfiprintf_r+0x12c>
 8004c40:	06d1      	lsls	r1, r2, #27
 8004c42:	bf44      	itt	mi
 8004c44:	2320      	movmi	r3, #32
 8004c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c4a:	0713      	lsls	r3, r2, #28
 8004c4c:	bf44      	itt	mi
 8004c4e:	232b      	movmi	r3, #43	; 0x2b
 8004c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c54:	f89a 3000 	ldrb.w	r3, [sl]
 8004c58:	2b2a      	cmp	r3, #42	; 0x2a
 8004c5a:	d015      	beq.n	8004c88 <_vfiprintf_r+0x13c>
 8004c5c:	9a07      	ldr	r2, [sp, #28]
 8004c5e:	4654      	mov	r4, sl
 8004c60:	2000      	movs	r0, #0
 8004c62:	f04f 0c0a 	mov.w	ip, #10
 8004c66:	4621      	mov	r1, r4
 8004c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c6c:	3b30      	subs	r3, #48	; 0x30
 8004c6e:	2b09      	cmp	r3, #9
 8004c70:	d94e      	bls.n	8004d10 <_vfiprintf_r+0x1c4>
 8004c72:	b1b0      	cbz	r0, 8004ca2 <_vfiprintf_r+0x156>
 8004c74:	9207      	str	r2, [sp, #28]
 8004c76:	e014      	b.n	8004ca2 <_vfiprintf_r+0x156>
 8004c78:	eba0 0308 	sub.w	r3, r0, r8
 8004c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004c80:	4313      	orrs	r3, r2
 8004c82:	9304      	str	r3, [sp, #16]
 8004c84:	46a2      	mov	sl, r4
 8004c86:	e7d2      	b.n	8004c2e <_vfiprintf_r+0xe2>
 8004c88:	9b03      	ldr	r3, [sp, #12]
 8004c8a:	1d19      	adds	r1, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	9103      	str	r1, [sp, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bfbb      	ittet	lt
 8004c94:	425b      	neglt	r3, r3
 8004c96:	f042 0202 	orrlt.w	r2, r2, #2
 8004c9a:	9307      	strge	r3, [sp, #28]
 8004c9c:	9307      	strlt	r3, [sp, #28]
 8004c9e:	bfb8      	it	lt
 8004ca0:	9204      	strlt	r2, [sp, #16]
 8004ca2:	7823      	ldrb	r3, [r4, #0]
 8004ca4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ca6:	d10c      	bne.n	8004cc2 <_vfiprintf_r+0x176>
 8004ca8:	7863      	ldrb	r3, [r4, #1]
 8004caa:	2b2a      	cmp	r3, #42	; 0x2a
 8004cac:	d135      	bne.n	8004d1a <_vfiprintf_r+0x1ce>
 8004cae:	9b03      	ldr	r3, [sp, #12]
 8004cb0:	1d1a      	adds	r2, r3, #4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	9203      	str	r2, [sp, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bfb8      	it	lt
 8004cba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004cbe:	3402      	adds	r4, #2
 8004cc0:	9305      	str	r3, [sp, #20]
 8004cc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004da8 <_vfiprintf_r+0x25c>
 8004cc6:	7821      	ldrb	r1, [r4, #0]
 8004cc8:	2203      	movs	r2, #3
 8004cca:	4650      	mov	r0, sl
 8004ccc:	f7fb fa88 	bl	80001e0 <memchr>
 8004cd0:	b140      	cbz	r0, 8004ce4 <_vfiprintf_r+0x198>
 8004cd2:	2340      	movs	r3, #64	; 0x40
 8004cd4:	eba0 000a 	sub.w	r0, r0, sl
 8004cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8004cdc:	9b04      	ldr	r3, [sp, #16]
 8004cde:	4303      	orrs	r3, r0
 8004ce0:	3401      	adds	r4, #1
 8004ce2:	9304      	str	r3, [sp, #16]
 8004ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ce8:	482c      	ldr	r0, [pc, #176]	; (8004d9c <_vfiprintf_r+0x250>)
 8004cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cee:	2206      	movs	r2, #6
 8004cf0:	f7fb fa76 	bl	80001e0 <memchr>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d03f      	beq.n	8004d78 <_vfiprintf_r+0x22c>
 8004cf8:	4b29      	ldr	r3, [pc, #164]	; (8004da0 <_vfiprintf_r+0x254>)
 8004cfa:	bb1b      	cbnz	r3, 8004d44 <_vfiprintf_r+0x1f8>
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	3307      	adds	r3, #7
 8004d00:	f023 0307 	bic.w	r3, r3, #7
 8004d04:	3308      	adds	r3, #8
 8004d06:	9303      	str	r3, [sp, #12]
 8004d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d0a:	443b      	add	r3, r7
 8004d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d0e:	e767      	b.n	8004be0 <_vfiprintf_r+0x94>
 8004d10:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d14:	460c      	mov	r4, r1
 8004d16:	2001      	movs	r0, #1
 8004d18:	e7a5      	b.n	8004c66 <_vfiprintf_r+0x11a>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	3401      	adds	r4, #1
 8004d1e:	9305      	str	r3, [sp, #20]
 8004d20:	4619      	mov	r1, r3
 8004d22:	f04f 0c0a 	mov.w	ip, #10
 8004d26:	4620      	mov	r0, r4
 8004d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d2c:	3a30      	subs	r2, #48	; 0x30
 8004d2e:	2a09      	cmp	r2, #9
 8004d30:	d903      	bls.n	8004d3a <_vfiprintf_r+0x1ee>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0c5      	beq.n	8004cc2 <_vfiprintf_r+0x176>
 8004d36:	9105      	str	r1, [sp, #20]
 8004d38:	e7c3      	b.n	8004cc2 <_vfiprintf_r+0x176>
 8004d3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d3e:	4604      	mov	r4, r0
 8004d40:	2301      	movs	r3, #1
 8004d42:	e7f0      	b.n	8004d26 <_vfiprintf_r+0x1da>
 8004d44:	ab03      	add	r3, sp, #12
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	462a      	mov	r2, r5
 8004d4a:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <_vfiprintf_r+0x258>)
 8004d4c:	a904      	add	r1, sp, #16
 8004d4e:	4630      	mov	r0, r6
 8004d50:	f7fd ff2c 	bl	8002bac <_printf_float>
 8004d54:	4607      	mov	r7, r0
 8004d56:	1c78      	adds	r0, r7, #1
 8004d58:	d1d6      	bne.n	8004d08 <_vfiprintf_r+0x1bc>
 8004d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d5c:	07d9      	lsls	r1, r3, #31
 8004d5e:	d405      	bmi.n	8004d6c <_vfiprintf_r+0x220>
 8004d60:	89ab      	ldrh	r3, [r5, #12]
 8004d62:	059a      	lsls	r2, r3, #22
 8004d64:	d402      	bmi.n	8004d6c <_vfiprintf_r+0x220>
 8004d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d68:	f7ff fa76 	bl	8004258 <__retarget_lock_release_recursive>
 8004d6c:	89ab      	ldrh	r3, [r5, #12]
 8004d6e:	065b      	lsls	r3, r3, #25
 8004d70:	f53f af12 	bmi.w	8004b98 <_vfiprintf_r+0x4c>
 8004d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d76:	e711      	b.n	8004b9c <_vfiprintf_r+0x50>
 8004d78:	ab03      	add	r3, sp, #12
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	462a      	mov	r2, r5
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <_vfiprintf_r+0x258>)
 8004d80:	a904      	add	r1, sp, #16
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7fe f9b6 	bl	80030f4 <_printf_i>
 8004d88:	e7e4      	b.n	8004d54 <_vfiprintf_r+0x208>
 8004d8a:	bf00      	nop
 8004d8c:	08005580 	.word	0x08005580
 8004d90:	080055a0 	.word	0x080055a0
 8004d94:	08005560 	.word	0x08005560
 8004d98:	0800571c 	.word	0x0800571c
 8004d9c:	08005726 	.word	0x08005726
 8004da0:	08002bad 	.word	0x08002bad
 8004da4:	08004b27 	.word	0x08004b27
 8004da8:	08005722 	.word	0x08005722

08004dac <_sbrk_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4d06      	ldr	r5, [pc, #24]	; (8004dc8 <_sbrk_r+0x1c>)
 8004db0:	2300      	movs	r3, #0
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	f7fc fd54 	bl	8001864 <_sbrk>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_sbrk_r+0x1a>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_sbrk_r+0x1a>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	20000314 	.word	0x20000314

08004dcc <__sread>:
 8004dcc:	b510      	push	{r4, lr}
 8004dce:	460c      	mov	r4, r1
 8004dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd4:	f000 faa6 	bl	8005324 <_read_r>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	bfab      	itete	ge
 8004ddc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dde:	89a3      	ldrhlt	r3, [r4, #12]
 8004de0:	181b      	addge	r3, r3, r0
 8004de2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004de6:	bfac      	ite	ge
 8004de8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dea:	81a3      	strhlt	r3, [r4, #12]
 8004dec:	bd10      	pop	{r4, pc}

08004dee <__swrite>:
 8004dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df2:	461f      	mov	r7, r3
 8004df4:	898b      	ldrh	r3, [r1, #12]
 8004df6:	05db      	lsls	r3, r3, #23
 8004df8:	4605      	mov	r5, r0
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	4616      	mov	r6, r2
 8004dfe:	d505      	bpl.n	8004e0c <__swrite+0x1e>
 8004e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e04:	2302      	movs	r3, #2
 8004e06:	2200      	movs	r2, #0
 8004e08:	f000 f9f8 	bl	80051fc <_lseek_r>
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e16:	81a3      	strh	r3, [r4, #12]
 8004e18:	4632      	mov	r2, r6
 8004e1a:	463b      	mov	r3, r7
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e22:	f000 b869 	b.w	8004ef8 <_write_r>

08004e26 <__sseek>:
 8004e26:	b510      	push	{r4, lr}
 8004e28:	460c      	mov	r4, r1
 8004e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2e:	f000 f9e5 	bl	80051fc <_lseek_r>
 8004e32:	1c43      	adds	r3, r0, #1
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	bf15      	itete	ne
 8004e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e42:	81a3      	strheq	r3, [r4, #12]
 8004e44:	bf18      	it	ne
 8004e46:	81a3      	strhne	r3, [r4, #12]
 8004e48:	bd10      	pop	{r4, pc}

08004e4a <__sclose>:
 8004e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e4e:	f000 b8f1 	b.w	8005034 <_close_r>
	...

08004e54 <__swbuf_r>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	460e      	mov	r6, r1
 8004e58:	4614      	mov	r4, r2
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	b118      	cbz	r0, 8004e66 <__swbuf_r+0x12>
 8004e5e:	6983      	ldr	r3, [r0, #24]
 8004e60:	b90b      	cbnz	r3, 8004e66 <__swbuf_r+0x12>
 8004e62:	f7ff f955 	bl	8004110 <__sinit>
 8004e66:	4b21      	ldr	r3, [pc, #132]	; (8004eec <__swbuf_r+0x98>)
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	d12b      	bne.n	8004ec4 <__swbuf_r+0x70>
 8004e6c:	686c      	ldr	r4, [r5, #4]
 8004e6e:	69a3      	ldr	r3, [r4, #24]
 8004e70:	60a3      	str	r3, [r4, #8]
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	071a      	lsls	r2, r3, #28
 8004e76:	d52f      	bpl.n	8004ed8 <__swbuf_r+0x84>
 8004e78:	6923      	ldr	r3, [r4, #16]
 8004e7a:	b36b      	cbz	r3, 8004ed8 <__swbuf_r+0x84>
 8004e7c:	6923      	ldr	r3, [r4, #16]
 8004e7e:	6820      	ldr	r0, [r4, #0]
 8004e80:	1ac0      	subs	r0, r0, r3
 8004e82:	6963      	ldr	r3, [r4, #20]
 8004e84:	b2f6      	uxtb	r6, r6
 8004e86:	4283      	cmp	r3, r0
 8004e88:	4637      	mov	r7, r6
 8004e8a:	dc04      	bgt.n	8004e96 <__swbuf_r+0x42>
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 f966 	bl	8005160 <_fflush_r>
 8004e94:	bb30      	cbnz	r0, 8004ee4 <__swbuf_r+0x90>
 8004e96:	68a3      	ldr	r3, [r4, #8]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	60a3      	str	r3, [r4, #8]
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	6022      	str	r2, [r4, #0]
 8004ea2:	701e      	strb	r6, [r3, #0]
 8004ea4:	6963      	ldr	r3, [r4, #20]
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	4283      	cmp	r3, r0
 8004eaa:	d004      	beq.n	8004eb6 <__swbuf_r+0x62>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	07db      	lsls	r3, r3, #31
 8004eb0:	d506      	bpl.n	8004ec0 <__swbuf_r+0x6c>
 8004eb2:	2e0a      	cmp	r6, #10
 8004eb4:	d104      	bne.n	8004ec0 <__swbuf_r+0x6c>
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 f951 	bl	8005160 <_fflush_r>
 8004ebe:	b988      	cbnz	r0, 8004ee4 <__swbuf_r+0x90>
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <__swbuf_r+0x9c>)
 8004ec6:	429c      	cmp	r4, r3
 8004ec8:	d101      	bne.n	8004ece <__swbuf_r+0x7a>
 8004eca:	68ac      	ldr	r4, [r5, #8]
 8004ecc:	e7cf      	b.n	8004e6e <__swbuf_r+0x1a>
 8004ece:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <__swbuf_r+0xa0>)
 8004ed0:	429c      	cmp	r4, r3
 8004ed2:	bf08      	it	eq
 8004ed4:	68ec      	ldreq	r4, [r5, #12]
 8004ed6:	e7ca      	b.n	8004e6e <__swbuf_r+0x1a>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 f81e 	bl	8004f1c <__swsetup_r>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d0cb      	beq.n	8004e7c <__swbuf_r+0x28>
 8004ee4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004ee8:	e7ea      	b.n	8004ec0 <__swbuf_r+0x6c>
 8004eea:	bf00      	nop
 8004eec:	08005580 	.word	0x08005580
 8004ef0:	080055a0 	.word	0x080055a0
 8004ef4:	08005560 	.word	0x08005560

08004ef8 <_write_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	; (8004f18 <_write_r+0x20>)
 8004efc:	4604      	mov	r4, r0
 8004efe:	4608      	mov	r0, r1
 8004f00:	4611      	mov	r1, r2
 8004f02:	2200      	movs	r2, #0
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f7fc f8cc 	bl	80010a4 <_write>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_write_r+0x1e>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_write_r+0x1e>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	20000314 	.word	0x20000314

08004f1c <__swsetup_r>:
 8004f1c:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <__swsetup_r+0xcc>)
 8004f1e:	b570      	push	{r4, r5, r6, lr}
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	4606      	mov	r6, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	b125      	cbz	r5, 8004f32 <__swsetup_r+0x16>
 8004f28:	69ab      	ldr	r3, [r5, #24]
 8004f2a:	b913      	cbnz	r3, 8004f32 <__swsetup_r+0x16>
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f7ff f8ef 	bl	8004110 <__sinit>
 8004f32:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <__swsetup_r+0xd0>)
 8004f34:	429c      	cmp	r4, r3
 8004f36:	d10f      	bne.n	8004f58 <__swsetup_r+0x3c>
 8004f38:	686c      	ldr	r4, [r5, #4]
 8004f3a:	89a3      	ldrh	r3, [r4, #12]
 8004f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f40:	0719      	lsls	r1, r3, #28
 8004f42:	d42c      	bmi.n	8004f9e <__swsetup_r+0x82>
 8004f44:	06dd      	lsls	r5, r3, #27
 8004f46:	d411      	bmi.n	8004f6c <__swsetup_r+0x50>
 8004f48:	2309      	movs	r3, #9
 8004f4a:	6033      	str	r3, [r6, #0]
 8004f4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f50:	81a3      	strh	r3, [r4, #12]
 8004f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f56:	e03e      	b.n	8004fd6 <__swsetup_r+0xba>
 8004f58:	4b25      	ldr	r3, [pc, #148]	; (8004ff0 <__swsetup_r+0xd4>)
 8004f5a:	429c      	cmp	r4, r3
 8004f5c:	d101      	bne.n	8004f62 <__swsetup_r+0x46>
 8004f5e:	68ac      	ldr	r4, [r5, #8]
 8004f60:	e7eb      	b.n	8004f3a <__swsetup_r+0x1e>
 8004f62:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <__swsetup_r+0xd8>)
 8004f64:	429c      	cmp	r4, r3
 8004f66:	bf08      	it	eq
 8004f68:	68ec      	ldreq	r4, [r5, #12]
 8004f6a:	e7e6      	b.n	8004f3a <__swsetup_r+0x1e>
 8004f6c:	0758      	lsls	r0, r3, #29
 8004f6e:	d512      	bpl.n	8004f96 <__swsetup_r+0x7a>
 8004f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f72:	b141      	cbz	r1, 8004f86 <__swsetup_r+0x6a>
 8004f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f78:	4299      	cmp	r1, r3
 8004f7a:	d002      	beq.n	8004f82 <__swsetup_r+0x66>
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff fd11 	bl	80049a4 <_free_r>
 8004f82:	2300      	movs	r3, #0
 8004f84:	6363      	str	r3, [r4, #52]	; 0x34
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	6063      	str	r3, [r4, #4]
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	f043 0308 	orr.w	r3, r3, #8
 8004f9c:	81a3      	strh	r3, [r4, #12]
 8004f9e:	6923      	ldr	r3, [r4, #16]
 8004fa0:	b94b      	cbnz	r3, 8004fb6 <__swsetup_r+0x9a>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fac:	d003      	beq.n	8004fb6 <__swsetup_r+0x9a>
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	f000 f959 	bl	8005268 <__smakebuf_r>
 8004fb6:	89a0      	ldrh	r0, [r4, #12]
 8004fb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fbc:	f010 0301 	ands.w	r3, r0, #1
 8004fc0:	d00a      	beq.n	8004fd8 <__swsetup_r+0xbc>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60a3      	str	r3, [r4, #8]
 8004fc6:	6963      	ldr	r3, [r4, #20]
 8004fc8:	425b      	negs	r3, r3
 8004fca:	61a3      	str	r3, [r4, #24]
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	b943      	cbnz	r3, 8004fe2 <__swsetup_r+0xc6>
 8004fd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fd4:	d1ba      	bne.n	8004f4c <__swsetup_r+0x30>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	0781      	lsls	r1, r0, #30
 8004fda:	bf58      	it	pl
 8004fdc:	6963      	ldrpl	r3, [r4, #20]
 8004fde:	60a3      	str	r3, [r4, #8]
 8004fe0:	e7f4      	b.n	8004fcc <__swsetup_r+0xb0>
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e7f7      	b.n	8004fd6 <__swsetup_r+0xba>
 8004fe6:	bf00      	nop
 8004fe8:	2000000c 	.word	0x2000000c
 8004fec:	08005580 	.word	0x08005580
 8004ff0:	080055a0 	.word	0x080055a0
 8004ff4:	08005560 	.word	0x08005560

08004ff8 <__assert_func>:
 8004ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ffa:	4614      	mov	r4, r2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4b09      	ldr	r3, [pc, #36]	; (8005024 <__assert_func+0x2c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4605      	mov	r5, r0
 8005004:	68d8      	ldr	r0, [r3, #12]
 8005006:	b14c      	cbz	r4, 800501c <__assert_func+0x24>
 8005008:	4b07      	ldr	r3, [pc, #28]	; (8005028 <__assert_func+0x30>)
 800500a:	9100      	str	r1, [sp, #0]
 800500c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005010:	4906      	ldr	r1, [pc, #24]	; (800502c <__assert_func+0x34>)
 8005012:	462b      	mov	r3, r5
 8005014:	f000 f8e0 	bl	80051d8 <fiprintf>
 8005018:	f000 f9a3 	bl	8005362 <abort>
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <__assert_func+0x38>)
 800501e:	461c      	mov	r4, r3
 8005020:	e7f3      	b.n	800500a <__assert_func+0x12>
 8005022:	bf00      	nop
 8005024:	2000000c 	.word	0x2000000c
 8005028:	0800572d 	.word	0x0800572d
 800502c:	0800573a 	.word	0x0800573a
 8005030:	08005768 	.word	0x08005768

08005034 <_close_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d06      	ldr	r5, [pc, #24]	; (8005050 <_close_r+0x1c>)
 8005038:	2300      	movs	r3, #0
 800503a:	4604      	mov	r4, r0
 800503c:	4608      	mov	r0, r1
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	f7fc fc02 	bl	8001848 <_close>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d102      	bne.n	800504e <_close_r+0x1a>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	b103      	cbz	r3, 800504e <_close_r+0x1a>
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	20000314 	.word	0x20000314

08005054 <__sflush_r>:
 8005054:	898a      	ldrh	r2, [r1, #12]
 8005056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800505a:	4605      	mov	r5, r0
 800505c:	0710      	lsls	r0, r2, #28
 800505e:	460c      	mov	r4, r1
 8005060:	d458      	bmi.n	8005114 <__sflush_r+0xc0>
 8005062:	684b      	ldr	r3, [r1, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	dc05      	bgt.n	8005074 <__sflush_r+0x20>
 8005068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	dc02      	bgt.n	8005074 <__sflush_r+0x20>
 800506e:	2000      	movs	r0, #0
 8005070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005076:	2e00      	cmp	r6, #0
 8005078:	d0f9      	beq.n	800506e <__sflush_r+0x1a>
 800507a:	2300      	movs	r3, #0
 800507c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005080:	682f      	ldr	r7, [r5, #0]
 8005082:	602b      	str	r3, [r5, #0]
 8005084:	d032      	beq.n	80050ec <__sflush_r+0x98>
 8005086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005088:	89a3      	ldrh	r3, [r4, #12]
 800508a:	075a      	lsls	r2, r3, #29
 800508c:	d505      	bpl.n	800509a <__sflush_r+0x46>
 800508e:	6863      	ldr	r3, [r4, #4]
 8005090:	1ac0      	subs	r0, r0, r3
 8005092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005094:	b10b      	cbz	r3, 800509a <__sflush_r+0x46>
 8005096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005098:	1ac0      	subs	r0, r0, r3
 800509a:	2300      	movs	r3, #0
 800509c:	4602      	mov	r2, r0
 800509e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050a0:	6a21      	ldr	r1, [r4, #32]
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b0      	blx	r6
 80050a6:	1c43      	adds	r3, r0, #1
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	d106      	bne.n	80050ba <__sflush_r+0x66>
 80050ac:	6829      	ldr	r1, [r5, #0]
 80050ae:	291d      	cmp	r1, #29
 80050b0:	d82c      	bhi.n	800510c <__sflush_r+0xb8>
 80050b2:	4a2a      	ldr	r2, [pc, #168]	; (800515c <__sflush_r+0x108>)
 80050b4:	40ca      	lsrs	r2, r1
 80050b6:	07d6      	lsls	r6, r2, #31
 80050b8:	d528      	bpl.n	800510c <__sflush_r+0xb8>
 80050ba:	2200      	movs	r2, #0
 80050bc:	6062      	str	r2, [r4, #4]
 80050be:	04d9      	lsls	r1, r3, #19
 80050c0:	6922      	ldr	r2, [r4, #16]
 80050c2:	6022      	str	r2, [r4, #0]
 80050c4:	d504      	bpl.n	80050d0 <__sflush_r+0x7c>
 80050c6:	1c42      	adds	r2, r0, #1
 80050c8:	d101      	bne.n	80050ce <__sflush_r+0x7a>
 80050ca:	682b      	ldr	r3, [r5, #0]
 80050cc:	b903      	cbnz	r3, 80050d0 <__sflush_r+0x7c>
 80050ce:	6560      	str	r0, [r4, #84]	; 0x54
 80050d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050d2:	602f      	str	r7, [r5, #0]
 80050d4:	2900      	cmp	r1, #0
 80050d6:	d0ca      	beq.n	800506e <__sflush_r+0x1a>
 80050d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050dc:	4299      	cmp	r1, r3
 80050de:	d002      	beq.n	80050e6 <__sflush_r+0x92>
 80050e0:	4628      	mov	r0, r5
 80050e2:	f7ff fc5f 	bl	80049a4 <_free_r>
 80050e6:	2000      	movs	r0, #0
 80050e8:	6360      	str	r0, [r4, #52]	; 0x34
 80050ea:	e7c1      	b.n	8005070 <__sflush_r+0x1c>
 80050ec:	6a21      	ldr	r1, [r4, #32]
 80050ee:	2301      	movs	r3, #1
 80050f0:	4628      	mov	r0, r5
 80050f2:	47b0      	blx	r6
 80050f4:	1c41      	adds	r1, r0, #1
 80050f6:	d1c7      	bne.n	8005088 <__sflush_r+0x34>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0c4      	beq.n	8005088 <__sflush_r+0x34>
 80050fe:	2b1d      	cmp	r3, #29
 8005100:	d001      	beq.n	8005106 <__sflush_r+0xb2>
 8005102:	2b16      	cmp	r3, #22
 8005104:	d101      	bne.n	800510a <__sflush_r+0xb6>
 8005106:	602f      	str	r7, [r5, #0]
 8005108:	e7b1      	b.n	800506e <__sflush_r+0x1a>
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005110:	81a3      	strh	r3, [r4, #12]
 8005112:	e7ad      	b.n	8005070 <__sflush_r+0x1c>
 8005114:	690f      	ldr	r7, [r1, #16]
 8005116:	2f00      	cmp	r7, #0
 8005118:	d0a9      	beq.n	800506e <__sflush_r+0x1a>
 800511a:	0793      	lsls	r3, r2, #30
 800511c:	680e      	ldr	r6, [r1, #0]
 800511e:	bf08      	it	eq
 8005120:	694b      	ldreq	r3, [r1, #20]
 8005122:	600f      	str	r7, [r1, #0]
 8005124:	bf18      	it	ne
 8005126:	2300      	movne	r3, #0
 8005128:	eba6 0807 	sub.w	r8, r6, r7
 800512c:	608b      	str	r3, [r1, #8]
 800512e:	f1b8 0f00 	cmp.w	r8, #0
 8005132:	dd9c      	ble.n	800506e <__sflush_r+0x1a>
 8005134:	6a21      	ldr	r1, [r4, #32]
 8005136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005138:	4643      	mov	r3, r8
 800513a:	463a      	mov	r2, r7
 800513c:	4628      	mov	r0, r5
 800513e:	47b0      	blx	r6
 8005140:	2800      	cmp	r0, #0
 8005142:	dc06      	bgt.n	8005152 <__sflush_r+0xfe>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005150:	e78e      	b.n	8005070 <__sflush_r+0x1c>
 8005152:	4407      	add	r7, r0
 8005154:	eba8 0800 	sub.w	r8, r8, r0
 8005158:	e7e9      	b.n	800512e <__sflush_r+0xda>
 800515a:	bf00      	nop
 800515c:	20400001 	.word	0x20400001

08005160 <_fflush_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	690b      	ldr	r3, [r1, #16]
 8005164:	4605      	mov	r5, r0
 8005166:	460c      	mov	r4, r1
 8005168:	b913      	cbnz	r3, 8005170 <_fflush_r+0x10>
 800516a:	2500      	movs	r5, #0
 800516c:	4628      	mov	r0, r5
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	b118      	cbz	r0, 800517a <_fflush_r+0x1a>
 8005172:	6983      	ldr	r3, [r0, #24]
 8005174:	b90b      	cbnz	r3, 800517a <_fflush_r+0x1a>
 8005176:	f7fe ffcb 	bl	8004110 <__sinit>
 800517a:	4b14      	ldr	r3, [pc, #80]	; (80051cc <_fflush_r+0x6c>)
 800517c:	429c      	cmp	r4, r3
 800517e:	d11b      	bne.n	80051b8 <_fflush_r+0x58>
 8005180:	686c      	ldr	r4, [r5, #4]
 8005182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0ef      	beq.n	800516a <_fflush_r+0xa>
 800518a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800518c:	07d0      	lsls	r0, r2, #31
 800518e:	d404      	bmi.n	800519a <_fflush_r+0x3a>
 8005190:	0599      	lsls	r1, r3, #22
 8005192:	d402      	bmi.n	800519a <_fflush_r+0x3a>
 8005194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005196:	f7ff f85e 	bl	8004256 <__retarget_lock_acquire_recursive>
 800519a:	4628      	mov	r0, r5
 800519c:	4621      	mov	r1, r4
 800519e:	f7ff ff59 	bl	8005054 <__sflush_r>
 80051a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a4:	07da      	lsls	r2, r3, #31
 80051a6:	4605      	mov	r5, r0
 80051a8:	d4e0      	bmi.n	800516c <_fflush_r+0xc>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	059b      	lsls	r3, r3, #22
 80051ae:	d4dd      	bmi.n	800516c <_fflush_r+0xc>
 80051b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b2:	f7ff f851 	bl	8004258 <__retarget_lock_release_recursive>
 80051b6:	e7d9      	b.n	800516c <_fflush_r+0xc>
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <_fflush_r+0x70>)
 80051ba:	429c      	cmp	r4, r3
 80051bc:	d101      	bne.n	80051c2 <_fflush_r+0x62>
 80051be:	68ac      	ldr	r4, [r5, #8]
 80051c0:	e7df      	b.n	8005182 <_fflush_r+0x22>
 80051c2:	4b04      	ldr	r3, [pc, #16]	; (80051d4 <_fflush_r+0x74>)
 80051c4:	429c      	cmp	r4, r3
 80051c6:	bf08      	it	eq
 80051c8:	68ec      	ldreq	r4, [r5, #12]
 80051ca:	e7da      	b.n	8005182 <_fflush_r+0x22>
 80051cc:	08005580 	.word	0x08005580
 80051d0:	080055a0 	.word	0x080055a0
 80051d4:	08005560 	.word	0x08005560

080051d8 <fiprintf>:
 80051d8:	b40e      	push	{r1, r2, r3}
 80051da:	b503      	push	{r0, r1, lr}
 80051dc:	4601      	mov	r1, r0
 80051de:	ab03      	add	r3, sp, #12
 80051e0:	4805      	ldr	r0, [pc, #20]	; (80051f8 <fiprintf+0x20>)
 80051e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e6:	6800      	ldr	r0, [r0, #0]
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	f7ff fcaf 	bl	8004b4c <_vfiprintf_r>
 80051ee:	b002      	add	sp, #8
 80051f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f4:	b003      	add	sp, #12
 80051f6:	4770      	bx	lr
 80051f8:	2000000c 	.word	0x2000000c

080051fc <_lseek_r>:
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	4d07      	ldr	r5, [pc, #28]	; (800521c <_lseek_r+0x20>)
 8005200:	4604      	mov	r4, r0
 8005202:	4608      	mov	r0, r1
 8005204:	4611      	mov	r1, r2
 8005206:	2200      	movs	r2, #0
 8005208:	602a      	str	r2, [r5, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	f7fc fb28 	bl	8001860 <_lseek>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_lseek_r+0x1e>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b103      	cbz	r3, 800521a <_lseek_r+0x1e>
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	20000314 	.word	0x20000314

08005220 <__swhatbuf_r>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	460e      	mov	r6, r1
 8005224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005228:	2900      	cmp	r1, #0
 800522a:	b096      	sub	sp, #88	; 0x58
 800522c:	4614      	mov	r4, r2
 800522e:	461d      	mov	r5, r3
 8005230:	da07      	bge.n	8005242 <__swhatbuf_r+0x22>
 8005232:	2300      	movs	r3, #0
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	89b3      	ldrh	r3, [r6, #12]
 8005238:	061a      	lsls	r2, r3, #24
 800523a:	d410      	bmi.n	800525e <__swhatbuf_r+0x3e>
 800523c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005240:	e00e      	b.n	8005260 <__swhatbuf_r+0x40>
 8005242:	466a      	mov	r2, sp
 8005244:	f000 f894 	bl	8005370 <_fstat_r>
 8005248:	2800      	cmp	r0, #0
 800524a:	dbf2      	blt.n	8005232 <__swhatbuf_r+0x12>
 800524c:	9a01      	ldr	r2, [sp, #4]
 800524e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005252:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005256:	425a      	negs	r2, r3
 8005258:	415a      	adcs	r2, r3
 800525a:	602a      	str	r2, [r5, #0]
 800525c:	e7ee      	b.n	800523c <__swhatbuf_r+0x1c>
 800525e:	2340      	movs	r3, #64	; 0x40
 8005260:	2000      	movs	r0, #0
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	b016      	add	sp, #88	; 0x58
 8005266:	bd70      	pop	{r4, r5, r6, pc}

08005268 <__smakebuf_r>:
 8005268:	898b      	ldrh	r3, [r1, #12]
 800526a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800526c:	079d      	lsls	r5, r3, #30
 800526e:	4606      	mov	r6, r0
 8005270:	460c      	mov	r4, r1
 8005272:	d507      	bpl.n	8005284 <__smakebuf_r+0x1c>
 8005274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	6123      	str	r3, [r4, #16]
 800527c:	2301      	movs	r3, #1
 800527e:	6163      	str	r3, [r4, #20]
 8005280:	b002      	add	sp, #8
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	ab01      	add	r3, sp, #4
 8005286:	466a      	mov	r2, sp
 8005288:	f7ff ffca 	bl	8005220 <__swhatbuf_r>
 800528c:	9900      	ldr	r1, [sp, #0]
 800528e:	4605      	mov	r5, r0
 8005290:	4630      	mov	r0, r6
 8005292:	f7ff fbd7 	bl	8004a44 <_malloc_r>
 8005296:	b948      	cbnz	r0, 80052ac <__smakebuf_r+0x44>
 8005298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800529c:	059a      	lsls	r2, r3, #22
 800529e:	d4ef      	bmi.n	8005280 <__smakebuf_r+0x18>
 80052a0:	f023 0303 	bic.w	r3, r3, #3
 80052a4:	f043 0302 	orr.w	r3, r3, #2
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	e7e3      	b.n	8005274 <__smakebuf_r+0xc>
 80052ac:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <__smakebuf_r+0x7c>)
 80052ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80052b0:	89a3      	ldrh	r3, [r4, #12]
 80052b2:	6020      	str	r0, [r4, #0]
 80052b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b8:	81a3      	strh	r3, [r4, #12]
 80052ba:	9b00      	ldr	r3, [sp, #0]
 80052bc:	6163      	str	r3, [r4, #20]
 80052be:	9b01      	ldr	r3, [sp, #4]
 80052c0:	6120      	str	r0, [r4, #16]
 80052c2:	b15b      	cbz	r3, 80052dc <__smakebuf_r+0x74>
 80052c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052c8:	4630      	mov	r0, r6
 80052ca:	f000 f863 	bl	8005394 <_isatty_r>
 80052ce:	b128      	cbz	r0, 80052dc <__smakebuf_r+0x74>
 80052d0:	89a3      	ldrh	r3, [r4, #12]
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	81a3      	strh	r3, [r4, #12]
 80052dc:	89a0      	ldrh	r0, [r4, #12]
 80052de:	4305      	orrs	r5, r0
 80052e0:	81a5      	strh	r5, [r4, #12]
 80052e2:	e7cd      	b.n	8005280 <__smakebuf_r+0x18>
 80052e4:	080040a9 	.word	0x080040a9

080052e8 <__ascii_mbtowc>:
 80052e8:	b082      	sub	sp, #8
 80052ea:	b901      	cbnz	r1, 80052ee <__ascii_mbtowc+0x6>
 80052ec:	a901      	add	r1, sp, #4
 80052ee:	b142      	cbz	r2, 8005302 <__ascii_mbtowc+0x1a>
 80052f0:	b14b      	cbz	r3, 8005306 <__ascii_mbtowc+0x1e>
 80052f2:	7813      	ldrb	r3, [r2, #0]
 80052f4:	600b      	str	r3, [r1, #0]
 80052f6:	7812      	ldrb	r2, [r2, #0]
 80052f8:	1e10      	subs	r0, r2, #0
 80052fa:	bf18      	it	ne
 80052fc:	2001      	movne	r0, #1
 80052fe:	b002      	add	sp, #8
 8005300:	4770      	bx	lr
 8005302:	4610      	mov	r0, r2
 8005304:	e7fb      	b.n	80052fe <__ascii_mbtowc+0x16>
 8005306:	f06f 0001 	mvn.w	r0, #1
 800530a:	e7f8      	b.n	80052fe <__ascii_mbtowc+0x16>

0800530c <__malloc_lock>:
 800530c:	4801      	ldr	r0, [pc, #4]	; (8005314 <__malloc_lock+0x8>)
 800530e:	f7fe bfa2 	b.w	8004256 <__retarget_lock_acquire_recursive>
 8005312:	bf00      	nop
 8005314:	2000030c 	.word	0x2000030c

08005318 <__malloc_unlock>:
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <__malloc_unlock+0x8>)
 800531a:	f7fe bf9d 	b.w	8004258 <__retarget_lock_release_recursive>
 800531e:	bf00      	nop
 8005320:	2000030c 	.word	0x2000030c

08005324 <_read_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4d07      	ldr	r5, [pc, #28]	; (8005344 <_read_r+0x20>)
 8005328:	4604      	mov	r4, r0
 800532a:	4608      	mov	r0, r1
 800532c:	4611      	mov	r1, r2
 800532e:	2200      	movs	r2, #0
 8005330:	602a      	str	r2, [r5, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	f7fc fa7a 	bl	800182c <_read>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d102      	bne.n	8005342 <_read_r+0x1e>
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	b103      	cbz	r3, 8005342 <_read_r+0x1e>
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	20000314 	.word	0x20000314

08005348 <__ascii_wctomb>:
 8005348:	b149      	cbz	r1, 800535e <__ascii_wctomb+0x16>
 800534a:	2aff      	cmp	r2, #255	; 0xff
 800534c:	bf85      	ittet	hi
 800534e:	238a      	movhi	r3, #138	; 0x8a
 8005350:	6003      	strhi	r3, [r0, #0]
 8005352:	700a      	strbls	r2, [r1, #0]
 8005354:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005358:	bf98      	it	ls
 800535a:	2001      	movls	r0, #1
 800535c:	4770      	bx	lr
 800535e:	4608      	mov	r0, r1
 8005360:	4770      	bx	lr

08005362 <abort>:
 8005362:	b508      	push	{r3, lr}
 8005364:	2006      	movs	r0, #6
 8005366:	f000 f84d 	bl	8005404 <raise>
 800536a:	2001      	movs	r0, #1
 800536c:	f7fc fa58 	bl	8001820 <_exit>

08005370 <_fstat_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4d07      	ldr	r5, [pc, #28]	; (8005390 <_fstat_r+0x20>)
 8005374:	2300      	movs	r3, #0
 8005376:	4604      	mov	r4, r0
 8005378:	4608      	mov	r0, r1
 800537a:	4611      	mov	r1, r2
 800537c:	602b      	str	r3, [r5, #0]
 800537e:	f7fc fa67 	bl	8001850 <_fstat>
 8005382:	1c43      	adds	r3, r0, #1
 8005384:	d102      	bne.n	800538c <_fstat_r+0x1c>
 8005386:	682b      	ldr	r3, [r5, #0]
 8005388:	b103      	cbz	r3, 800538c <_fstat_r+0x1c>
 800538a:	6023      	str	r3, [r4, #0]
 800538c:	bd38      	pop	{r3, r4, r5, pc}
 800538e:	bf00      	nop
 8005390:	20000314 	.word	0x20000314

08005394 <_isatty_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4d06      	ldr	r5, [pc, #24]	; (80053b0 <_isatty_r+0x1c>)
 8005398:	2300      	movs	r3, #0
 800539a:	4604      	mov	r4, r0
 800539c:	4608      	mov	r0, r1
 800539e:	602b      	str	r3, [r5, #0]
 80053a0:	f7fc fa5c 	bl	800185c <_isatty>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d102      	bne.n	80053ae <_isatty_r+0x1a>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	b103      	cbz	r3, 80053ae <_isatty_r+0x1a>
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	bd38      	pop	{r3, r4, r5, pc}
 80053b0:	20000314 	.word	0x20000314

080053b4 <_raise_r>:
 80053b4:	291f      	cmp	r1, #31
 80053b6:	b538      	push	{r3, r4, r5, lr}
 80053b8:	4604      	mov	r4, r0
 80053ba:	460d      	mov	r5, r1
 80053bc:	d904      	bls.n	80053c8 <_raise_r+0x14>
 80053be:	2316      	movs	r3, #22
 80053c0:	6003      	str	r3, [r0, #0]
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80053ca:	b112      	cbz	r2, 80053d2 <_raise_r+0x1e>
 80053cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80053d0:	b94b      	cbnz	r3, 80053e6 <_raise_r+0x32>
 80053d2:	4620      	mov	r0, r4
 80053d4:	f000 f830 	bl	8005438 <_getpid_r>
 80053d8:	462a      	mov	r2, r5
 80053da:	4601      	mov	r1, r0
 80053dc:	4620      	mov	r0, r4
 80053de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053e2:	f000 b817 	b.w	8005414 <_kill_r>
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d00a      	beq.n	8005400 <_raise_r+0x4c>
 80053ea:	1c59      	adds	r1, r3, #1
 80053ec:	d103      	bne.n	80053f6 <_raise_r+0x42>
 80053ee:	2316      	movs	r3, #22
 80053f0:	6003      	str	r3, [r0, #0]
 80053f2:	2001      	movs	r0, #1
 80053f4:	e7e7      	b.n	80053c6 <_raise_r+0x12>
 80053f6:	2400      	movs	r4, #0
 80053f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80053fc:	4628      	mov	r0, r5
 80053fe:	4798      	blx	r3
 8005400:	2000      	movs	r0, #0
 8005402:	e7e0      	b.n	80053c6 <_raise_r+0x12>

08005404 <raise>:
 8005404:	4b02      	ldr	r3, [pc, #8]	; (8005410 <raise+0xc>)
 8005406:	4601      	mov	r1, r0
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	f7ff bfd3 	b.w	80053b4 <_raise_r>
 800540e:	bf00      	nop
 8005410:	2000000c 	.word	0x2000000c

08005414 <_kill_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4d07      	ldr	r5, [pc, #28]	; (8005434 <_kill_r+0x20>)
 8005418:	2300      	movs	r3, #0
 800541a:	4604      	mov	r4, r0
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	602b      	str	r3, [r5, #0]
 8005422:	f7fc f9f5 	bl	8001810 <_kill>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d102      	bne.n	8005430 <_kill_r+0x1c>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	b103      	cbz	r3, 8005430 <_kill_r+0x1c>
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	bd38      	pop	{r3, r4, r5, pc}
 8005432:	bf00      	nop
 8005434:	20000314 	.word	0x20000314

08005438 <_getpid_r>:
 8005438:	f7fc b9e8 	b.w	800180c <_getpid>

0800543c <_init>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr

08005448 <_fini>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	bf00      	nop
 800544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544e:	bc08      	pop	{r3}
 8005450:	469e      	mov	lr, r3
 8005452:	4770      	bx	lr
